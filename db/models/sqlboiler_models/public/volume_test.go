// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testVolumes(t *testing.T) {
	t.Parallel()

	query := Volumes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVolumesLive(t *testing.T) {
	all, err := Volumes(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Volumes err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM volume) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM volume) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("VolumesLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testVolumesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volume.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Volumes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeSlice{volume}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VolumeExists(tx, volume.ID)
	if err != nil {
		t.Errorf("Unable to check if Volume exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VolumeExistsG to return true, but got false.")
	}
}

func testVolumesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	volumeFound, err := FindVolume(tx, volume.ID)
	if err != nil {
		t.Error(err)
	}

	if volumeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVolumesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Volumes(tx).Bind(volume); err != nil {
		t.Error(err)
	}
}

func testVolumesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Volumes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVolumesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeOne := &Volume{}
	volumeTwo := &Volume{}
	if err = randomize.Struct(seed, volumeOne, volumeDBTypes, false, volumeColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeTwo, volumeDBTypes, false, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Volumes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVolumesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeOne := &Volume{}
	volumeTwo := &Volume{}
	if err = randomize.Struct(seed, volumeOne, volumeDBTypes, false, volumeColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeTwo, volumeDBTypes, false, volumeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func volumeBeforeInsertHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeAfterInsertHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeAfterSelectHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeBeforeUpdateHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeAfterUpdateHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeBeforeDeleteHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeAfterDeleteHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeBeforeUpsertHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func volumeAfterUpsertHook(e boil.Executor, o *Volume) error {
	*o = Volume{}
	return nil
}

func testVolumesHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	empty := &Volume{}

	AddVolumeHook(boil.BeforeInsertHook, volumeBeforeInsertHook)
	if err = volume.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", volume)
	}
	volumeBeforeInsertHooks = []VolumeHook{}

	AddVolumeHook(boil.AfterInsertHook, volumeAfterInsertHook)
	if err = volume.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", volume)
	}
	volumeAfterInsertHooks = []VolumeHook{}

	AddVolumeHook(boil.AfterSelectHook, volumeAfterSelectHook)
	if err = volume.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", volume)
	}
	volumeAfterSelectHooks = []VolumeHook{}

	AddVolumeHook(boil.BeforeUpdateHook, volumeBeforeUpdateHook)
	if err = volume.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", volume)
	}
	volumeBeforeUpdateHooks = []VolumeHook{}

	AddVolumeHook(boil.AfterUpdateHook, volumeAfterUpdateHook)
	if err = volume.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", volume)
	}
	volumeAfterUpdateHooks = []VolumeHook{}

	AddVolumeHook(boil.BeforeDeleteHook, volumeBeforeDeleteHook)
	if err = volume.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", volume)
	}
	volumeBeforeDeleteHooks = []VolumeHook{}

	AddVolumeHook(boil.AfterDeleteHook, volumeAfterDeleteHook)
	if err = volume.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", volume)
	}
	volumeAfterDeleteHooks = []VolumeHook{}

	AddVolumeHook(boil.BeforeUpsertHook, volumeBeforeUpsertHook)
	if err = volume.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", volume)
	}
	volumeBeforeUpsertHooks = []VolumeHook{}

	AddVolumeHook(boil.AfterUpsertHook, volumeAfterUpsertHook)
	if err = volume.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volume, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", volume)
	}
	volumeAfterUpsertHooks = []VolumeHook{}
}
func testVolumesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx, volumeColumns...); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeOneToOneVolumeCitationUsingVolumeCitation(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign VolumeCitation
	var local Volume

	foreignBlacklist := volumeCitationColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, volumeCitationDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeCitation struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &local, volumeDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Volume = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeCitationByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Volume != foreign.Volume {
		t.Errorf("want: %v, got %v", foreign.Volume, check.Volume)
	}

	slice := VolumeSlice{&local}
	if err = local.L.LoadVolumeCitation(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.VolumeCitation == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VolumeCitation = nil
	if err = local.L.LoadVolumeCitation(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VolumeCitation == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeOneToOneVolumeOwnerUsingVolumeOwner(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign VolumeOwner
	var local Volume

	foreignBlacklist := volumeOwnerColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, volumeOwnerDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeOwner struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &local, volumeDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Volume = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeOwnerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Volume != foreign.Volume {
		t.Errorf("want: %v, got %v", foreign.Volume, check.Volume)
	}

	slice := VolumeSlice{&local}
	if err = local.L.LoadVolumeOwner(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.VolumeOwner == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.VolumeOwner = nil
	if err = local.L.LoadVolumeOwner(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.VolumeOwner == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeOneToOneSetOpVolumeCitationUsingVolumeCitation(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	seed := randomize.NewSeed()
	var a Volume
	var b, c VolumeCitation

	foreignBlacklist := strmangle.SetComplement(volumeCitationPrimaryKeyColumns, volumeCitationColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeCitationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeCitation struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeCitationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeCitation struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VolumeCitation{&b, &c} {
		err = a.SetVolumeCitation(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VolumeCitation != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Volume != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Volume {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := VolumeCitationExists(tx, x.Volume); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Volume {
			t.Error("foreign key was wrong value", a.ID, x.Volume)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}
func testVolumeOneToOneSetOpVolumeOwnerUsingVolumeOwner(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	seed := randomize.NewSeed()
	var a Volume
	var b, c VolumeOwner

	foreignBlacklist := strmangle.SetComplement(volumeOwnerPrimaryKeyColumns, volumeOwnerColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeOwnerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeOwner struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeOwnerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeOwner struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*VolumeOwner{&b, &c} {
		err = a.SetVolumeOwner(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.VolumeOwner != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Volume != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Volume {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := VolumeOwnerExists(tx, x.Volume); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ID != x.Volume {
			t.Error("foreign key was wrong value", a.ID, x.Volume)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testVolumeToManyAssets(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Asset

	foreignBlacklist := assetColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, assetColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()
	b.Duration = custom_types.NullIntervalRandom()
	c.Duration = custom_types.NullIntervalRandom()

	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	asset, err := a.AssetsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range asset {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadAssets(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Assets = nil
	if err = a.L.LoadAssets(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Assets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", asset)
	}
}

func testVolumeToManyContainers(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Container

	foreignBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &b, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	container, err := a.ContainersByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range container {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadContainers(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Containers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Containers = nil
	if err = a.L.LoadContainers(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Containers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", container)
	}
}

func testVolumeToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Notification

	foreignBlacklist := notificationColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	b.Delivered = custom_types.NoticeDeliveryRandom()
	c.Delivered = custom_types.NoticeDeliveryRandom()
	b.Permission = custom_types.NullPermissionRandom()
	c.Permission = custom_types.NullPermissionRandom()
	b.Segment = custom_types.NullSegmentRandom()
	c.Segment = custom_types.NullSegmentRandom()
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()

	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume.Valid = true
	c.Volume.Valid = true
	b.Volume.Int = a.ID
	c.Volume.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Volume.Int == b.Volume.Int {
			bFound = true
		}
		if v.Volume.Int == c.Volume.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testVolumeToManyRecords(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Record

	foreignBlacklist := recordColumnsWithDefault
	if err := randomize.Struct(seed, &b, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	record, err := a.RecordsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range record {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadRecords(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Records = nil
	if err = a.L.LoadRecords(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", record)
	}
}

func testVolumeToManyUploads(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Upload

	foreignBlacklist := uploadColumnsWithDefault
	if err := randomize.Struct(seed, &b, uploadDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, uploadDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upload, err := a.UploadsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upload {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadUploads(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uploads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Uploads = nil
	if err = a.L.LoadUploads(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uploads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upload)
	}
}

func testVolumeToManyVolumeAccesses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c VolumeAccess

	foreignBlacklist := volumeAccessColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, volumeAccessColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, volumeAccessDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeAccess struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeAccessDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeAccess struct: %s", err)
	}
	b.Individual = custom_types.PermissionRandom()
	c.Individual = custom_types.PermissionRandom()
	b.Children = custom_types.PermissionRandom()
	c.Children = custom_types.PermissionRandom()

	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeAccess, err := a.VolumeAccessesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeAccess {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadVolumeAccesses(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeAccesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeAccesses = nil
	if err = a.L.LoadVolumeAccesses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeAccesses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeAccess)
	}
}

func testVolumeToManyVolumeFundings(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c VolumeFunding

	foreignBlacklist := volumeFundingColumnsWithDefault
	if err := randomize.Struct(seed, &b, volumeFundingDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeFundingDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeFunding, err := a.VolumeFundingsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeFunding {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadVolumeFundings(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeFundings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeFundings = nil
	if err = a.L.LoadVolumeFundings(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeFundings); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeFunding)
	}
}

func testVolumeToManyVolumeInclusions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c VolumeInclusion

	foreignBlacklist := volumeInclusionColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, volumeInclusionColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, volumeInclusionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeInclusionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeInclusion, err := a.VolumeInclusionsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeInclusion {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadVolumeInclusions(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeInclusions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeInclusions = nil
	if err = a.L.LoadVolumeInclusions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeInclusions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeInclusion)
	}
}

func testVolumeToManyVolumeLinks(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c VolumeLink

	foreignBlacklist := volumeLinkColumnsWithDefault
	if err := randomize.Struct(seed, &b, volumeLinkDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeLink struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeLinkDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeLink struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeLink, err := a.VolumeLinksByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeLink {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadVolumeLinks(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeLinks = nil
	if err = a.L.LoadVolumeLinks(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeLinks); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeLink)
	}
}

func testVolumeToManyMetrics(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c Metric

	foreignBlacklist := metricColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, metricDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, metricDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()
	b.Type = custom_types.DataTypeRandom()
	c.Type = custom_types.DataTypeRandom()

	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"volume_metric\" (\"volume\", \"metric\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"volume_metric\" (\"volume\", \"metric\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	metric, err := a.MetricsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range metric {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadMetrics(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Metrics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Metrics = nil
	if err = a.L.LoadMetrics(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Metrics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", metric)
	}
}

func testVolumeToManyVolumeStates(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Volume
	var b, c VolumeState

	foreignBlacklist := volumeStateColumnsWithDefault
	if err := randomize.Struct(seed, &b, volumeStateDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeState struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeStateDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeState struct: %s", err)
	}
	localBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &a, volumeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	b.Volume = a.ID
	c.Volume = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeState, err := a.VolumeStatesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeState {
		if v.Volume == b.Volume {
			bFound = true
		}
		if v.Volume == c.Volume {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := VolumeSlice{&a}
	if err = a.L.LoadVolumeStates(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeStates = nil
	if err = a.L.LoadVolumeStates(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeStates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeState)
	}
}

func testVolumeToManyAddOpAssets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Asset

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, assetColumnsWithCustom...)

	foreigners := []*Asset{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, assetDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Release = custom_types.NullReleaseRandom()
		x.Duration = custom_types.NullIntervalRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Asset{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAssets(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Assets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Assets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AssetsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpContainers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Container

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)

	foreigners := []*Container{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, containerDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Container{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddContainers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Containers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Containers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ContainersByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume.Int {
			t.Error("foreign key was wrong value", a.ID, first.Volume.Int)
		}
		if a.ID != second.Volume.Int {
			t.Error("foreign key was wrong value", a.ID, second.Volume.Int)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVolumeToManySetOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Volume.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Volume.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Volume.Int {
		t.Error("foreign key was wrong value", a.ID, d.Volume.Int)
	}
	if a.ID != e.Volume.Int {
		t.Error("foreign key was wrong value", a.ID, e.Volume.Int)
	}

	if b.R.Volume != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Volume != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Volume != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Volume != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Notifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Notifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVolumeToManyRemoveOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Volume.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Volume.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Volume != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Volume != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Volume != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Volume != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Notifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Notifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Notifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVolumeToManyAddOpRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Record

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)

	foreigners := []*Record{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Record{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecords(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Records[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Records[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecordsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpUploads(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Upload

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)

	foreigners := []*Upload{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Upload{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUploads(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Uploads[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Uploads[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UploadsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpVolumeAccesses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e VolumeAccess

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeAccessPrimaryKeyColumns, volumeAccessColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, volumeAccessColumnsWithCustom...)

	foreigners := []*VolumeAccess{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeAccessDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Individual = custom_types.PermissionRandom()
		x.Children = custom_types.PermissionRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeAccess{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeAccesses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeAccesses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeAccesses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeAccessesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpVolumeFundings(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e VolumeFunding

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeFundingPrimaryKeyColumns, volumeFundingColumnsWithoutDefault)

	foreigners := []*VolumeFunding{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeFundingDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeFunding{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeFundings(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeFundings[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeFundings[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeFundingsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpVolumeInclusions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e VolumeInclusion

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeInclusionPrimaryKeyColumns, volumeInclusionColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, volumeInclusionColumnsWithCustom...)

	foreigners := []*VolumeInclusion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeInclusionDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeInclusion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeInclusions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeInclusions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeInclusions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeInclusionsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpVolumeLinks(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e VolumeLink

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeLinkPrimaryKeyColumns, volumeLinkColumnsWithoutDefault)

	foreigners := []*VolumeLink{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeLinkDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeLink{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeLinks(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeLinks[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeLinks[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeLinksByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testVolumeToManyAddOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, metricColumnsWithCustom...)

	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Release = custom_types.NullReleaseRandom()
		x.Type = custom_types.DataTypeRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Metric{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMetrics(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Volumes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Volumes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Metrics[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Metrics[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MetricsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVolumeToManySetOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, metricColumnsWithCustom...)

	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Release = custom_types.NullReleaseRandom()
		x.Type = custom_types.DataTypeRandom()

	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetMetrics(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetMetrics(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Volumes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Volumes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Volumes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Volumes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Metrics[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Metrics[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testVolumeToManyRemoveOpMetrics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e Metric

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, metricColumnsWithCustom...)

	foreigners := []*Metric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, metricDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Release = custom_types.NullReleaseRandom()
		x.Type = custom_types.DataTypeRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddMetrics(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveMetrics(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.MetricsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Volumes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Volumes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Volumes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Volumes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Metrics) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Metrics[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Metrics[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testVolumeToManyAddOpVolumeStates(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Volume
	var b, c, d, e VolumeState

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, volumeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeStatePrimaryKeyColumns, volumeStateColumnsWithoutDefault)

	foreigners := []*VolumeState{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeStateDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeState{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeStates(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Volume {
			t.Error("foreign key was wrong value", a.ID, first.Volume)
		}
		if a.ID != second.Volume {
			t.Error("foreign key was wrong value", a.ID, second.Volume)
		}

		if first.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Volume != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeStates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeStates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeStatesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testVolumesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volume.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVolumesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeSlice{volume}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testVolumesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Volumes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	volumeDBTypes = map[string]string{`Alias`: `character varying`, `Body`: `text`, `Doi`: `character varying`, `ID`: `integer`, `Name`: `text`}
	_             = bytes.MinRead
)

func testVolumesUpdate(t *testing.T) {
	t.Parallel()

	if len(volumeColumns) == len(volumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := volumeColumnsWithDefault

	if err = randomize.Struct(seed, volume, volumeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err = volume.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVolumesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(volumeColumns) == len(volumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := volumePrimaryKeyColumns

	if err = randomize.Struct(seed, volume, volumeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(volumeColumns, volumePrimaryKeyColumns) {
		fields = volumeColumns
	} else {
		fields = strmangle.SetComplement(
			volumeColumns,
			volumePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(volume))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VolumeSlice{volume}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testVolumesUpsert(t *testing.T) {
	t.Parallel()

	if len(volumeColumns) == len(volumePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volume := &Volume{}
	if err = randomize.Struct(seed, volume, volumeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volume.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Volume: %s", err)
	}

	count, err := Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := volumePrimaryKeyColumns

	if err = randomize.Struct(seed, volume, volumeDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}

	if err = volume.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Volume: %s", err)
	}

	count, err = Volumes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
