// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Tag is an object representing the database table.
type Tag struct {
	ID   int    `db:"id" json:"tag_id"`
	Name string `db:"name" json:"tag_name"`

	R *tagR `db:"-" json:"-"`
	L tagL  `db:"-" json:"-"`
}

// tagR is where relationships are stored.
type tagR struct {
	Notifications NotificationSlice
	TagUses       TagUseSlice
}

// tagL is where Load methods for each relationship are stored.
type tagL struct{}

var (
	tagColumns               = []string{"id", "name"}
	tagColumnsWithoutDefault = []string{"name"}
	tagColumnsWithDefault    = []string{"id"}
	tagColumnsWithCustom     = []string{}

	tagPrimaryKeyColumns = []string{"id"}
)

type (
	// TagSlice is an alias for a slice of pointers to Tag.
	// This should generally be used opposed to []Tag.
	TagSlice []*Tag
	// TagHook is the signature for custom Tag hook methods
	TagHook func(boil.Executor, *Tag) error

	tagQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	tagType    = reflect.TypeOf(&Tag{})
	tagMapping = queries.MakeStructMapping(tagType)

	tagPrimaryKeyMapping, _ = queries.BindMapping(tagType, tagMapping, tagPrimaryKeyColumns)

	tagInsertCacheMut sync.RWMutex
	tagInsertCache    = make(map[string]insertCache)
	tagUpdateCacheMut sync.RWMutex
	tagUpdateCache    = make(map[string]updateCache)
	tagUpsertCacheMut sync.RWMutex
	tagUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var tagBeforeInsertHooks []TagHook
var tagBeforeUpdateHooks []TagHook
var tagBeforeDeleteHooks []TagHook
var tagBeforeUpsertHooks []TagHook

var tagAfterInsertHooks []TagHook
var tagAfterSelectHooks []TagHook
var tagAfterUpdateHooks []TagHook
var tagAfterDeleteHooks []TagHook
var tagAfterUpsertHooks []TagHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Tag) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Tag) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Tag) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Tag) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Tag) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Tag) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Tag) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Tag) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Tag) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range tagAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTagHook registers your hook function for all future operations.
func AddTagHook(hookPoint boil.HookPoint, tagHook TagHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		tagBeforeInsertHooks = append(tagBeforeInsertHooks, tagHook)
	case boil.BeforeUpdateHook:
		tagBeforeUpdateHooks = append(tagBeforeUpdateHooks, tagHook)
	case boil.BeforeDeleteHook:
		tagBeforeDeleteHooks = append(tagBeforeDeleteHooks, tagHook)
	case boil.BeforeUpsertHook:
		tagBeforeUpsertHooks = append(tagBeforeUpsertHooks, tagHook)
	case boil.AfterInsertHook:
		tagAfterInsertHooks = append(tagAfterInsertHooks, tagHook)
	case boil.AfterSelectHook:
		tagAfterSelectHooks = append(tagAfterSelectHooks, tagHook)
	case boil.AfterUpdateHook:
		tagAfterUpdateHooks = append(tagAfterUpdateHooks, tagHook)
	case boil.AfterDeleteHook:
		tagAfterDeleteHooks = append(tagAfterDeleteHooks, tagHook)
	case boil.AfterUpsertHook:
		tagAfterUpsertHooks = append(tagAfterUpsertHooks, tagHook)
	}
}

// OneP returns a single tag record from the query, and panics on error.
func (q tagQuery) OneP() *Tag {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single tag record from the query.
func (q tagQuery) One() (*Tag, error) {
	o := &Tag{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for tag")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Tag records from the query, and panics on error.
func (q tagQuery) AllP() TagSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Tag records from the query.
func (q tagQuery) All() (TagSlice, error) {
	var o TagSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Tag slice")
	}

	if len(tagAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Tag records in the query, and panics on error.
func (q tagQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Tag records in the query.
func (q tagQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count tag rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q tagQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q tagQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if tag exists")
	}

	return count > 0, nil
}

// NotificationsG retrieves all the notification's notification.
func (o *Tag) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Tag) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"tag\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// TagUsesG retrieves all the tag_use's tag use.
func (o *Tag) TagUsesG(mods ...qm.QueryMod) tagUseQuery {
	return o.TagUsesByFk(boil.GetDB(), mods...)
}

// TagUses retrieves all the tag_use's tag use with an executor.
func (o *Tag) TagUsesByFk(exec boil.Executor, mods ...qm.QueryMod) tagUseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"tag\"=?", o.ID),
	)

	query := TagUses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tag_use\" as \"a\"")
	return query
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tagL) LoadNotifications(e boil.Executor, singular bool, maybeTag interface{}) error {
	var slice []*Tag
	var object *Tag

	count := 1
	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*TagSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"tag\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Tag.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTagUses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (tagL) LoadTagUses(e boil.Executor, singular bool, maybeTag interface{}) error {
	var slice []*Tag
	var object *Tag

	count := 1
	if singular {
		object = maybeTag.(*Tag)
	} else {
		slice = *maybeTag.(*TagSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &tagR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &tagR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tag_use\" where \"tag\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_use")
	}
	defer results.Close()

	var resultSlice []*TagUse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_use")
	}

	if len(tagUseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TagUses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Tag {
				local.R.TagUses = append(local.R.TagUses, foreign)
				break
			}
		}
	}

	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Tag appropriately.
// Uses the global database handle.
func (o *Tag) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Tag appropriately.
// Panics on error.
func (o *Tag) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Tag appropriately.
// Uses the global database handle and panics on error.
func (o *Tag) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Tag appropriately.
func (o *Tag) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Tag.Int = o.ID
			rel.Tag.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tag"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Tag.Int = o.ID
			rel.Tag.Valid = true
		}
	}

	if o.R == nil {
		o.R = &tagR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Tag: o,
			}
		} else {
			rel.R.Tag = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Tag's Notifications accordingly.
// Uses the global database handle.
func (o *Tag) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Tag's Notifications accordingly.
// Panics on error.
func (o *Tag) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Tag's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Tag) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// tag replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Tag's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Tag's Notifications accordingly.
func (o *Tag) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"tag\" = null where \"tag\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Tag.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Tag = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Uses the global database handle.
func (o *Tag) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Panics on error.
func (o *Tag) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
// Uses the global database handle and panics on error.
func (o *Tag) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Tag.
func (o *Tag) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Tag.Valid = false
		if rel.R != nil {
			rel.R.Tag = nil
		}
		if err = rel.Update(exec, "tag"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddTagUsesG adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Tag appropriately.
// Uses the global database handle.
func (o *Tag) AddTagUsesG(insert bool, related ...*TagUse) error {
	return o.AddTagUses(boil.GetDB(), insert, related...)
}

// AddTagUsesP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Tag appropriately.
// Panics on error.
func (o *Tag) AddTagUsesP(exec boil.Executor, insert bool, related ...*TagUse) {
	if err := o.AddTagUses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagUsesGP adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Tag appropriately.
// Uses the global database handle and panics on error.
func (o *Tag) AddTagUsesGP(insert bool, related ...*TagUse) {
	if err := o.AddTagUses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagUses adds the given related objects to the existing relationships
// of the tag, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Tag appropriately.
func (o *Tag) AddTagUses(exec boil.Executor, insert bool, related ...*TagUse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Tag = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tag_use\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"tag"}),
				strmangle.WhereClause("\"", "\"", 2, tagUsePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Segment, rel.Tag, rel.Who}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Tag = o.ID
		}
	}

	if o.R == nil {
		o.R = &tagR{
			TagUses: related,
		}
	} else {
		o.R.TagUses = append(o.R.TagUses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagUseR{
				Tag: o,
			}
		} else {
			rel.R.Tag = o
		}
	}
	return nil
}

// TagsG retrieves all records.
func TagsG(mods ...qm.QueryMod) tagQuery {
	return Tags(boil.GetDB(), mods...)
}

// Tags retrieves all the records using an executor.
func Tags(exec boil.Executor, mods ...qm.QueryMod) tagQuery {
	mods = append(mods, qm.From("\"tag\""))
	return tagQuery{NewQuery(exec, mods...)}
}

// FindTagG retrieves a single record by ID.
func FindTagG(id int, selectCols ...string) (*Tag, error) {
	return FindTag(boil.GetDB(), id, selectCols...)
}

// FindTagGP retrieves a single record by ID, and panics on error.
func FindTagGP(id int, selectCols ...string) *Tag {
	retobj, err := FindTag(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTag retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTag(exec boil.Executor, id int, selectCols ...string) (*Tag, error) {
	tagObj := &Tag{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"tag\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(tagObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from tag")
	}

	return tagObj, nil
}

// FindTagP retrieves a single record by ID with an executor, and panics on error.
func FindTagP(exec boil.Executor, id int, selectCols ...string) *Tag {
	retobj, err := FindTag(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Tag) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Tag) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Tag) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Tag) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no tag provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	tagInsertCacheMut.RLock()
	cache, cached := tagInsertCache[key]
	tagInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			tagColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(tagType, tagMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"tag\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"tag\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into tag")
	}

	if !cached {
		tagInsertCacheMut.Lock()
		tagInsertCache[key] = cache
		tagInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Tag record. See Update for
// whitelist behavior description.
func (o *Tag) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Tag record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Tag) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Tag, and panics on error.
// See Update for whitelist behavior description.
func (o *Tag) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Tag.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Tag) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	tagUpdateCacheMut.RLock()
	cache, cached := tagUpdateCache[key]
	tagUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(tagColumns, tagPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update tag, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"tag\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, tagPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, append(wl, tagPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update tag row")
	}

	if !cached {
		tagUpdateCacheMut.Lock()
		tagUpdateCache[key] = cache
		tagUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q tagQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q tagQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for tag")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TagSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TagSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TagSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TagSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"tag\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(tagPrimaryKeyColumns), len(colNames)+1, len(tagPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in tag slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Tag) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Tag) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Tag) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Tag) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no tag provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(tagColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	tagUpsertCacheMut.RLock()
	cache, cached := tagUpsertCache[key]
	tagUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			tagColumns,
			tagColumnsWithDefault,
			tagColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			tagColumns,
			tagPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert tag, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(tagPrimaryKeyColumns))
			copy(conflict, tagPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"tag\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(tagType, tagMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(tagType, tagMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert tag")
	}

	if !cached {
		tagUpsertCacheMut.Lock()
		tagUpsertCache[key] = cache
		tagUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Tag record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tag) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Tag record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Tag) DeleteG() error {
	if o == nil {
		return errors.New("public: no Tag provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Tag record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Tag) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Tag record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Tag) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Tag provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), tagPrimaryKeyMapping)
	query := "DELETE FROM \"tag\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from tag")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q tagQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q tagQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no tagQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from tag")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TagSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TagSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Tag slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TagSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TagSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Tag slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(tagBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"tag\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, tagPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(tagPrimaryKeyColumns), 1, len(tagPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from tag slice")
	}

	if len(tagAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Tag) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Tag) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Tag) ReloadG() error {
	if o == nil {
		return errors.New("public: no Tag provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Tag) Reload(exec boil.Executor) error {
	ret, err := FindTag(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TagSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TagSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty TagSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TagSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	tags := TagSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), tagPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"tag\".* FROM \"tag\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, tagPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(tagPrimaryKeyColumns), 1, len(tagPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&tags)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in TagSlice")
	}

	*o = tags

	return nil
}

// TagExists checks if the Tag row exists.
func TagExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"tag\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if tag exists")
	}

	return exists, nil
}

// TagExistsG checks if the Tag row exists.
func TagExistsG(id int) (bool, error) {
	return TagExists(boil.GetDB(), id)
}

// TagExistsGP checks if the Tag row exists. Panics on error.
func TagExistsGP(id int) bool {
	e, err := TagExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TagExistsP checks if the Tag row exists. Panics on error.
func TagExistsP(exec boil.Executor, id int) bool {
	e, err := TagExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
