// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testComments(t *testing.T) {
	t.Parallel()

	query := Comments(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCommentsLive(t *testing.T) {
	all, err := Comments(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Comments err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM comment) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM comment) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("CommentsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testCommentsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = comment.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Comments(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CommentSlice{comment}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCommentsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := CommentExists(tx, comment.ID)
	if err != nil {
		t.Errorf("Unable to check if Comment exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CommentExistsG to return true, but got false.")
	}
}

func testCommentsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	commentFound, err := FindComment(tx, comment.ID)
	if err != nil {
		t.Error(err)
	}

	if commentFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCommentsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Comments(tx).Bind(comment); err != nil {
		t.Error(err)
	}
}

func testCommentsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Comments(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCommentsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	commentOne := &Comment{}
	commentTwo := &Comment{}
	if err = randomize.Struct(seed, commentOne, commentDBTypes, false, commentColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err = randomize.Struct(seed, commentTwo, commentDBTypes, false, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	commentOne.Segment = custom_types.SegmentRandom()
	commentTwo.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = commentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Comments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCommentsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	commentOne := &Comment{}
	commentTwo := &Comment{}
	if err = randomize.Struct(seed, commentOne, commentDBTypes, false, commentColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err = randomize.Struct(seed, commentTwo, commentDBTypes, false, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	commentOne.Segment = custom_types.SegmentRandom()
	commentTwo.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = commentOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = commentTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func commentBeforeInsertHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentAfterInsertHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentAfterSelectHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentBeforeUpdateHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentAfterUpdateHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentBeforeDeleteHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentAfterDeleteHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentBeforeUpsertHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func commentAfterUpsertHook(e boil.Executor, o *Comment) error {
	*o = Comment{}
	return nil
}

func testCommentsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	empty := &Comment{}

	AddCommentHook(boil.BeforeInsertHook, commentBeforeInsertHook)
	if err = comment.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", comment)
	}
	commentBeforeInsertHooks = []CommentHook{}

	AddCommentHook(boil.AfterInsertHook, commentAfterInsertHook)
	if err = comment.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", comment)
	}
	commentAfterInsertHooks = []CommentHook{}

	AddCommentHook(boil.AfterSelectHook, commentAfterSelectHook)
	if err = comment.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", comment)
	}
	commentAfterSelectHooks = []CommentHook{}

	AddCommentHook(boil.BeforeUpdateHook, commentBeforeUpdateHook)
	if err = comment.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", comment)
	}
	commentBeforeUpdateHooks = []CommentHook{}

	AddCommentHook(boil.AfterUpdateHook, commentAfterUpdateHook)
	if err = comment.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", comment)
	}
	commentAfterUpdateHooks = []CommentHook{}

	AddCommentHook(boil.BeforeDeleteHook, commentBeforeDeleteHook)
	if err = comment.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", comment)
	}
	commentBeforeDeleteHooks = []CommentHook{}

	AddCommentHook(boil.AfterDeleteHook, commentAfterDeleteHook)
	if err = comment.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", comment)
	}
	commentAfterDeleteHooks = []CommentHook{}

	AddCommentHook(boil.BeforeUpsertHook, commentBeforeUpsertHook)
	if err = comment.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", comment)
	}
	commentBeforeUpsertHooks = []CommentHook{}

	AddCommentHook(boil.AfterUpsertHook, commentAfterUpsertHook)
	if err = comment.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(comment, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", comment)
	}
	commentAfterUpsertHooks = []CommentHook{}
}
func testCommentsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommentsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx, commentColumns...); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCommentToManyParentComments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Comment

	foreignBlacklist := commentColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := commentColumnsWithDefault
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	b.Parent.Valid = true
	c.Parent.Valid = true
	b.Parent.Int = a.ID
	c.Parent.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	comment, err := a.ParentCommentsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range comment {
		if v.Parent.Int == b.Parent.Int {
			bFound = true
		}
		if v.Parent.Int == c.Parent.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CommentSlice{&a}
	if err = a.L.LoadParentComments(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ParentComments = nil
	if err = a.L.LoadParentComments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ParentComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", comment)
	}
}

func testCommentToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Notification

	foreignBlacklist := notificationColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	b.Delivered = custom_types.NoticeDeliveryRandom()
	c.Delivered = custom_types.NoticeDeliveryRandom()
	b.Permission = custom_types.NullPermissionRandom()
	c.Permission = custom_types.NullPermissionRandom()
	b.Segment = custom_types.NullSegmentRandom()
	c.Segment = custom_types.NullSegmentRandom()
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()

	localBlacklist := commentColumnsWithDefault
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	b.Comment.Valid = true
	c.Comment.Valid = true
	b.Comment.Int = a.ID
	c.Comment.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Comment.Int == b.Comment.Int {
			bFound = true
		}
		if v.Comment.Int == c.Comment.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CommentSlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testCommentToManyAddOpParentComments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, commentColumnsWithCustom...)

	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Comment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddParentComments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Parent.Int {
			t.Error("foreign key was wrong value", a.ID, first.Parent.Int)
		}
		if a.ID != second.Parent.Int {
			t.Error("foreign key was wrong value", a.ID, second.Parent.Int)
		}

		if first.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Parent != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ParentComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ParentComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ParentCommentsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCommentToManySetOpParentComments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, commentColumnsWithCustom...)

	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetParentComments(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentCommentsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetParentComments(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentCommentsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Parent.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Parent.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Parent.Int {
		t.Error("foreign key was wrong value", a.ID, d.Parent.Int)
	}
	if a.ID != e.Parent.Int {
		t.Error("foreign key was wrong value", a.ID, e.Parent.Int)
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Parent != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ParentComments[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ParentComments[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCommentToManyRemoveOpParentComments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, commentColumnsWithCustom...)

	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddParentComments(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ParentCommentsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveParentComments(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ParentCommentsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Parent.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Parent.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Parent != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Parent != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ParentComments) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ParentComments[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ParentComments[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCommentToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Comment.Int {
			t.Error("foreign key was wrong value", a.ID, first.Comment.Int)
		}
		if a.ID != second.Comment.Int {
			t.Error("foreign key was wrong value", a.ID, second.Comment.Int)
		}

		if first.R.Comment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Comment != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCommentToManySetOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Comment.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Comment.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Comment.Int {
		t.Error("foreign key was wrong value", a.ID, d.Comment.Int)
	}
	if a.ID != e.Comment.Int {
		t.Error("foreign key was wrong value", a.ID, e.Comment.Int)
	}

	if b.R.Comment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Comment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Comment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Comment != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Notifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Notifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCommentToManyRemoveOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Comment
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, commentDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Segment = custom_types.SegmentRandom()

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Comment.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Comment.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Comment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Comment != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Comment != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Comment != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Notifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Notifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Notifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCommentToOneContainerUsingContainer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Container
	var local Comment

	foreignBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, containerDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := commentColumnsWithDefault
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, commentDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	local.Segment = custom_types.SegmentRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Container = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContainerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommentSlice{&local}
	if err = local.L.LoadContainer(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Container = nil
	if err = local.L.LoadContainer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommentToOneCommentUsingParent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Comment
	var local Comment

	foreignBlacklist := commentColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &foreign, commentDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	foreign.Segment = custom_types.SegmentRandom()

	localBlacklist := commentColumnsWithDefault
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, commentDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	local.Segment = custom_types.SegmentRandom()

	local.Parent.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Parent.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommentSlice{&local}
	if err = local.L.LoadParent(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommentToOneAccountUsingWho(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Account
	var local Comment

	foreignBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := commentColumnsWithDefault
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, commentDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	local.Segment = custom_types.SegmentRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Who = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.WhoByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := CommentSlice{&local}
	if err = local.L.LoadWho(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Who == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Who = nil
	if err = local.L.LoadWho(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Who == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testCommentToOneSetOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Container

	foreignBlacklist := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Container{&b, &c} {
		err = a.SetContainer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Container != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Comments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Container != x.ID {
			t.Error("foreign key was wrong value", a.Container)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Container))
		reflect.Indirect(reflect.ValueOf(&a.Container)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Container != x.ID {
			t.Error("foreign key was wrong value", a.Container, x.ID)
		}
	}
}
func testCommentToOneSetOpCommentUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Comment

	foreignBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Comment{&b, &c} {
		err = a.SetParent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Parent.Int != x.ID {
			t.Error("foreign key was wrong value", a.Parent.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Parent.Int))
		reflect.Indirect(reflect.ValueOf(&a.Parent.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Parent.Int != x.ID {
			t.Error("foreign key was wrong value", a.Parent.Int, x.ID)
		}
	}
}

func testCommentToOneRemoveOpCommentUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Comment

	foreignBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParent(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParent(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ParentByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Parent != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Parent.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.ParentComments) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCommentToOneSetOpAccountUsingWho(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Comment
	var b, c Account

	foreignBlacklist := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, commentDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	a.Segment = custom_types.SegmentRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetWho(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Who != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.WhoComments[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Who != x.ID {
			t.Error("foreign key was wrong value", a.Who)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Who))
		reflect.Indirect(reflect.ValueOf(&a.Who)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Who != x.ID {
			t.Error("foreign key was wrong value", a.Who, x.ID)
		}
	}
}

func testCommentsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = comment.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testCommentsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := CommentSlice{comment}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testCommentsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Comments(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	commentDBTypes = map[string]string{`Container`: `integer`, `ID`: `integer`, `Parent`: `integer`, `Segment`: `USER-DEFINED`, `Text`: `text`, `Time`: `timestamp with time zone`, `Who`: `integer`}
	_              = bytes.MinRead
)

func testCommentsUpdate(t *testing.T) {
	t.Parallel()

	if len(commentColumns) == len(commentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := commentColumnsWithDefault
	blacklist = append(blacklist, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, comment, commentDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	if err = comment.Update(tx); err != nil {
		t.Error(err)
	}
}

func testCommentsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(commentColumns) == len(commentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := commentPrimaryKeyColumns
	blacklist = append(blacklist, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, comment, commentDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(commentColumns, commentPrimaryKeyColumns) {
		fields = commentColumns
	} else {
		fields = strmangle.SetComplement(
			commentColumns,
			commentPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(comment))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := CommentSlice{comment}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testCommentsUpsert(t *testing.T) {
	t.Parallel()

	if len(commentColumns) == len(commentPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	comment := &Comment{}
	if err = randomize.Struct(seed, comment, commentDBTypes, true, commentColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = comment.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Comment: %s", err)
	}

	count, err := Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := commentPrimaryKeyColumns

	blacklist = append(blacklist, commentColumnsWithCustom...)

	if err = randomize.Struct(seed, comment, commentDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}

	comment.Segment = custom_types.SegmentRandom()

	if err = comment.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Comment: %s", err)
	}

	count, err = Comments(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
