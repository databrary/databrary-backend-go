// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testNotifications(t *testing.T) {
	t.Parallel()

	query := Notifications(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNotificationsLive(t *testing.T) {
	all, err := Notifications(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Notifications err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM notification) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM notification) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("NotificationsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testNotificationsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNotificationsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NotificationExists(tx, notification.ID)
	if err != nil {
		t.Errorf("Unable to check if Notification exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NotificationExistsG to return true, but got false.")
	}
}

func testNotificationsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	notificationFound, err := FindNotification(tx, notification.ID)
	if err != nil {
		t.Error(err)
	}

	if notificationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNotificationsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notifications(tx).Bind(notification); err != nil {
		t.Error(err)
	}
}

func testNotificationsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Notifications(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNotificationsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notificationOne := &Notification{}
	notificationTwo := &Notification{}
	if err = randomize.Struct(seed, notificationOne, notificationDBTypes, false, notificationColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationTwo, notificationDBTypes, false, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notificationOne.Delivered = custom_types.NoticeDeliveryRandom()
	notificationTwo.Delivered = custom_types.NoticeDeliveryRandom()
	notificationOne.Permission = custom_types.NullPermissionRandom()
	notificationTwo.Permission = custom_types.NullPermissionRandom()
	notificationOne.Segment = custom_types.NullSegmentRandom()
	notificationTwo.Segment = custom_types.NullSegmentRandom()
	notificationOne.Release = custom_types.NullReleaseRandom()
	notificationTwo.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNotificationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notificationOne := &Notification{}
	notificationTwo := &Notification{}
	if err = randomize.Struct(seed, notificationOne, notificationDBTypes, false, notificationColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err = randomize.Struct(seed, notificationTwo, notificationDBTypes, false, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notificationOne.Delivered = custom_types.NoticeDeliveryRandom()
	notificationTwo.Delivered = custom_types.NoticeDeliveryRandom()
	notificationOne.Permission = custom_types.NullPermissionRandom()
	notificationTwo.Permission = custom_types.NullPermissionRandom()
	notificationOne.Segment = custom_types.NullSegmentRandom()
	notificationTwo.Segment = custom_types.NullSegmentRandom()
	notificationOne.Release = custom_types.NullReleaseRandom()
	notificationTwo.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notificationOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = notificationTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func notificationBeforeInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterInsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterSelectHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpdateHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterDeleteHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationBeforeUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func notificationAfterUpsertHook(e boil.Executor, o *Notification) error {
	*o = Notification{}
	return nil
}

func testNotificationsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	empty := &Notification{}

	AddNotificationHook(boil.BeforeInsertHook, notificationBeforeInsertHook)
	if err = notification.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", notification)
	}
	notificationBeforeInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterInsertHook, notificationAfterInsertHook)
	if err = notification.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", notification)
	}
	notificationAfterInsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterSelectHook, notificationAfterSelectHook)
	if err = notification.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", notification)
	}
	notificationAfterSelectHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpdateHook, notificationBeforeUpdateHook)
	if err = notification.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", notification)
	}
	notificationBeforeUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpdateHook, notificationAfterUpdateHook)
	if err = notification.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", notification)
	}
	notificationAfterUpdateHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeDeleteHook, notificationBeforeDeleteHook)
	if err = notification.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", notification)
	}
	notificationBeforeDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterDeleteHook, notificationAfterDeleteHook)
	if err = notification.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", notification)
	}
	notificationAfterDeleteHooks = []NotificationHook{}

	AddNotificationHook(boil.BeforeUpsertHook, notificationBeforeUpsertHook)
	if err = notification.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", notification)
	}
	notificationBeforeUpsertHooks = []NotificationHook{}

	AddNotificationHook(boil.AfterUpsertHook, notificationAfterUpsertHook)
	if err = notification.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notification, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", notification)
	}
	notificationAfterUpsertHooks = []NotificationHook{}
}
func testNotificationsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx, notificationColumns...); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNotificationToOnePartyUsingAgent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Party
	var local Notification

	foreignBlacklist := partyColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Agent = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AgentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadAgent(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Agent = nil
	if err = local.L.LoadAgent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Agent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneAssetUsingAsset(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Asset
	var local Notification

	foreignBlacklist := assetColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, assetColumnsWithCustom...)

	if err := randomize.Struct(seed, &foreign, assetDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	foreign.Release = custom_types.NullReleaseRandom()
	foreign.Duration = custom_types.NullIntervalRandom()

	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Asset.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Asset.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AssetByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadAsset(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Asset == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Asset = nil
	if err = local.L.LoadAsset(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Asset == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneCommentUsingComment(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Comment
	var local Notification

	foreignBlacklist := commentColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &foreign, commentDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	foreign.Segment = custom_types.SegmentRandom()

	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Comment.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Comment.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.CommentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadComment(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Comment = nil
	if err = local.L.LoadComment(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Comment == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneContainerUsingContainer(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Container
	var local Notification

	foreignBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, containerDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Container.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Container.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ContainerByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadContainer(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Container = nil
	if err = local.L.LoadContainer(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Container == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneNoticeUsingNotice(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Notice
	var local Notification

	foreignBlacklist := noticeColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, noticeColumnsWithCustom...)

	if err := randomize.Struct(seed, &foreign, noticeDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	foreign.Delivery = custom_types.NoticeDeliveryRandom()

	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Notice = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.NoticeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadNotice(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Notice = nil
	if err = local.L.LoadNotice(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Notice == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOnePartyUsingParty(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Party
	var local Notification

	foreignBlacklist := partyColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Party.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Party.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.PartyByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadParty(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Party = nil
	if err = local.L.LoadParty(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Party == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneTagUsingTag(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Tag
	var local Notification

	foreignBlacklist := tagColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, tagDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Tag.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Tag.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.TagByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadTag(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Tag = nil
	if err = local.L.LoadTag(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Tag == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneAccountUsingTarget(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Account
	var local Notification

	foreignBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Target = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.TargetByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadTarget(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Target = nil
	if err = local.L.LoadTarget(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Target == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Volume
	var local Notification

	foreignBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := notificationColumnsWithDefault
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, notificationDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	local.Delivered = custom_types.NoticeDeliveryRandom()
	local.Permission = custom_types.NullPermissionRandom()
	local.Segment = custom_types.NullSegmentRandom()
	local.Release = custom_types.NullReleaseRandom()

	local.Volume.Valid = true

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume.Int = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := NotificationSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testNotificationToOneSetOpPartyUsingAgent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetAgent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Agent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AgentNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Agent != x.ID {
			t.Error("foreign key was wrong value", a.Agent)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Agent))
		reflect.Indirect(reflect.ValueOf(&a.Agent)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Agent != x.ID {
			t.Error("foreign key was wrong value", a.Agent, x.ID)
		}
	}
}
func testNotificationToOneSetOpAssetUsingAsset(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Asset

	foreignBlacklist := strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, assetColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()
	b.Duration = custom_types.NullIntervalRandom()
	c.Duration = custom_types.NullIntervalRandom()

	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Asset{&b, &c} {
		err = a.SetAsset(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Asset != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Asset.Int != x.ID {
			t.Error("foreign key was wrong value", a.Asset.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Asset.Int))
		reflect.Indirect(reflect.ValueOf(&a.Asset.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Asset.Int != x.ID {
			t.Error("foreign key was wrong value", a.Asset.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpAssetUsingAsset(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Asset

	foreignBlacklist := strmangle.SetComplement(assetPrimaryKeyColumns, assetColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, assetColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, assetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Asset struct: %s", err)
	}
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()
	b.Duration = custom_types.NullIntervalRandom()
	c.Duration = custom_types.NullIntervalRandom()

	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetAsset(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveAsset(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.AssetByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Asset != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Asset.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpCommentUsingComment(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Comment

	foreignBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Comment{&b, &c} {
		err = a.SetComment(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Comment != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Comment.Int != x.ID {
			t.Error("foreign key was wrong value", a.Comment.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Comment.Int))
		reflect.Indirect(reflect.ValueOf(&a.Comment.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Comment.Int != x.ID {
			t.Error("foreign key was wrong value", a.Comment.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpCommentUsingComment(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Comment

	foreignBlacklist := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetComment(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveComment(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CommentByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Comment != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Comment.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Container

	foreignBlacklist := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Container{&b, &c} {
		err = a.SetContainer(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Container != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Container.Int != x.ID {
			t.Error("foreign key was wrong value", a.Container.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Container.Int))
		reflect.Indirect(reflect.ValueOf(&a.Container.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Container.Int != x.ID {
			t.Error("foreign key was wrong value", a.Container.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpContainerUsingContainer(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Container

	foreignBlacklist := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, containerDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetContainer(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveContainer(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.ContainerByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Container != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Container.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpNoticeUsingNotice(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Notice

	foreignBlacklist := strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, noticeColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, noticeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, noticeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	b.Delivery = custom_types.NoticeDeliveryRandom()
	c.Delivery = custom_types.NoticeDeliveryRandom()

	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Notice{&b, &c} {
		err = a.SetNotice(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Notice != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Notice != x.ID {
			t.Error("foreign key was wrong value", a.Notice)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Notice))
		reflect.Indirect(reflect.ValueOf(&a.Notice)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Notice != x.ID {
			t.Error("foreign key was wrong value", a.Notice, x.ID)
		}
	}
}
func testNotificationToOneSetOpPartyUsingParty(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetParty(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Party != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Party.Int != x.ID {
			t.Error("foreign key was wrong value", a.Party.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Party.Int))
		reflect.Indirect(reflect.ValueOf(&a.Party.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Party.Int != x.ID {
			t.Error("foreign key was wrong value", a.Party.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpPartyUsingParty(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetParty(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveParty(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.PartyByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Party != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Party.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Tag

	foreignBlacklist := strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, tagDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, tagDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Tag{&b, &c} {
		err = a.SetTag(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Tag != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Tag.Int != x.ID {
			t.Error("foreign key was wrong value", a.Tag.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Tag.Int))
		reflect.Indirect(reflect.ValueOf(&a.Tag.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Tag.Int != x.ID {
			t.Error("foreign key was wrong value", a.Tag.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpTagUsingTag(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Tag

	foreignBlacklist := strmangle.SetComplement(tagPrimaryKeyColumns, tagColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, tagDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, tagDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Tag struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTag(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTag(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.TagByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Tag != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Tag.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationToOneSetOpAccountUsingTarget(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Account

	foreignBlacklist := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetTarget(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Target != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TargetNotifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Target != x.ID {
			t.Error("foreign key was wrong value", a.Target)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Target))
		reflect.Indirect(reflect.ValueOf(&a.Target)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Target != x.ID {
			t.Error("foreign key was wrong value", a.Target, x.ID)
		}
	}
}
func testNotificationToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Volume

	foreignBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Notifications[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume.Int != x.ID {
			t.Error("foreign key was wrong value", a.Volume.Int)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Volume.Int))
		reflect.Indirect(reflect.ValueOf(&a.Volume.Int)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Volume.Int != x.ID {
			t.Error("foreign key was wrong value", a.Volume.Int, x.ID)
		}
	}
}

func testNotificationToOneRemoveOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notification
	var b, c Volume

	foreignBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, notificationDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	a.Delivered = custom_types.NoticeDeliveryRandom()
	a.Permission = custom_types.NullPermissionRandom()
	a.Segment = custom_types.NullSegmentRandom()
	a.Release = custom_types.NullReleaseRandom()

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	if err = a.SetVolume(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveVolume(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.VolumeByFk(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Volume != nil {
		t.Error("R struct entry should be nil")
	}

	if a.Volume.Valid {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.Notifications) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testNotificationsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notification.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NotificationSlice{notification}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notifications(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	notificationDBTypes = map[string]string{`Agent`: `integer`, `Asset`: `integer`, `Comment`: `integer`, `Container`: `integer`, `Delivered`: `enum.notice_delivery('none','site','weekly','daily','async')`, `ID`: `integer`, `Notice`: `smallint`, `Party`: `integer`, `Permission`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`, `Release`: `enum.release('PRIVATE','SHARED','EXCERPTS','PUBLIC')`, `Segment`: `USER-DEFINED`, `Tag`: `integer`, `Target`: `integer`, `Time`: `timestamp with time zone`, `Volume`: `integer`}
	_                   = bytes.MinRead
)

func testNotificationsUpdate(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := notificationColumnsWithDefault
	blacklist = append(blacklist, notificationColumnsWithCustom...)

	if err = randomize.Struct(seed, notification, notificationDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	if err = notification.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNotificationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := notificationPrimaryKeyColumns
	blacklist = append(blacklist, notificationColumnsWithCustom...)

	if err = randomize.Struct(seed, notification, notificationDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(notificationColumns, notificationPrimaryKeyColumns) {
		fields = notificationColumns
	} else {
		fields = strmangle.SetComplement(
			notificationColumns,
			notificationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(notification))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NotificationSlice{notification}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testNotificationsUpsert(t *testing.T) {
	t.Parallel()

	if len(notificationColumns) == len(notificationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notification := &Notification{}
	if err = randomize.Struct(seed, notification, notificationDBTypes, true, notificationColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notification.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err := Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := notificationPrimaryKeyColumns

	blacklist = append(blacklist, notificationColumnsWithCustom...)

	if err = randomize.Struct(seed, notification, notificationDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}

	notification.Delivered = custom_types.NoticeDeliveryRandom()
	notification.Permission = custom_types.NullPermissionRandom()
	notification.Segment = custom_types.NullSegmentRandom()
	notification.Release = custom_types.NullReleaseRandom()

	if err = notification.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notification: %s", err)
	}

	count, err = Notifications(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
