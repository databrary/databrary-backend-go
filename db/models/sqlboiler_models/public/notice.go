// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Notice is an object representing the database table.
type Notice struct {
	ID       int16                       `db:"id" json:"notice_id"`
	Name     string                      `db:"name" json:"notice_name"`
	Delivery custom_types.NoticeDelivery `db:"delivery" json:"notice_delivery"`

	R *noticeR `db:"-" json:"-"`
	L noticeL  `db:"-" json:"-"`
}

// noticeR is where relationships are stored.
type noticeR struct {
	Notifications NotificationSlice
	Notifies      NotifySlice
}

// noticeL is where Load methods for each relationship are stored.
type noticeL struct{}

var (
	noticeColumns               = []string{"id", "name", "delivery"}
	noticeColumnsWithoutDefault = []string{"name", "delivery"}
	noticeColumnsWithDefault    = []string{"id"}
	noticeColumnsWithCustom     = []string{"delivery"}

	noticePrimaryKeyColumns = []string{"id"}
)

type (
	// NoticeSlice is an alias for a slice of pointers to Notice.
	// This should generally be used opposed to []Notice.
	NoticeSlice []*Notice
	// NoticeHook is the signature for custom Notice hook methods
	NoticeHook func(boil.Executor, *Notice) error

	noticeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	noticeType    = reflect.TypeOf(&Notice{})
	noticeMapping = queries.MakeStructMapping(noticeType)

	noticePrimaryKeyMapping, _ = queries.BindMapping(noticeType, noticeMapping, noticePrimaryKeyColumns)

	noticeInsertCacheMut sync.RWMutex
	noticeInsertCache    = make(map[string]insertCache)
	noticeUpdateCacheMut sync.RWMutex
	noticeUpdateCache    = make(map[string]updateCache)
	noticeUpsertCacheMut sync.RWMutex
	noticeUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var noticeBeforeInsertHooks []NoticeHook
var noticeBeforeUpdateHooks []NoticeHook
var noticeBeforeDeleteHooks []NoticeHook
var noticeBeforeUpsertHooks []NoticeHook

var noticeAfterInsertHooks []NoticeHook
var noticeAfterSelectHooks []NoticeHook
var noticeAfterUpdateHooks []NoticeHook
var noticeAfterDeleteHooks []NoticeHook
var noticeAfterUpsertHooks []NoticeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Notice) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Notice) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Notice) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Notice) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Notice) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Notice) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Notice) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Notice) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Notice) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range noticeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNoticeHook registers your hook function for all future operations.
func AddNoticeHook(hookPoint boil.HookPoint, noticeHook NoticeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		noticeBeforeInsertHooks = append(noticeBeforeInsertHooks, noticeHook)
	case boil.BeforeUpdateHook:
		noticeBeforeUpdateHooks = append(noticeBeforeUpdateHooks, noticeHook)
	case boil.BeforeDeleteHook:
		noticeBeforeDeleteHooks = append(noticeBeforeDeleteHooks, noticeHook)
	case boil.BeforeUpsertHook:
		noticeBeforeUpsertHooks = append(noticeBeforeUpsertHooks, noticeHook)
	case boil.AfterInsertHook:
		noticeAfterInsertHooks = append(noticeAfterInsertHooks, noticeHook)
	case boil.AfterSelectHook:
		noticeAfterSelectHooks = append(noticeAfterSelectHooks, noticeHook)
	case boil.AfterUpdateHook:
		noticeAfterUpdateHooks = append(noticeAfterUpdateHooks, noticeHook)
	case boil.AfterDeleteHook:
		noticeAfterDeleteHooks = append(noticeAfterDeleteHooks, noticeHook)
	case boil.AfterUpsertHook:
		noticeAfterUpsertHooks = append(noticeAfterUpsertHooks, noticeHook)
	}
}

// OneP returns a single notice record from the query, and panics on error.
func (q noticeQuery) OneP() *Notice {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single notice record from the query.
func (q noticeQuery) One() (*Notice, error) {
	o := &Notice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for notice")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Notice records from the query, and panics on error.
func (q noticeQuery) AllP() NoticeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Notice records from the query.
func (q noticeQuery) All() (NoticeSlice, error) {
	var o NoticeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Notice slice")
	}

	if len(noticeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Notice records in the query, and panics on error.
func (q noticeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Notice records in the query.
func (q noticeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count notice rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q noticeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q noticeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if notice exists")
	}

	return count > 0, nil
}

// NotificationsG retrieves all the notification's notification.
func (o *Notice) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Notice) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"notice\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// NotifiesG retrieves all the notify's notify.
func (o *Notice) NotifiesG(mods ...qm.QueryMod) notifyQuery {
	return o.NotifiesByFk(boil.GetDB(), mods...)
}

// Notifies retrieves all the notify's notify with an executor.
func (o *Notice) NotifiesByFk(exec boil.Executor, mods ...qm.QueryMod) notifyQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"notice\"=?", o.ID),
	)

	query := Notifies(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notify\" as \"a\"")
	return query
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (noticeL) LoadNotifications(e boil.Executor, singular bool, maybeNotice interface{}) error {
	var slice []*Notice
	var object *Notice

	count := 1
	if singular {
		object = maybeNotice.(*Notice)
	} else {
		slice = *maybeNotice.(*NoticeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &noticeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"notice\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Notice {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifies allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (noticeL) LoadNotifies(e boil.Executor, singular bool, maybeNotice interface{}) error {
	var slice []*Notice
	var object *Notice

	count := 1
	if singular {
		object = maybeNotice.(*Notice)
	} else {
		slice = *maybeNotice.(*NoticeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &noticeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &noticeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notify\" where \"notice\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notify")
	}
	defer results.Close()

	var resultSlice []*Notify
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notify")
	}

	if len(notifyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifies = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Notice {
				local.R.Notifies = append(local.R.Notifies, foreign)
				break
			}
		}
	}

	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Notice appropriately.
// Uses the global database handle.
func (o *Notice) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Notice appropriately.
// Panics on error.
func (o *Notice) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Notice appropriately.
// Uses the global database handle and panics on error.
func (o *Notice) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Notice appropriately.
func (o *Notice) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Notice = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"notice"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Notice = o.ID
		}
	}

	if o.R == nil {
		o.R = &noticeR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Notice: o,
			}
		} else {
			rel.R.Notice = o
		}
	}
	return nil
}

// AddNotifiesG adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifies.
// Sets related.R.Notice appropriately.
// Uses the global database handle.
func (o *Notice) AddNotifiesG(insert bool, related ...*Notify) error {
	return o.AddNotifies(boil.GetDB(), insert, related...)
}

// AddNotifiesP adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifies.
// Sets related.R.Notice appropriately.
// Panics on error.
func (o *Notice) AddNotifiesP(exec boil.Executor, insert bool, related ...*Notify) {
	if err := o.AddNotifies(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifiesGP adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifies.
// Sets related.R.Notice appropriately.
// Uses the global database handle and panics on error.
func (o *Notice) AddNotifiesGP(insert bool, related ...*Notify) {
	if err := o.AddNotifies(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifies adds the given related objects to the existing relationships
// of the notice, optionally inserting them as new records.
// Appends related to o.R.Notifies.
// Sets related.R.Notice appropriately.
func (o *Notice) AddNotifies(exec boil.Executor, insert bool, related ...*Notify) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Notice = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notify\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"notice"}),
				strmangle.WhereClause("\"", "\"", 2, notifyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Target, rel.Notice}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Notice = o.ID
		}
	}

	if o.R == nil {
		o.R = &noticeR{
			Notifies: related,
		}
	} else {
		o.R.Notifies = append(o.R.Notifies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notifyR{
				Notice: o,
			}
		} else {
			rel.R.Notice = o
		}
	}
	return nil
}

// NoticesG retrieves all records.
func NoticesG(mods ...qm.QueryMod) noticeQuery {
	return Notices(boil.GetDB(), mods...)
}

// Notices retrieves all the records using an executor.
func Notices(exec boil.Executor, mods ...qm.QueryMod) noticeQuery {
	mods = append(mods, qm.From("\"notice\""))
	return noticeQuery{NewQuery(exec, mods...)}
}

// FindNoticeG retrieves a single record by ID.
func FindNoticeG(id int16, selectCols ...string) (*Notice, error) {
	return FindNotice(boil.GetDB(), id, selectCols...)
}

// FindNoticeGP retrieves a single record by ID, and panics on error.
func FindNoticeGP(id int16, selectCols ...string) *Notice {
	retobj, err := FindNotice(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNotice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotice(exec boil.Executor, id int16, selectCols ...string) (*Notice, error) {
	noticeObj := &Notice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notice\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(noticeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from notice")
	}

	return noticeObj, nil
}

// FindNoticeP retrieves a single record by ID with an executor, and panics on error.
func FindNoticeP(exec boil.Executor, id int16, selectCols ...string) *Notice {
	retobj, err := FindNotice(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Notice) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Notice) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Notice) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Notice) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no notice provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	noticeInsertCacheMut.RLock()
	cache, cached := noticeInsertCache[key]
	noticeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			noticeColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notice\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notice\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into notice")
	}

	if !cached {
		noticeInsertCacheMut.Lock()
		noticeInsertCache[key] = cache
		noticeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Notice record. See Update for
// whitelist behavior description.
func (o *Notice) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Notice record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Notice) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Notice, and panics on error.
// See Update for whitelist behavior description.
func (o *Notice) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Notice.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Notice) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	noticeUpdateCacheMut.RLock()
	cache, cached := noticeUpdateCache[key]
	noticeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(noticeColumns, noticePrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update notice, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notice\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, noticePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, append(wl, noticePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update notice row")
	}

	if !cached {
		noticeUpdateCacheMut.Lock()
		noticeUpdateCache[key] = cache
		noticeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q noticeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q noticeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for notice")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NoticeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o NoticeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NoticeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NoticeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"notice\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(noticePrimaryKeyColumns), len(colNames)+1, len(noticePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in notice slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Notice) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Notice) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Notice) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Notice) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no notice provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(noticeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	noticeUpsertCacheMut.RLock()
	cache, cached := noticeUpsertCache[key]
	noticeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			noticeColumns,
			noticeColumnsWithDefault,
			noticeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			noticeColumns,
			noticePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert notice, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(noticePrimaryKeyColumns))
			copy(conflict, noticePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"notice\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(noticeType, noticeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(noticeType, noticeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert notice")
	}

	if !cached {
		noticeUpsertCacheMut.Lock()
		noticeUpsertCache[key] = cache
		noticeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Notice record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Notice) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Notice record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Notice) DeleteG() error {
	if o == nil {
		return errors.New("public: no Notice provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Notice record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Notice) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Notice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notice) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Notice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), noticePrimaryKeyMapping)
	query := "DELETE FROM \"notice\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from notice")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q noticeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q noticeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no noticeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from notice")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o NoticeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o NoticeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Notice slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NoticeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NoticeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Notice slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(noticeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"notice\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, noticePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(noticePrimaryKeyColumns), 1, len(noticePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from notice slice")
	}

	if len(noticeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Notice) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Notice) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Notice) ReloadG() error {
	if o == nil {
		return errors.New("public: no Notice provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notice) Reload(exec boil.Executor) error {
	ret, err := FindNotice(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NoticeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NoticeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty NoticeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NoticeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	notices := NoticeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), noticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"notice\".* FROM \"notice\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, noticePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(noticePrimaryKeyColumns), 1, len(noticePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&notices)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in NoticeSlice")
	}

	*o = notices

	return nil
}

// NoticeExists checks if the Notice row exists.
func NoticeExists(exec boil.Executor, id int16) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"notice\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if notice exists")
	}

	return exists, nil
}

// NoticeExistsG checks if the Notice row exists.
func NoticeExistsG(id int16) (bool, error) {
	return NoticeExists(boil.GetDB(), id)
}

// NoticeExistsGP checks if the Notice row exists. Panics on error.
func NoticeExistsGP(id int16) bool {
	e, err := NoticeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NoticeExistsP checks if the Notice row exists. Panics on error.
func NoticeExistsP(exec boil.Executor, id int16) bool {
	e, err := NoticeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
