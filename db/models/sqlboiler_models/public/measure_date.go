// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"reflect"
	"strings"
	"sync"
	"time"
)

// MeasureDate is an object representing the database table.
type MeasureDate struct {
	Record int       `db:"record" json:"measureDate_record"`
	Metric int       `db:"metric" json:"measureDate_metric"`
	Datum  time.Time `db:"datum" json:"measureDate_datum"`

	R *measureDateR `db:"-" json:"-"`
	L measureDateL  `db:"-" json:"-"`
}

// measureDateR is where relationships are stored.
type measureDateR struct {
	Metric *Metric
	Record *Record
}

// measureDateL is where Load methods for each relationship are stored.
type measureDateL struct{}

var (
	measureDateColumns               = []string{"record", "metric", "datum"}
	measureDateColumnsWithoutDefault = []string{"record", "metric", "datum"}
	measureDateColumnsWithDefault    = []string{}
	measureDateColumnsWithCustom     = []string{}

	measureDatePrimaryKeyColumns = []string{"record", "metric"}
)

type (
	// MeasureDateSlice is an alias for a slice of pointers to MeasureDate.
	// This should generally be used opposed to []MeasureDate.
	MeasureDateSlice []*MeasureDate
	// MeasureDateHook is the signature for custom MeasureDate hook methods
	MeasureDateHook func(boil.Executor, *MeasureDate) error

	measureDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	measureDateType    = reflect.TypeOf(&MeasureDate{})
	measureDateMapping = queries.MakeStructMapping(measureDateType)

	measureDatePrimaryKeyMapping, _ = queries.BindMapping(measureDateType, measureDateMapping, measureDatePrimaryKeyColumns)

	measureDateInsertCacheMut sync.RWMutex
	measureDateInsertCache    = make(map[string]insertCache)
	measureDateUpdateCacheMut sync.RWMutex
	measureDateUpdateCache    = make(map[string]updateCache)
	measureDateUpsertCacheMut sync.RWMutex
	measureDateUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var measureDateBeforeInsertHooks []MeasureDateHook
var measureDateBeforeUpdateHooks []MeasureDateHook
var measureDateBeforeDeleteHooks []MeasureDateHook
var measureDateBeforeUpsertHooks []MeasureDateHook

var measureDateAfterInsertHooks []MeasureDateHook
var measureDateAfterSelectHooks []MeasureDateHook
var measureDateAfterUpdateHooks []MeasureDateHook
var measureDateAfterDeleteHooks []MeasureDateHook
var measureDateAfterUpsertHooks []MeasureDateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MeasureDate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MeasureDate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MeasureDate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MeasureDate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MeasureDate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MeasureDate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MeasureDate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MeasureDate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MeasureDate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMeasureDateHook registers your hook function for all future operations.
func AddMeasureDateHook(hookPoint boil.HookPoint, measureDateHook MeasureDateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		measureDateBeforeInsertHooks = append(measureDateBeforeInsertHooks, measureDateHook)
	case boil.BeforeUpdateHook:
		measureDateBeforeUpdateHooks = append(measureDateBeforeUpdateHooks, measureDateHook)
	case boil.BeforeDeleteHook:
		measureDateBeforeDeleteHooks = append(measureDateBeforeDeleteHooks, measureDateHook)
	case boil.BeforeUpsertHook:
		measureDateBeforeUpsertHooks = append(measureDateBeforeUpsertHooks, measureDateHook)
	case boil.AfterInsertHook:
		measureDateAfterInsertHooks = append(measureDateAfterInsertHooks, measureDateHook)
	case boil.AfterSelectHook:
		measureDateAfterSelectHooks = append(measureDateAfterSelectHooks, measureDateHook)
	case boil.AfterUpdateHook:
		measureDateAfterUpdateHooks = append(measureDateAfterUpdateHooks, measureDateHook)
	case boil.AfterDeleteHook:
		measureDateAfterDeleteHooks = append(measureDateAfterDeleteHooks, measureDateHook)
	case boil.AfterUpsertHook:
		measureDateAfterUpsertHooks = append(measureDateAfterUpsertHooks, measureDateHook)
	}
}

// OneP returns a single measureDate record from the query, and panics on error.
func (q measureDateQuery) OneP() *MeasureDate {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single measureDate record from the query.
func (q measureDateQuery) One() (*MeasureDate, error) {
	o := &MeasureDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for measure_date")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all MeasureDate records from the query, and panics on error.
func (q measureDateQuery) AllP() MeasureDateSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all MeasureDate records from the query.
func (q measureDateQuery) All() (MeasureDateSlice, error) {
	var o MeasureDateSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to MeasureDate slice")
	}

	if len(measureDateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all MeasureDate records in the query, and panics on error.
func (q measureDateQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all MeasureDate records in the query.
func (q measureDateQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count measure_date rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q measureDateQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q measureDateQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if measure_date exists")
	}

	return count > 0, nil
}

// MetricG pointed to by the foreign key.
func (o *MeasureDate) MetricG(mods ...qm.QueryMod) metricQuery {
	return o.MetricByFk(boil.GetDB(), mods...)
}

// Metric pointed to by the foreign key.
func (o *MeasureDate) MetricByFk(exec boil.Executor, mods ...qm.QueryMod) metricQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Metric),
	}

	queryMods = append(queryMods, mods...)

	query := Metrics(exec, queryMods...)
	queries.SetFrom(query.Query, "\"metric\"")

	return query
}

// RecordG pointed to by the foreign key.
func (o *MeasureDate) RecordG(mods ...qm.QueryMod) recordQuery {
	return o.RecordByFk(boil.GetDB(), mods...)
}

// Record pointed to by the foreign key.
func (o *MeasureDate) RecordByFk(exec boil.Executor, mods ...qm.QueryMod) recordQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Record),
	}

	queryMods = append(queryMods, mods...)

	query := Records(exec, queryMods...)
	queries.SetFrom(query.Query, "\"record\"")

	return query
}

// LoadMetric allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (measureDateL) LoadMetric(e boil.Executor, singular bool, maybeMeasureDate interface{}) error {
	var slice []*MeasureDate
	var object *MeasureDate

	count := 1
	if singular {
		object = maybeMeasureDate.(*MeasureDate)
	} else {
		slice = *maybeMeasureDate.(*MeasureDateSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &measureDateR{}
		}
		args[0] = object.Metric
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &measureDateR{}
			}
			args[i] = obj.Metric
		}
	}

	query := fmt.Sprintf(
		"select * from \"metric\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Metric")
	}
	defer results.Close()

	var resultSlice []*Metric
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Metric")
	}

	if len(measureDateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Metric = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Metric == foreign.ID {
				local.R.Metric = foreign
				break
			}
		}
	}

	return nil
}

// LoadRecord allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (measureDateL) LoadRecord(e boil.Executor, singular bool, maybeMeasureDate interface{}) error {
	var slice []*MeasureDate
	var object *MeasureDate

	count := 1
	if singular {
		object = maybeMeasureDate.(*MeasureDate)
	} else {
		slice = *maybeMeasureDate.(*MeasureDateSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &measureDateR{}
		}
		args[0] = object.Record
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &measureDateR{}
			}
			args[i] = obj.Record
		}
	}

	query := fmt.Sprintf(
		"select * from \"record\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Record")
	}
	defer results.Close()

	var resultSlice []*Record
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Record")
	}

	if len(measureDateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Record = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Record == foreign.ID {
				local.R.Record = foreign
				break
			}
		}
	}

	return nil
}

// SetMetricG of the measure_date to the related item.
// Sets o.R.Metric to related.
// Adds o to related.R.MeasureDates.
// Uses the global database handle.
func (o *MeasureDate) SetMetricG(insert bool, related *Metric) error {
	return o.SetMetric(boil.GetDB(), insert, related)
}

// SetMetricP of the measure_date to the related item.
// Sets o.R.Metric to related.
// Adds o to related.R.MeasureDates.
// Panics on error.
func (o *MeasureDate) SetMetricP(exec boil.Executor, insert bool, related *Metric) {
	if err := o.SetMetric(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMetricGP of the measure_date to the related item.
// Sets o.R.Metric to related.
// Adds o to related.R.MeasureDates.
// Uses the global database handle and panics on error.
func (o *MeasureDate) SetMetricGP(insert bool, related *Metric) {
	if err := o.SetMetric(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMetric of the measure_date to the related item.
// Sets o.R.Metric to related.
// Adds o to related.R.MeasureDates.
func (o *MeasureDate) SetMetric(exec boil.Executor, insert bool, related *Metric) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"measure_date\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"metric"}),
		strmangle.WhereClause("\"", "\"", 2, measureDatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Record, o.Metric}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Metric = related.ID

	if o.R == nil {
		o.R = &measureDateR{
			Metric: related,
		}
	} else {
		o.R.Metric = related
	}

	if related.R == nil {
		related.R = &metricR{
			MeasureDates: MeasureDateSlice{o},
		}
	} else {
		related.R.MeasureDates = append(related.R.MeasureDates, o)
	}

	return nil
}

// SetRecordG of the measure_date to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.MeasureDates.
// Uses the global database handle.
func (o *MeasureDate) SetRecordG(insert bool, related *Record) error {
	return o.SetRecord(boil.GetDB(), insert, related)
}

// SetRecordP of the measure_date to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.MeasureDates.
// Panics on error.
func (o *MeasureDate) SetRecordP(exec boil.Executor, insert bool, related *Record) {
	if err := o.SetRecord(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRecordGP of the measure_date to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.MeasureDates.
// Uses the global database handle and panics on error.
func (o *MeasureDate) SetRecordGP(insert bool, related *Record) {
	if err := o.SetRecord(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRecord of the measure_date to the related item.
// Sets o.R.Record to related.
// Adds o to related.R.MeasureDates.
func (o *MeasureDate) SetRecord(exec boil.Executor, insert bool, related *Record) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"measure_date\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"record"}),
		strmangle.WhereClause("\"", "\"", 2, measureDatePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Record, o.Metric}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Record = related.ID

	if o.R == nil {
		o.R = &measureDateR{
			Record: related,
		}
	} else {
		o.R.Record = related
	}

	if related.R == nil {
		related.R = &recordR{
			MeasureDates: MeasureDateSlice{o},
		}
	} else {
		related.R.MeasureDates = append(related.R.MeasureDates, o)
	}

	return nil
}

// MeasureDatesG retrieves all records.
func MeasureDatesG(mods ...qm.QueryMod) measureDateQuery {
	return MeasureDates(boil.GetDB(), mods...)
}

// MeasureDates retrieves all the records using an executor.
func MeasureDates(exec boil.Executor, mods ...qm.QueryMod) measureDateQuery {
	mods = append(mods, qm.From("\"measure_date\""))
	return measureDateQuery{NewQuery(exec, mods...)}
}

// FindMeasureDateG retrieves a single record by ID.
func FindMeasureDateG(record int, metric int, selectCols ...string) (*MeasureDate, error) {
	return FindMeasureDate(boil.GetDB(), record, metric, selectCols...)
}

// FindMeasureDateGP retrieves a single record by ID, and panics on error.
func FindMeasureDateGP(record int, metric int, selectCols ...string) *MeasureDate {
	retobj, err := FindMeasureDate(boil.GetDB(), record, metric, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMeasureDate retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMeasureDate(exec boil.Executor, record int, metric int, selectCols ...string) (*MeasureDate, error) {
	measureDateObj := &MeasureDate{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"measure_date\" where \"record\"=$1 AND \"metric\"=$2", sel,
	)

	q := queries.Raw(exec, query, record, metric)

	err := q.Bind(measureDateObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from measure_date")
	}

	return measureDateObj, nil
}

// FindMeasureDateP retrieves a single record by ID with an executor, and panics on error.
func FindMeasureDateP(exec boil.Executor, record int, metric int, selectCols ...string) *MeasureDate {
	retobj, err := FindMeasureDate(exec, record, metric, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MeasureDate) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *MeasureDate) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *MeasureDate) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *MeasureDate) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no measure_date provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measureDateColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	measureDateInsertCacheMut.RLock()
	cache, cached := measureDateInsertCache[key]
	measureDateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			measureDateColumns,
			measureDateColumnsWithDefault,
			measureDateColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(measureDateType, measureDateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(measureDateType, measureDateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"measure_date\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"measure_date\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into measure_date")
	}

	if !cached {
		measureDateInsertCacheMut.Lock()
		measureDateInsertCache[key] = cache
		measureDateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single MeasureDate record. See Update for
// whitelist behavior description.
func (o *MeasureDate) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single MeasureDate record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *MeasureDate) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the MeasureDate, and panics on error.
// See Update for whitelist behavior description.
func (o *MeasureDate) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the MeasureDate.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *MeasureDate) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	measureDateUpdateCacheMut.RLock()
	cache, cached := measureDateUpdateCache[key]
	measureDateUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(measureDateColumns, measureDatePrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update measure_date, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"measure_date\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, measureDatePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(measureDateType, measureDateMapping, append(wl, measureDatePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update measure_date row")
	}

	if !cached {
		measureDateUpdateCacheMut.Lock()
		measureDateUpdateCache[key] = cache
		measureDateUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q measureDateQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q measureDateQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for measure_date")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MeasureDateSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MeasureDateSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MeasureDateSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MeasureDateSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measureDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"measure_date\" SET %s WHERE (\"record\",\"metric\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(measureDatePrimaryKeyColumns), len(colNames)+1, len(measureDatePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in measureDate slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *MeasureDate) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *MeasureDate) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *MeasureDate) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *MeasureDate) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no measure_date provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measureDateColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	measureDateUpsertCacheMut.RLock()
	cache, cached := measureDateUpsertCache[key]
	measureDateUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			measureDateColumns,
			measureDateColumnsWithDefault,
			measureDateColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			measureDateColumns,
			measureDatePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert measure_date, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(measureDatePrimaryKeyColumns))
			copy(conflict, measureDatePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"measure_date\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(measureDateType, measureDateMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(measureDateType, measureDateMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert measure_date")
	}

	if !cached {
		measureDateUpsertCacheMut.Lock()
		measureDateUpsertCache[key] = cache
		measureDateUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single MeasureDate record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MeasureDate) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single MeasureDate record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *MeasureDate) DeleteG() error {
	if o == nil {
		return errors.New("public: no MeasureDate provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single MeasureDate record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *MeasureDate) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single MeasureDate record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MeasureDate) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no MeasureDate provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), measureDatePrimaryKeyMapping)
	query := "DELETE FROM \"measure_date\" WHERE \"record\"=$1 AND \"metric\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from measure_date")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q measureDateQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q measureDateQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no measureDateQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from measure_date")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MeasureDateSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MeasureDateSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no MeasureDate slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MeasureDateSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MeasureDateSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no MeasureDate slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(measureDateBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measureDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"measure_date\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, measureDatePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(measureDatePrimaryKeyColumns), 1, len(measureDatePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from measureDate slice")
	}

	if len(measureDateAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *MeasureDate) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *MeasureDate) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *MeasureDate) ReloadG() error {
	if o == nil {
		return errors.New("public: no MeasureDate provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MeasureDate) Reload(exec boil.Executor) error {
	ret, err := FindMeasureDate(exec, o.Record, o.Metric)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MeasureDateSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MeasureDateSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeasureDateSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty MeasureDateSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MeasureDateSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	measureDates := MeasureDateSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), measureDatePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"measure_date\".* FROM \"measure_date\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, measureDatePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(measureDatePrimaryKeyColumns), 1, len(measureDatePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&measureDates)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in MeasureDateSlice")
	}

	*o = measureDates

	return nil
}

// MeasureDateExists checks if the MeasureDate row exists.
func MeasureDateExists(exec boil.Executor, record int, metric int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"measure_date\" where \"record\"=$1 AND \"metric\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, record, metric)
	}

	row := exec.QueryRow(query, record, metric)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if measure_date exists")
	}

	return exists, nil
}

// MeasureDateExistsG checks if the MeasureDate row exists.
func MeasureDateExistsG(record int, metric int) (bool, error) {
	return MeasureDateExists(boil.GetDB(), record, metric)
}

// MeasureDateExistsGP checks if the MeasureDate row exists. Panics on error.
func MeasureDateExistsGP(record int, metric int) bool {
	e, err := MeasureDateExists(boil.GetDB(), record, metric)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MeasureDateExistsP checks if the MeasureDate row exists. Panics on error.
func MeasureDateExistsP(exec boil.Executor, record int, metric int) bool {
	e, err := MeasureDateExists(exec, record, metric)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
