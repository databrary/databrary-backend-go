// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Account is an object representing the database table.
type Account struct {
	ID       int         `db:"id" json:"account_id"`
	Email    string      `db:"email" json:"account_email"`
	Password null.String `db:"password" json:"account_password,omitempty"`

	R *accountR `db:"-" json:"-"`
	L accountL  `db:"-" json:"-"`
}

// accountR is where relationships are stored.
type accountR struct {
	ID                  *Party
	LoginToken          *LoginToken
	AccountTokens       AccountTokenSlice
	WhoComments         CommentSlice
	TargetNotifications NotificationSlice
	TargetNotifies      NotifySlice
	Sessions            SessionSlice
	WhoTagUses          TagUseSlice
	OwnerTranscodes     TranscodeSlice
	Uploads             UploadSlice
}

// accountL is where Load methods for each relationship are stored.
type accountL struct{}

var (
	accountColumns               = []string{"id", "email", "password"}
	accountColumnsWithoutDefault = []string{"id", "email", "password"}
	accountColumnsWithDefault    = []string{}
	accountColumnsWithCustom     = []string{}

	accountPrimaryKeyColumns = []string{"id"}
)

type (
	// AccountSlice is an alias for a slice of pointers to Account.
	// This should generally be used opposed to []Account.
	AccountSlice []*Account
	// AccountHook is the signature for custom Account hook methods
	AccountHook func(boil.Executor, *Account) error

	accountQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountType    = reflect.TypeOf(&Account{})
	accountMapping = queries.MakeStructMapping(accountType)

	accountPrimaryKeyMapping, _ = queries.BindMapping(accountType, accountMapping, accountPrimaryKeyColumns)

	accountInsertCacheMut sync.RWMutex
	accountInsertCache    = make(map[string]insertCache)
	accountUpdateCacheMut sync.RWMutex
	accountUpdateCache    = make(map[string]updateCache)
	accountUpsertCacheMut sync.RWMutex
	accountUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var accountBeforeInsertHooks []AccountHook
var accountBeforeUpdateHooks []AccountHook
var accountBeforeDeleteHooks []AccountHook
var accountBeforeUpsertHooks []AccountHook

var accountAfterInsertHooks []AccountHook
var accountAfterSelectHooks []AccountHook
var accountAfterUpdateHooks []AccountHook
var accountAfterDeleteHooks []AccountHook
var accountAfterUpsertHooks []AccountHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Account) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Account) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Account) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Account) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Account) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Account) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accountAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Account) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Account) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Account) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountHook registers your hook function for all future operations.
func AddAccountHook(hookPoint boil.HookPoint, accountHook AccountHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accountBeforeInsertHooks = append(accountBeforeInsertHooks, accountHook)
	case boil.BeforeUpdateHook:
		accountBeforeUpdateHooks = append(accountBeforeUpdateHooks, accountHook)
	case boil.BeforeDeleteHook:
		accountBeforeDeleteHooks = append(accountBeforeDeleteHooks, accountHook)
	case boil.BeforeUpsertHook:
		accountBeforeUpsertHooks = append(accountBeforeUpsertHooks, accountHook)
	case boil.AfterInsertHook:
		accountAfterInsertHooks = append(accountAfterInsertHooks, accountHook)
	case boil.AfterSelectHook:
		accountAfterSelectHooks = append(accountAfterSelectHooks, accountHook)
	case boil.AfterUpdateHook:
		accountAfterUpdateHooks = append(accountAfterUpdateHooks, accountHook)
	case boil.AfterDeleteHook:
		accountAfterDeleteHooks = append(accountAfterDeleteHooks, accountHook)
	case boil.AfterUpsertHook:
		accountAfterUpsertHooks = append(accountAfterUpsertHooks, accountHook)
	}
}

// OneP returns a single account record from the query, and panics on error.
func (q accountQuery) OneP() *Account {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single account record from the query.
func (q accountQuery) One() (*Account, error) {
	o := &Account{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for account")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Account records from the query, and panics on error.
func (q accountQuery) AllP() AccountSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Account records from the query.
func (q accountQuery) All() (AccountSlice, error) {
	var o AccountSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Account slice")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Account records in the query, and panics on error.
func (q accountQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Account records in the query.
func (q accountQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count account rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q accountQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q accountQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if account exists")
	}

	return count > 0, nil
}

// IDG pointed to by the foreign key.
func (o *Account) IDG(mods ...qm.QueryMod) partyQuery {
	return o.IDByFk(boil.GetDB(), mods...)
}

// ID pointed to by the foreign key.
func (o *Account) IDByFk(exec boil.Executor, mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(exec, queryMods...)
	queries.SetFrom(query.Query, "\"party\"")

	return query
}

// LoginTokenG pointed to by the foreign key.
func (o *Account) LoginTokenG(mods ...qm.QueryMod) loginTokenQuery {
	return o.LoginTokenByFk(boil.GetDB(), mods...)
}

// LoginToken pointed to by the foreign key.
func (o *Account) LoginTokenByFk(exec boil.Executor, mods ...qm.QueryMod) loginTokenQuery {
	queryMods := []qm.QueryMod{
		qm.Where("account=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := LoginTokens(exec, queryMods...)
	queries.SetFrom(query.Query, "\"login_token\"")

	return query
}

// AccountTokensG retrieves all the account_token's account token.
func (o *Account) AccountTokensG(mods ...qm.QueryMod) accountTokenQuery {
	return o.AccountTokensByFk(boil.GetDB(), mods...)
}

// AccountTokens retrieves all the account_token's account token with an executor.
func (o *Account) AccountTokensByFk(exec boil.Executor, mods ...qm.QueryMod) accountTokenQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"account\"=?", o.ID),
	)

	query := AccountTokens(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account_token\" as \"a\"")
	return query
}

// WhoCommentsG retrieves all the comment's comment via who column.
func (o *Account) WhoCommentsG(mods ...qm.QueryMod) commentQuery {
	return o.WhoCommentsByFk(boil.GetDB(), mods...)
}

// WhoComments retrieves all the comment's comment with an executor via who column.
func (o *Account) WhoCommentsByFk(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"who\"=?", o.ID),
	)

	query := Comments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"comment\" as \"a\"")
	return query
}

// TargetNotificationsG retrieves all the notification's notification via target column.
func (o *Account) TargetNotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.TargetNotificationsByFk(boil.GetDB(), mods...)
}

// TargetNotifications retrieves all the notification's notification with an executor via target column.
func (o *Account) TargetNotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"target\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// TargetNotifiesG retrieves all the notify's notify via target column.
func (o *Account) TargetNotifiesG(mods ...qm.QueryMod) notifyQuery {
	return o.TargetNotifiesByFk(boil.GetDB(), mods...)
}

// TargetNotifies retrieves all the notify's notify with an executor via target column.
func (o *Account) TargetNotifiesByFk(exec boil.Executor, mods ...qm.QueryMod) notifyQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"target\"=?", o.ID),
	)

	query := Notifies(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notify\" as \"a\"")
	return query
}

// SessionsG retrieves all the session's session.
func (o *Account) SessionsG(mods ...qm.QueryMod) sessionQuery {
	return o.SessionsByFk(boil.GetDB(), mods...)
}

// Sessions retrieves all the session's session with an executor.
func (o *Account) SessionsByFk(exec boil.Executor, mods ...qm.QueryMod) sessionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"account\"=?", o.ID),
	)

	query := Sessions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"session\" as \"a\"")
	return query
}

// WhoTagUsesG retrieves all the tag_use's tag use via who column.
func (o *Account) WhoTagUsesG(mods ...qm.QueryMod) tagUseQuery {
	return o.WhoTagUsesByFk(boil.GetDB(), mods...)
}

// WhoTagUses retrieves all the tag_use's tag use with an executor via who column.
func (o *Account) WhoTagUsesByFk(exec boil.Executor, mods ...qm.QueryMod) tagUseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"who\"=?", o.ID),
	)

	query := TagUses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tag_use\" as \"a\"")
	return query
}

// OwnerTranscodesG retrieves all the transcode's transcode via owner column.
func (o *Account) OwnerTranscodesG(mods ...qm.QueryMod) transcodeQuery {
	return o.OwnerTranscodesByFk(boil.GetDB(), mods...)
}

// OwnerTranscodes retrieves all the transcode's transcode with an executor via owner column.
func (o *Account) OwnerTranscodesByFk(exec boil.Executor, mods ...qm.QueryMod) transcodeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"owner\"=?", o.ID),
	)

	query := Transcodes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"transcode\" as \"a\"")
	return query
}

// UploadsG retrieves all the upload's upload.
func (o *Account) UploadsG(mods ...qm.QueryMod) uploadQuery {
	return o.UploadsByFk(boil.GetDB(), mods...)
}

// Uploads retrieves all the upload's upload with an executor.
func (o *Account) UploadsByFk(exec boil.Executor, mods ...qm.QueryMod) uploadQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"account\"=?", o.ID),
	)

	query := Uploads(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upload\" as \"a\"")
	return query
}

// LoadID allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadID(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"party\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}
	defer results.Close()

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.ID = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.ID = foreign
				break
			}
		}
	}

	return nil
}

// LoadLoginToken allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadLoginToken(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"login_token\" where \"account\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load LoginToken")
	}
	defer results.Close()

	var resultSlice []*LoginToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice LoginToken")
	}

	if len(accountAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.LoginToken = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Account {
				local.R.LoginToken = foreign
				break
			}
		}
	}

	return nil
}

// LoadAccountTokens allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadAccountTokens(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"account_token\" where \"account\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load account_token")
	}
	defer results.Close()

	var resultSlice []*AccountToken
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice account_token")
	}

	if len(accountTokenAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AccountTokens = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Account {
				local.R.AccountTokens = append(local.R.AccountTokens, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWhoComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadWhoComments(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"comment\" where \"who\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}
	defer results.Close()

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WhoComments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Who {
				local.R.WhoComments = append(local.R.WhoComments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTargetNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadTargetNotifications(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"target\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetNotifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Target {
				local.R.TargetNotifications = append(local.R.TargetNotifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTargetNotifies allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadTargetNotifies(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notify\" where \"target\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notify")
	}
	defer results.Close()

	var resultSlice []*Notify
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notify")
	}

	if len(notifyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TargetNotifies = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Target {
				local.R.TargetNotifies = append(local.R.TargetNotifies, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSessions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadSessions(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"session\" where \"account\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load session")
	}
	defer results.Close()

	var resultSlice []*Session
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice session")
	}

	if len(sessionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Sessions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Account {
				local.R.Sessions = append(local.R.Sessions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadWhoTagUses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadWhoTagUses(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tag_use\" where \"who\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_use")
	}
	defer results.Close()

	var resultSlice []*TagUse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_use")
	}

	if len(tagUseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.WhoTagUses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Who {
				local.R.WhoTagUses = append(local.R.WhoTagUses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOwnerTranscodes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadOwnerTranscodes(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"transcode\" where \"owner\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transcode")
	}
	defer results.Close()

	var resultSlice []*Transcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transcode")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OwnerTranscodes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Owner {
				local.R.OwnerTranscodes = append(local.R.OwnerTranscodes, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUploads allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (accountL) LoadUploads(e boil.Executor, singular bool, maybeAccount interface{}) error {
	var slice []*Account
	var object *Account

	count := 1
	if singular {
		object = maybeAccount.(*Account)
	} else {
		slice = *maybeAccount.(*AccountSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &accountR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &accountR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upload\" where \"account\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload")
	}
	defer results.Close()

	var resultSlice []*Upload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Uploads = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Account {
				local.R.Uploads = append(local.R.Uploads, foreign)
				break
			}
		}
	}

	return nil
}

// SetIDG of the account to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAccount.
// Uses the global database handle.
func (o *Account) SetIDG(insert bool, related *Party) error {
	return o.SetID(boil.GetDB(), insert, related)
}

// SetIDP of the account to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAccount.
// Panics on error.
func (o *Account) SetIDP(exec boil.Executor, insert bool, related *Party) {
	if err := o.SetID(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetIDGP of the account to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAccount.
// Uses the global database handle and panics on error.
func (o *Account) SetIDGP(insert bool, related *Party) {
	if err := o.SetID(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetID of the account to the related item.
// Sets o.R.ID to related.
// Adds o to related.R.IDAccount.
func (o *Account) SetID(exec boil.Executor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
		strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ID = related.ID

	if o.R == nil {
		o.R = &accountR{
			ID: related,
		}
	} else {
		o.R.ID = related
	}

	if related.R == nil {
		related.R = &partyR{
			IDAccount: o,
		}
	} else {
		related.R.IDAccount = o
	}

	return nil
}

// SetLoginTokenG of the account to the related item.
// Sets o.R.LoginToken to related.
// Adds o to related.R.Account.
// Uses the global database handle.
func (o *Account) SetLoginTokenG(insert bool, related *LoginToken) error {
	return o.SetLoginToken(boil.GetDB(), insert, related)
}

// SetLoginTokenP of the account to the related item.
// Sets o.R.LoginToken to related.
// Adds o to related.R.Account.
// Panics on error.
func (o *Account) SetLoginTokenP(exec boil.Executor, insert bool, related *LoginToken) {
	if err := o.SetLoginToken(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLoginTokenGP of the account to the related item.
// Sets o.R.LoginToken to related.
// Adds o to related.R.Account.
// Uses the global database handle and panics on error.
func (o *Account) SetLoginTokenGP(insert bool, related *LoginToken) {
	if err := o.SetLoginToken(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetLoginToken of the account to the related item.
// Sets o.R.LoginToken to related.
// Adds o to related.R.Account.
func (o *Account) SetLoginToken(exec boil.Executor, insert bool, related *LoginToken) error {
	var err error

	if insert {
		related.Account = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"login_token\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"account"}),
			strmangle.WhereClause("\"", "\"", 2, loginTokenPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Token}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Account = o.ID

	}

	if o.R == nil {
		o.R = &accountR{
			LoginToken: related,
		}
	} else {
		o.R.LoginToken = related
	}

	if related.R == nil {
		related.R = &loginTokenR{
			Account: o,
		}
	} else {
		related.R.Account = o
	}
	return nil
}

// AddAccountTokensG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.AccountTokens.
// Sets related.R.Account appropriately.
// Uses the global database handle.
func (o *Account) AddAccountTokensG(insert bool, related ...*AccountToken) error {
	return o.AddAccountTokens(boil.GetDB(), insert, related...)
}

// AddAccountTokensP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.AccountTokens.
// Sets related.R.Account appropriately.
// Panics on error.
func (o *Account) AddAccountTokensP(exec boil.Executor, insert bool, related ...*AccountToken) {
	if err := o.AddAccountTokens(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAccountTokensGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.AccountTokens.
// Sets related.R.Account appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddAccountTokensGP(insert bool, related ...*AccountToken) {
	if err := o.AddAccountTokens(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAccountTokens adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.AccountTokens.
// Sets related.R.Account appropriately.
func (o *Account) AddAccountTokens(exec boil.Executor, insert bool, related ...*AccountToken) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Account = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"account_token\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account"}),
				strmangle.WhereClause("\"", "\"", 2, accountTokenPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Account = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			AccountTokens: related,
		}
	} else {
		o.R.AccountTokens = append(o.R.AccountTokens, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &accountTokenR{
				Account: o,
			}
		} else {
			rel.R.Account = o
		}
	}
	return nil
}

// AddWhoCommentsG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoComments.
// Sets related.R.Who appropriately.
// Uses the global database handle.
func (o *Account) AddWhoCommentsG(insert bool, related ...*Comment) error {
	return o.AddWhoComments(boil.GetDB(), insert, related...)
}

// AddWhoCommentsP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoComments.
// Sets related.R.Who appropriately.
// Panics on error.
func (o *Account) AddWhoCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.AddWhoComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhoCommentsGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoComments.
// Sets related.R.Who appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddWhoCommentsGP(insert bool, related ...*Comment) {
	if err := o.AddWhoComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhoComments adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoComments.
// Sets related.R.Who appropriately.
func (o *Account) AddWhoComments(exec boil.Executor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Who = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"who"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Who = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			WhoComments: related,
		}
	} else {
		o.R.WhoComments = append(o.R.WhoComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Who: o,
			}
		} else {
			rel.R.Who = o
		}
	}
	return nil
}

// AddTargetNotificationsG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifications.
// Sets related.R.Target appropriately.
// Uses the global database handle.
func (o *Account) AddTargetNotificationsG(insert bool, related ...*Notification) error {
	return o.AddTargetNotifications(boil.GetDB(), insert, related...)
}

// AddTargetNotificationsP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifications.
// Sets related.R.Target appropriately.
// Panics on error.
func (o *Account) AddTargetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddTargetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTargetNotificationsGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifications.
// Sets related.R.Target appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddTargetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddTargetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTargetNotifications adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifications.
// Sets related.R.Target appropriately.
func (o *Account) AddTargetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Target = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"target"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Target = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			TargetNotifications: related,
		}
	} else {
		o.R.TargetNotifications = append(o.R.TargetNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Target: o,
			}
		} else {
			rel.R.Target = o
		}
	}
	return nil
}

// AddTargetNotifiesG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifies.
// Sets related.R.Target appropriately.
// Uses the global database handle.
func (o *Account) AddTargetNotifiesG(insert bool, related ...*Notify) error {
	return o.AddTargetNotifies(boil.GetDB(), insert, related...)
}

// AddTargetNotifiesP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifies.
// Sets related.R.Target appropriately.
// Panics on error.
func (o *Account) AddTargetNotifiesP(exec boil.Executor, insert bool, related ...*Notify) {
	if err := o.AddTargetNotifies(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTargetNotifiesGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifies.
// Sets related.R.Target appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddTargetNotifiesGP(insert bool, related ...*Notify) {
	if err := o.AddTargetNotifies(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTargetNotifies adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.TargetNotifies.
// Sets related.R.Target appropriately.
func (o *Account) AddTargetNotifies(exec boil.Executor, insert bool, related ...*Notify) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Target = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notify\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"target"}),
				strmangle.WhereClause("\"", "\"", 2, notifyPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Target, rel.Notice}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Target = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			TargetNotifies: related,
		}
	} else {
		o.R.TargetNotifies = append(o.R.TargetNotifies, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notifyR{
				Target: o,
			}
		} else {
			rel.R.Target = o
		}
	}
	return nil
}

// AddSessionsG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Sessions.
// Sets related.R.Account appropriately.
// Uses the global database handle.
func (o *Account) AddSessionsG(insert bool, related ...*Session) error {
	return o.AddSessions(boil.GetDB(), insert, related...)
}

// AddSessionsP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Sessions.
// Sets related.R.Account appropriately.
// Panics on error.
func (o *Account) AddSessionsP(exec boil.Executor, insert bool, related ...*Session) {
	if err := o.AddSessions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSessionsGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Sessions.
// Sets related.R.Account appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddSessionsGP(insert bool, related ...*Session) {
	if err := o.AddSessions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSessions adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Sessions.
// Sets related.R.Account appropriately.
func (o *Account) AddSessions(exec boil.Executor, insert bool, related ...*Session) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Account = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"session\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account"}),
				strmangle.WhereClause("\"", "\"", 2, sessionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Account = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			Sessions: related,
		}
	} else {
		o.R.Sessions = append(o.R.Sessions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sessionR{
				Account: o,
			}
		} else {
			rel.R.Account = o
		}
	}
	return nil
}

// AddWhoTagUsesG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoTagUses.
// Sets related.R.Who appropriately.
// Uses the global database handle.
func (o *Account) AddWhoTagUsesG(insert bool, related ...*TagUse) error {
	return o.AddWhoTagUses(boil.GetDB(), insert, related...)
}

// AddWhoTagUsesP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoTagUses.
// Sets related.R.Who appropriately.
// Panics on error.
func (o *Account) AddWhoTagUsesP(exec boil.Executor, insert bool, related ...*TagUse) {
	if err := o.AddWhoTagUses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhoTagUsesGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoTagUses.
// Sets related.R.Who appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddWhoTagUsesGP(insert bool, related ...*TagUse) {
	if err := o.AddWhoTagUses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddWhoTagUses adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.WhoTagUses.
// Sets related.R.Who appropriately.
func (o *Account) AddWhoTagUses(exec boil.Executor, insert bool, related ...*TagUse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Who = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tag_use\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"who"}),
				strmangle.WhereClause("\"", "\"", 2, tagUsePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Segment, rel.Tag, rel.Who}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Who = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			WhoTagUses: related,
		}
	} else {
		o.R.WhoTagUses = append(o.R.WhoTagUses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagUseR{
				Who: o,
			}
		} else {
			rel.R.Who = o
		}
	}
	return nil
}

// AddOwnerTranscodesG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OwnerTranscodes.
// Sets related.R.Owner appropriately.
// Uses the global database handle.
func (o *Account) AddOwnerTranscodesG(insert bool, related ...*Transcode) error {
	return o.AddOwnerTranscodes(boil.GetDB(), insert, related...)
}

// AddOwnerTranscodesP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OwnerTranscodes.
// Sets related.R.Owner appropriately.
// Panics on error.
func (o *Account) AddOwnerTranscodesP(exec boil.Executor, insert bool, related ...*Transcode) {
	if err := o.AddOwnerTranscodes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOwnerTranscodesGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OwnerTranscodes.
// Sets related.R.Owner appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddOwnerTranscodesGP(insert bool, related ...*Transcode) {
	if err := o.AddOwnerTranscodes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOwnerTranscodes adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.OwnerTranscodes.
// Sets related.R.Owner appropriately.
func (o *Account) AddOwnerTranscodes(exec boil.Executor, insert bool, related ...*Transcode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Owner = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transcode\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"owner"}),
				strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Asset}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Owner = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			OwnerTranscodes: related,
		}
	} else {
		o.R.OwnerTranscodes = append(o.R.OwnerTranscodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transcodeR{
				Owner: o,
			}
		} else {
			rel.R.Owner = o
		}
	}
	return nil
}

// AddUploadsG adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Account appropriately.
// Uses the global database handle.
func (o *Account) AddUploadsG(insert bool, related ...*Upload) error {
	return o.AddUploads(boil.GetDB(), insert, related...)
}

// AddUploadsP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Account appropriately.
// Panics on error.
func (o *Account) AddUploadsP(exec boil.Executor, insert bool, related ...*Upload) {
	if err := o.AddUploads(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUploadsGP adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Account appropriately.
// Uses the global database handle and panics on error.
func (o *Account) AddUploadsGP(insert bool, related ...*Upload) {
	if err := o.AddUploads(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUploads adds the given related objects to the existing relationships
// of the account, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Account appropriately.
func (o *Account) AddUploads(exec boil.Executor, insert bool, related ...*Upload) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Account = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upload\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account"}),
				strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Account = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountR{
			Uploads: related,
		}
	} else {
		o.R.Uploads = append(o.R.Uploads, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadR{
				Account: o,
			}
		} else {
			rel.R.Account = o
		}
	}
	return nil
}

// AccountsG retrieves all records.
func AccountsG(mods ...qm.QueryMod) accountQuery {
	return Accounts(boil.GetDB(), mods...)
}

// Accounts retrieves all the records using an executor.
func Accounts(exec boil.Executor, mods ...qm.QueryMod) accountQuery {
	mods = append(mods, qm.From("\"account\""))
	return accountQuery{NewQuery(exec, mods...)}
}

// FindAccountG retrieves a single record by ID.
func FindAccountG(id int, selectCols ...string) (*Account, error) {
	return FindAccount(boil.GetDB(), id, selectCols...)
}

// FindAccountGP retrieves a single record by ID, and panics on error.
func FindAccountGP(id int, selectCols ...string) *Account {
	retobj, err := FindAccount(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAccount retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccount(exec boil.Executor, id int, selectCols ...string) (*Account, error) {
	accountObj := &Account{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(accountObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from account")
	}

	return accountObj, nil
}

// FindAccountP retrieves a single record by ID with an executor, and panics on error.
func FindAccountP(exec boil.Executor, id int, selectCols ...string) *Account {
	retobj, err := FindAccount(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Account) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Account) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Account) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Account) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no account provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	accountInsertCacheMut.RLock()
	cache, cached := accountInsertCache[key]
	accountInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			accountColumns,
			accountColumnsWithDefault,
			accountColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountType, accountMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into account")
	}

	if !cached {
		accountInsertCacheMut.Lock()
		accountInsertCache[key] = cache
		accountInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Account record. See Update for
// whitelist behavior description.
func (o *Account) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Account record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Account) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Account, and panics on error.
// See Update for whitelist behavior description.
func (o *Account) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Account.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Account) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	accountUpdateCacheMut.RLock()
	cache, cached := accountUpdateCache[key]
	accountUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(accountColumns, accountPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update account, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, append(wl, accountPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update account row")
	}

	if !cached {
		accountUpdateCacheMut.Lock()
		accountUpdateCache[key] = cache
		accountUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q accountQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q accountQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for account")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AccountSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AccountSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AccountSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"account\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(accountPrimaryKeyColumns), len(colNames)+1, len(accountPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in account slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Account) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Account) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Account) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Account) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no account provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountUpsertCacheMut.RLock()
	cache, cached := accountUpsertCache[key]
	accountUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			accountColumns,
			accountColumnsWithDefault,
			accountColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			accountColumns,
			accountPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert account, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountPrimaryKeyColumns))
			copy(conflict, accountPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"account\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(accountType, accountMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountType, accountMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert account")
	}

	if !cached {
		accountUpsertCacheMut.Lock()
		accountUpsertCache[key] = cache
		accountUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Account record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Account) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Account record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Account) DeleteG() error {
	if o == nil {
		return errors.New("public: no Account provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Account record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Account) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Account record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Account) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Account provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountPrimaryKeyMapping)
	query := "DELETE FROM \"account\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from account")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q accountQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q accountQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no accountQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from account")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AccountSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AccountSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Account slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AccountSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Account slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(accountBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"account\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, accountPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(accountPrimaryKeyColumns), 1, len(accountPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from account slice")
	}

	if len(accountAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Account) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Account) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Account) ReloadG() error {
	if o == nil {
		return errors.New("public: no Account provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Account) Reload(exec boil.Executor) error {
	ret, err := FindAccount(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AccountSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AccountSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty AccountSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	accounts := AccountSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"account\".* FROM \"account\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, accountPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(accountPrimaryKeyColumns), 1, len(accountPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&accounts)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in AccountSlice")
	}

	*o = accounts

	return nil
}

// AccountExists checks if the Account row exists.
func AccountExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"account\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if account exists")
	}

	return exists, nil
}

// AccountExistsG checks if the Account row exists.
func AccountExistsG(id int) (bool, error) {
	return AccountExists(boil.GetDB(), id)
}

// AccountExistsGP checks if the Account row exists. Panics on error.
func AccountExistsGP(id int) bool {
	e, err := AccountExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AccountExistsP checks if the Account row exists. Panics on error.
func AccountExistsP(exec boil.Executor, id int) bool {
	e, err := AccountExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
