// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Notification is an object representing the database table.
type Notification struct {
	ID         int                         `db:"id" json:"notification_id"`
	Target     int                         `db:"target" json:"notification_target"`
	Notice     int16                       `db:"notice" json:"notification_notice"`
	Time       time.Time                   `db:"time" json:"notification_time"`
	Delivered  custom_types.NoticeDelivery `db:"delivered" json:"notification_delivered"`
	Agent      int                         `db:"agent" json:"notification_agent"`
	Party      null.Int                    `db:"party" json:"notification_party,omitempty"`
	Volume     null.Int                    `db:"volume" json:"notification_volume,omitempty"`
	Permission custom_types.NullPermission `db:"permission" json:"notification_permission,omitempty"`
	Container  null.Int                    `db:"container" json:"notification_container,omitempty"`
	Segment    custom_types.NullSegment    `db:"segment" json:"notification_segment,omitempty"`
	Asset      null.Int                    `db:"asset" json:"notification_asset,omitempty"`
	Release    custom_types.NullRelease    `db:"release" json:"notification_release,omitempty"`
	Comment    null.Int                    `db:"comment" json:"notification_comment,omitempty"`
	Tag        null.Int                    `db:"tag" json:"notification_tag,omitempty"`

	R *notificationR `db:"-" json:"-"`
	L notificationL  `db:"-" json:"-"`
}

// notificationR is where relationships are stored.
type notificationR struct {
	Agent     *Party
	Asset     *Asset
	Comment   *Comment
	Container *Container
	Notice    *Notice
	Party     *Party
	Tag       *Tag
	Target    *Account
	Volume    *Volume
}

// notificationL is where Load methods for each relationship are stored.
type notificationL struct{}

var (
	notificationColumns               = []string{"id", "target", "notice", "time", "delivered", "agent", "party", "volume", "permission", "container", "segment", "asset", "release", "comment", "tag"}
	notificationColumnsWithoutDefault = []string{"target", "notice", "agent", "party", "volume", "permission", "container", "segment", "asset", "release", "comment", "tag"}
	notificationColumnsWithDefault    = []string{"id", "time", "delivered"}
	notificationColumnsWithCustom     = []string{"delivered", "permission", "segment", "release"}

	notificationPrimaryKeyColumns = []string{"id"}
)

type (
	// NotificationSlice is an alias for a slice of pointers to Notification.
	// This should generally be used opposed to []Notification.
	NotificationSlice []*Notification
	// NotificationHook is the signature for custom Notification hook methods
	NotificationHook func(boil.Executor, *Notification) error

	notificationQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	notificationType    = reflect.TypeOf(&Notification{})
	notificationMapping = queries.MakeStructMapping(notificationType)

	notificationPrimaryKeyMapping, _ = queries.BindMapping(notificationType, notificationMapping, notificationPrimaryKeyColumns)

	notificationInsertCacheMut sync.RWMutex
	notificationInsertCache    = make(map[string]insertCache)
	notificationUpdateCacheMut sync.RWMutex
	notificationUpdateCache    = make(map[string]updateCache)
	notificationUpsertCacheMut sync.RWMutex
	notificationUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var notificationBeforeInsertHooks []NotificationHook
var notificationBeforeUpdateHooks []NotificationHook
var notificationBeforeDeleteHooks []NotificationHook
var notificationBeforeUpsertHooks []NotificationHook

var notificationAfterInsertHooks []NotificationHook
var notificationAfterSelectHooks []NotificationHook
var notificationAfterUpdateHooks []NotificationHook
var notificationAfterDeleteHooks []NotificationHook
var notificationAfterUpsertHooks []NotificationHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Notification) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Notification) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Notification) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Notification) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Notification) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Notification) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Notification) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Notification) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Notification) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range notificationAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddNotificationHook registers your hook function for all future operations.
func AddNotificationHook(hookPoint boil.HookPoint, notificationHook NotificationHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		notificationBeforeInsertHooks = append(notificationBeforeInsertHooks, notificationHook)
	case boil.BeforeUpdateHook:
		notificationBeforeUpdateHooks = append(notificationBeforeUpdateHooks, notificationHook)
	case boil.BeforeDeleteHook:
		notificationBeforeDeleteHooks = append(notificationBeforeDeleteHooks, notificationHook)
	case boil.BeforeUpsertHook:
		notificationBeforeUpsertHooks = append(notificationBeforeUpsertHooks, notificationHook)
	case boil.AfterInsertHook:
		notificationAfterInsertHooks = append(notificationAfterInsertHooks, notificationHook)
	case boil.AfterSelectHook:
		notificationAfterSelectHooks = append(notificationAfterSelectHooks, notificationHook)
	case boil.AfterUpdateHook:
		notificationAfterUpdateHooks = append(notificationAfterUpdateHooks, notificationHook)
	case boil.AfterDeleteHook:
		notificationAfterDeleteHooks = append(notificationAfterDeleteHooks, notificationHook)
	case boil.AfterUpsertHook:
		notificationAfterUpsertHooks = append(notificationAfterUpsertHooks, notificationHook)
	}
}

// OneP returns a single notification record from the query, and panics on error.
func (q notificationQuery) OneP() *Notification {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single notification record from the query.
func (q notificationQuery) One() (*Notification, error) {
	o := &Notification{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for notification")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Notification records from the query, and panics on error.
func (q notificationQuery) AllP() NotificationSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Notification records from the query.
func (q notificationQuery) All() (NotificationSlice, error) {
	var o NotificationSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Notification slice")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Notification records in the query, and panics on error.
func (q notificationQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Notification records in the query.
func (q notificationQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count notification rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q notificationQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q notificationQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if notification exists")
	}

	return count > 0, nil
}

// AgentG pointed to by the foreign key.
func (o *Notification) AgentG(mods ...qm.QueryMod) partyQuery {
	return o.AgentByFk(boil.GetDB(), mods...)
}

// Agent pointed to by the foreign key.
func (o *Notification) AgentByFk(exec boil.Executor, mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Agent),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(exec, queryMods...)
	queries.SetFrom(query.Query, "\"party\"")

	return query
}

// AssetG pointed to by the foreign key.
func (o *Notification) AssetG(mods ...qm.QueryMod) assetQuery {
	return o.AssetByFk(boil.GetDB(), mods...)
}

// Asset pointed to by the foreign key.
func (o *Notification) AssetByFk(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Asset),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// CommentG pointed to by the foreign key.
func (o *Notification) CommentG(mods ...qm.QueryMod) commentQuery {
	return o.CommentByFk(boil.GetDB(), mods...)
}

// Comment pointed to by the foreign key.
func (o *Notification) CommentByFk(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Comment),
	}

	queryMods = append(queryMods, mods...)

	query := Comments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"comment\"")

	return query
}

// ContainerG pointed to by the foreign key.
func (o *Notification) ContainerG(mods ...qm.QueryMod) containerQuery {
	return o.ContainerByFk(boil.GetDB(), mods...)
}

// Container pointed to by the foreign key.
func (o *Notification) ContainerByFk(exec boil.Executor, mods ...qm.QueryMod) containerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Container),
	}

	queryMods = append(queryMods, mods...)

	query := Containers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"container\"")

	return query
}

// NoticeG pointed to by the foreign key.
func (o *Notification) NoticeG(mods ...qm.QueryMod) noticeQuery {
	return o.NoticeByFk(boil.GetDB(), mods...)
}

// Notice pointed to by the foreign key.
func (o *Notification) NoticeByFk(exec boil.Executor, mods ...qm.QueryMod) noticeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Notice),
	}

	queryMods = append(queryMods, mods...)

	query := Notices(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notice\"")

	return query
}

// PartyG pointed to by the foreign key.
func (o *Notification) PartyG(mods ...qm.QueryMod) partyQuery {
	return o.PartyByFk(boil.GetDB(), mods...)
}

// Party pointed to by the foreign key.
func (o *Notification) PartyByFk(exec boil.Executor, mods ...qm.QueryMod) partyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Party),
	}

	queryMods = append(queryMods, mods...)

	query := Parties(exec, queryMods...)
	queries.SetFrom(query.Query, "\"party\"")

	return query
}

// TagG pointed to by the foreign key.
func (o *Notification) TagG(mods ...qm.QueryMod) tagQuery {
	return o.TagByFk(boil.GetDB(), mods...)
}

// Tag pointed to by the foreign key.
func (o *Notification) TagByFk(exec boil.Executor, mods ...qm.QueryMod) tagQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Tag),
	}

	queryMods = append(queryMods, mods...)

	query := Tags(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tag\"")

	return query
}

// TargetG pointed to by the foreign key.
func (o *Notification) TargetG(mods ...qm.QueryMod) accountQuery {
	return o.TargetByFk(boil.GetDB(), mods...)
}

// Target pointed to by the foreign key.
func (o *Notification) TargetByFk(exec boil.Executor, mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Target),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// VolumeG pointed to by the foreign key.
func (o *Notification) VolumeG(mods ...qm.QueryMod) volumeQuery {
	return o.VolumeByFk(boil.GetDB(), mods...)
}

// Volume pointed to by the foreign key.
func (o *Notification) VolumeByFk(exec boil.Executor, mods ...qm.QueryMod) volumeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Volume),
	}

	queryMods = append(queryMods, mods...)

	query := Volumes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume\"")

	return query
}

// LoadAgent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadAgent(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Agent
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Agent
		}
	}

	query := fmt.Sprintf(
		"select * from \"party\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}
	defer results.Close()

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Agent = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Agent == foreign.ID {
				local.R.Agent = foreign
				break
			}
		}
	}

	return nil
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadAsset(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Asset
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Asset
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}
	defer results.Close()

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Asset = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Asset.Int == foreign.ID {
				local.R.Asset = foreign
				break
			}
		}
	}

	return nil
}

// LoadComment allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadComment(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Comment
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Comment
		}
	}

	query := fmt.Sprintf(
		"select * from \"comment\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}
	defer results.Close()

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Comment = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Comment.Int == foreign.ID {
				local.R.Comment = foreign
				break
			}
		}
	}

	return nil
}

// LoadContainer allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadContainer(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Container
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Container
		}
	}

	query := fmt.Sprintf(
		"select * from \"container\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Container")
	}
	defer results.Close()

	var resultSlice []*Container
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Container")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Container = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Container.Int == foreign.ID {
				local.R.Container = foreign
				break
			}
		}
	}

	return nil
}

// LoadNotice allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadNotice(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Notice
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Notice
		}
	}

	query := fmt.Sprintf(
		"select * from \"notice\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Notice")
	}
	defer results.Close()

	var resultSlice []*Notice
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Notice")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Notice = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Notice == foreign.ID {
				local.R.Notice = foreign
				break
			}
		}
	}

	return nil
}

// LoadParty allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadParty(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Party
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Party
		}
	}

	query := fmt.Sprintf(
		"select * from \"party\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Party")
	}
	defer results.Close()

	var resultSlice []*Party
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Party")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Party = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Party.Int == foreign.ID {
				local.R.Party = foreign
				break
			}
		}
	}

	return nil
}

// LoadTag allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadTag(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Tag
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Tag
		}
	}

	query := fmt.Sprintf(
		"select * from \"tag\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tag")
	}
	defer results.Close()

	var resultSlice []*Tag
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tag")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Tag = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Tag.Int == foreign.ID {
				local.R.Tag = foreign
				break
			}
		}
	}

	return nil
}

// LoadTarget allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadTarget(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Target
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Target
		}
	}

	query := fmt.Sprintf(
		"select * from \"account\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}
	defer results.Close()

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Target = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Target == foreign.ID {
				local.R.Target = foreign
				break
			}
		}
	}

	return nil
}

// LoadVolume allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (notificationL) LoadVolume(e boil.Executor, singular bool, maybeNotification interface{}) error {
	var slice []*Notification
	var object *Notification

	count := 1
	if singular {
		object = maybeNotification.(*Notification)
	} else {
		slice = *maybeNotification.(*NotificationSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &notificationR{}
		}
		args[0] = object.Volume
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &notificationR{}
			}
			args[i] = obj.Volume
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Volume")
	}
	defer results.Close()

	var resultSlice []*Volume
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Volume")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Volume = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Volume.Int == foreign.ID {
				local.R.Volume = foreign
				break
			}
		}
	}

	return nil
}

// SetAgentG of the notification to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentNotifications.
// Uses the global database handle.
func (o *Notification) SetAgentG(insert bool, related *Party) error {
	return o.SetAgent(boil.GetDB(), insert, related)
}

// SetAgentP of the notification to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentNotifications.
// Panics on error.
func (o *Notification) SetAgentP(exec boil.Executor, insert bool, related *Party) {
	if err := o.SetAgent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAgentGP of the notification to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentNotifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetAgentGP(insert bool, related *Party) {
	if err := o.SetAgent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAgent of the notification to the related item.
// Sets o.R.Agent to related.
// Adds o to related.R.AgentNotifications.
func (o *Notification) SetAgent(exec boil.Executor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"agent"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Agent = related.ID

	if o.R == nil {
		o.R = &notificationR{
			Agent: related,
		}
	} else {
		o.R.Agent = related
	}

	if related.R == nil {
		related.R = &partyR{
			AgentNotifications: NotificationSlice{o},
		}
	} else {
		related.R.AgentNotifications = append(related.R.AgentNotifications, o)
	}

	return nil
}

// SetAssetG of the notification to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetAssetG(insert bool, related *Asset) error {
	return o.SetAsset(boil.GetDB(), insert, related)
}

// SetAssetP of the notification to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetAssetP(exec boil.Executor, insert bool, related *Asset) {
	if err := o.SetAsset(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAssetGP of the notification to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetAssetGP(insert bool, related *Asset) {
	if err := o.SetAsset(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAsset of the notification to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetAsset(exec boil.Executor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Asset.Int = related.ID
	o.Asset.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveAssetG relationship.
// Sets o.R.Asset to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemoveAssetG(related *Asset) error {
	return o.RemoveAsset(boil.GetDB(), related)
}

// RemoveAssetP relationship.
// Sets o.R.Asset to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemoveAssetP(exec boil.Executor, related *Asset) {
	if err := o.RemoveAsset(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAssetGP relationship.
// Sets o.R.Asset to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemoveAssetGP(related *Asset) {
	if err := o.RemoveAsset(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveAsset relationship.
// Sets o.R.Asset to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveAsset(exec boil.Executor, related *Asset) error {
	var err error

	o.Asset.Valid = false
	if err = o.Update(exec, "asset"); err != nil {
		o.Asset.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Asset = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Asset.Int != ri.Asset.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetCommentG of the notification to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetCommentG(insert bool, related *Comment) error {
	return o.SetComment(boil.GetDB(), insert, related)
}

// SetCommentP of the notification to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetCommentP(exec boil.Executor, insert bool, related *Comment) {
	if err := o.SetComment(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCommentGP of the notification to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetCommentGP(insert bool, related *Comment) {
	if err := o.SetComment(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetComment of the notification to the related item.
// Sets o.R.Comment to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetComment(exec boil.Executor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"comment"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Comment.Int = related.ID
	o.Comment.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Comment: related,
		}
	} else {
		o.R.Comment = related
	}

	if related.R == nil {
		related.R = &commentR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveCommentG relationship.
// Sets o.R.Comment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemoveCommentG(related *Comment) error {
	return o.RemoveComment(boil.GetDB(), related)
}

// RemoveCommentP relationship.
// Sets o.R.Comment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemoveCommentP(exec boil.Executor, related *Comment) {
	if err := o.RemoveComment(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveCommentGP relationship.
// Sets o.R.Comment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemoveCommentGP(related *Comment) {
	if err := o.RemoveComment(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveComment relationship.
// Sets o.R.Comment to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveComment(exec boil.Executor, related *Comment) error {
	var err error

	o.Comment.Valid = false
	if err = o.Update(exec, "comment"); err != nil {
		o.Comment.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Comment = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Comment.Int != ri.Comment.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetContainerG of the notification to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetContainerG(insert bool, related *Container) error {
	return o.SetContainer(boil.GetDB(), insert, related)
}

// SetContainerP of the notification to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetContainerP(exec boil.Executor, insert bool, related *Container) {
	if err := o.SetContainer(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainerGP of the notification to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetContainerGP(insert bool, related *Container) {
	if err := o.SetContainer(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainer of the notification to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetContainer(exec boil.Executor, insert bool, related *Container) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Container.Int = related.ID
	o.Container.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Container: related,
		}
	} else {
		o.R.Container = related
	}

	if related.R == nil {
		related.R = &containerR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveContainerG relationship.
// Sets o.R.Container to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemoveContainerG(related *Container) error {
	return o.RemoveContainer(boil.GetDB(), related)
}

// RemoveContainerP relationship.
// Sets o.R.Container to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemoveContainerP(exec boil.Executor, related *Container) {
	if err := o.RemoveContainer(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveContainerGP relationship.
// Sets o.R.Container to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemoveContainerGP(related *Container) {
	if err := o.RemoveContainer(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveContainer relationship.
// Sets o.R.Container to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveContainer(exec boil.Executor, related *Container) error {
	var err error

	o.Container.Valid = false
	if err = o.Update(exec, "container"); err != nil {
		o.Container.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Container = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Container.Int != ri.Container.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetNoticeG of the notification to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetNoticeG(insert bool, related *Notice) error {
	return o.SetNotice(boil.GetDB(), insert, related)
}

// SetNoticeP of the notification to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetNoticeP(exec boil.Executor, insert bool, related *Notice) {
	if err := o.SetNotice(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNoticeGP of the notification to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetNoticeGP(insert bool, related *Notice) {
	if err := o.SetNotice(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotice of the notification to the related item.
// Sets o.R.Notice to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetNotice(exec boil.Executor, insert bool, related *Notice) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"notice"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Notice = related.ID

	if o.R == nil {
		o.R = &notificationR{
			Notice: related,
		}
	} else {
		o.R.Notice = related
	}

	if related.R == nil {
		related.R = &noticeR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// SetPartyG of the notification to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetPartyG(insert bool, related *Party) error {
	return o.SetParty(boil.GetDB(), insert, related)
}

// SetPartyP of the notification to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetPartyP(exec boil.Executor, insert bool, related *Party) {
	if err := o.SetParty(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetPartyGP of the notification to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetPartyGP(insert bool, related *Party) {
	if err := o.SetParty(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParty of the notification to the related item.
// Sets o.R.Party to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetParty(exec boil.Executor, insert bool, related *Party) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"party"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Party.Int = related.ID
	o.Party.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Party: related,
		}
	} else {
		o.R.Party = related
	}

	if related.R == nil {
		related.R = &partyR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemovePartyG relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemovePartyG(related *Party) error {
	return o.RemoveParty(boil.GetDB(), related)
}

// RemovePartyP relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemovePartyP(exec boil.Executor, related *Party) {
	if err := o.RemoveParty(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemovePartyGP relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemovePartyGP(related *Party) {
	if err := o.RemoveParty(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParty relationship.
// Sets o.R.Party to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveParty(exec boil.Executor, related *Party) error {
	var err error

	o.Party.Valid = false
	if err = o.Update(exec, "party"); err != nil {
		o.Party.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Party = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Party.Int != ri.Party.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetTagG of the notification to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetTagG(insert bool, related *Tag) error {
	return o.SetTag(boil.GetDB(), insert, related)
}

// SetTagP of the notification to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetTagP(exec boil.Executor, insert bool, related *Tag) {
	if err := o.SetTag(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTagGP of the notification to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetTagGP(insert bool, related *Tag) {
	if err := o.SetTag(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTag of the notification to the related item.
// Sets o.R.Tag to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetTag(exec boil.Executor, insert bool, related *Tag) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tag"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Tag.Int = related.ID
	o.Tag.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Tag: related,
		}
	} else {
		o.R.Tag = related
	}

	if related.R == nil {
		related.R = &tagR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveTagG relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemoveTagG(related *Tag) error {
	return o.RemoveTag(boil.GetDB(), related)
}

// RemoveTagP relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemoveTagP(exec boil.Executor, related *Tag) {
	if err := o.RemoveTag(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTagGP relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemoveTagGP(related *Tag) {
	if err := o.RemoveTag(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveTag relationship.
// Sets o.R.Tag to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveTag(exec boil.Executor, related *Tag) error {
	var err error

	o.Tag.Valid = false
	if err = o.Update(exec, "tag"); err != nil {
		o.Tag.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Tag = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Tag.Int != ri.Tag.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// SetTargetG of the notification to the related item.
// Sets o.R.Target to related.
// Adds o to related.R.TargetNotifications.
// Uses the global database handle.
func (o *Notification) SetTargetG(insert bool, related *Account) error {
	return o.SetTarget(boil.GetDB(), insert, related)
}

// SetTargetP of the notification to the related item.
// Sets o.R.Target to related.
// Adds o to related.R.TargetNotifications.
// Panics on error.
func (o *Notification) SetTargetP(exec boil.Executor, insert bool, related *Account) {
	if err := o.SetTarget(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTargetGP of the notification to the related item.
// Sets o.R.Target to related.
// Adds o to related.R.TargetNotifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetTargetGP(insert bool, related *Account) {
	if err := o.SetTarget(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTarget of the notification to the related item.
// Sets o.R.Target to related.
// Adds o to related.R.TargetNotifications.
func (o *Notification) SetTarget(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"target"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Target = related.ID

	if o.R == nil {
		o.R = &notificationR{
			Target: related,
		}
	} else {
		o.R.Target = related
	}

	if related.R == nil {
		related.R = &accountR{
			TargetNotifications: NotificationSlice{o},
		}
	} else {
		related.R.TargetNotifications = append(related.R.TargetNotifications, o)
	}

	return nil
}

// SetVolumeG of the notification to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Notifications.
// Uses the global database handle.
func (o *Notification) SetVolumeG(insert bool, related *Volume) error {
	return o.SetVolume(boil.GetDB(), insert, related)
}

// SetVolumeP of the notification to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Notifications.
// Panics on error.
func (o *Notification) SetVolumeP(exec boil.Executor, insert bool, related *Volume) {
	if err := o.SetVolume(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeGP of the notification to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Notifications.
// Uses the global database handle and panics on error.
func (o *Notification) SetVolumeGP(insert bool, related *Volume) {
	if err := o.SetVolume(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolume of the notification to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Notifications.
func (o *Notification) SetVolume(exec boil.Executor, insert bool, related *Volume) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
		strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Volume.Int = related.ID
	o.Volume.Valid = true

	if o.R == nil {
		o.R = &notificationR{
			Volume: related,
		}
	} else {
		o.R.Volume = related
	}

	if related.R == nil {
		related.R = &volumeR{
			Notifications: NotificationSlice{o},
		}
	} else {
		related.R.Notifications = append(related.R.Notifications, o)
	}

	return nil
}

// RemoveVolumeG relationship.
// Sets o.R.Volume to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Notification) RemoveVolumeG(related *Volume) error {
	return o.RemoveVolume(boil.GetDB(), related)
}

// RemoveVolumeP relationship.
// Sets o.R.Volume to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Notification) RemoveVolumeP(exec boil.Executor, related *Volume) {
	if err := o.RemoveVolume(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveVolumeGP relationship.
// Sets o.R.Volume to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Notification) RemoveVolumeGP(related *Volume) {
	if err := o.RemoveVolume(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveVolume relationship.
// Sets o.R.Volume to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Notification) RemoveVolume(exec boil.Executor, related *Volume) error {
	var err error

	o.Volume.Valid = false
	if err = o.Update(exec, "volume"); err != nil {
		o.Volume.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Volume = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Notifications {
		if o.Volume.Int != ri.Volume.Int {
			continue
		}

		ln := len(related.R.Notifications)
		if ln > 1 && i < ln-1 {
			related.R.Notifications[i] = related.R.Notifications[ln-1]
		}
		related.R.Notifications = related.R.Notifications[:ln-1]
		break
	}
	return nil
}

// NotificationsG retrieves all records.
func NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return Notifications(boil.GetDB(), mods...)
}

// Notifications retrieves all the records using an executor.
func Notifications(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	mods = append(mods, qm.From("\"notification\""))
	return notificationQuery{NewQuery(exec, mods...)}
}

// FindNotificationG retrieves a single record by ID.
func FindNotificationG(id int, selectCols ...string) (*Notification, error) {
	return FindNotification(boil.GetDB(), id, selectCols...)
}

// FindNotificationGP retrieves a single record by ID, and panics on error.
func FindNotificationGP(id int, selectCols ...string) *Notification {
	retobj, err := FindNotification(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindNotification retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindNotification(exec boil.Executor, id int, selectCols ...string) (*Notification, error) {
	notificationObj := &Notification{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"notification\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(notificationObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from notification")
	}

	return notificationObj, nil
}

// FindNotificationP retrieves a single record by ID with an executor, and panics on error.
func FindNotificationP(exec boil.Executor, id int, selectCols ...string) *Notification {
	retobj, err := FindNotification(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Notification) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Notification) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Notification) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Notification) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no notification provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	notificationInsertCacheMut.RLock()
	cache, cached := notificationInsertCache[key]
	notificationInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			notificationColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"notification\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"notification\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into notification")
	}

	if !cached {
		notificationInsertCacheMut.Lock()
		notificationInsertCache[key] = cache
		notificationInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Notification record. See Update for
// whitelist behavior description.
func (o *Notification) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Notification record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Notification) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Notification, and panics on error.
// See Update for whitelist behavior description.
func (o *Notification) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Notification.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Notification) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	notificationUpdateCacheMut.RLock()
	cache, cached := notificationUpdateCache[key]
	notificationUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(notificationColumns, notificationPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update notification, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"notification\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, notificationPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, append(wl, notificationPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update notification row")
	}

	if !cached {
		notificationUpdateCacheMut.Lock()
		notificationUpdateCache[key] = cache
		notificationUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q notificationQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q notificationQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for notification")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o NotificationSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o NotificationSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o NotificationSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o NotificationSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"notification\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(notificationPrimaryKeyColumns), len(colNames)+1, len(notificationPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in notification slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Notification) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Notification) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Notification) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Notification) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no notification provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(notificationColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	notificationUpsertCacheMut.RLock()
	cache, cached := notificationUpsertCache[key]
	notificationUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			notificationColumns,
			notificationColumnsWithDefault,
			notificationColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			notificationColumns,
			notificationPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert notification, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(notificationPrimaryKeyColumns))
			copy(conflict, notificationPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"notification\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(notificationType, notificationMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(notificationType, notificationMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert notification")
	}

	if !cached {
		notificationUpsertCacheMut.Lock()
		notificationUpsertCache[key] = cache
		notificationUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Notification record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Notification) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Notification record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Notification) DeleteG() error {
	if o == nil {
		return errors.New("public: no Notification provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Notification record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Notification) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Notification record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Notification) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Notification provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), notificationPrimaryKeyMapping)
	query := "DELETE FROM \"notification\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from notification")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q notificationQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q notificationQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no notificationQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from notification")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o NotificationSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o NotificationSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Notification slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o NotificationSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o NotificationSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Notification slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(notificationBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"notification\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, notificationPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(notificationPrimaryKeyColumns), 1, len(notificationPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from notification slice")
	}

	if len(notificationAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Notification) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Notification) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Notification) ReloadG() error {
	if o == nil {
		return errors.New("public: no Notification provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Notification) Reload(exec boil.Executor) error {
	ret, err := FindNotification(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NotificationSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *NotificationSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty NotificationSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *NotificationSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	notifications := NotificationSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), notificationPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"notification\".* FROM \"notification\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, notificationPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(notificationPrimaryKeyColumns), 1, len(notificationPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&notifications)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in NotificationSlice")
	}

	*o = notifications

	return nil
}

// NotificationExists checks if the Notification row exists.
func NotificationExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"notification\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if notification exists")
	}

	return exists, nil
}

// NotificationExistsG checks if the Notification row exists.
func NotificationExistsG(id int) (bool, error) {
	return NotificationExists(boil.GetDB(), id)
}

// NotificationExistsGP checks if the Notification row exists. Panics on error.
func NotificationExistsGP(id int) bool {
	e, err := NotificationExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// NotificationExistsP checks if the Notification row exists. Panics on error.
func NotificationExistsP(exec boil.Executor, id int) bool {
	e, err := NotificationExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
