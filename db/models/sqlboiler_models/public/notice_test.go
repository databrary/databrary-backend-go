// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testNotices(t *testing.T) {
	t.Parallel()

	query := Notices(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testNoticesLive(t *testing.T) {
	all, err := Notices(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Notices err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM notice) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM notice) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("NoticesLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testNoticesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notice.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notices(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NoticeSlice{notice}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testNoticesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := NoticeExists(tx, notice.ID)
	if err != nil {
		t.Errorf("Unable to check if Notice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected NoticeExistsG to return true, but got false.")
	}
}

func testNoticesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	noticeFound, err := FindNotice(tx, notice.ID)
	if err != nil {
		t.Error(err)
	}

	if noticeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testNoticesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Notices(tx).Bind(notice); err != nil {
		t.Error(err)
	}
}

func testNoticesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Notices(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testNoticesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	noticeOne := &Notice{}
	noticeTwo := &Notice{}
	if err = randomize.Struct(seed, noticeOne, noticeDBTypes, false, noticeColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	if err = randomize.Struct(seed, noticeTwo, noticeDBTypes, false, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	noticeOne.Delivery = custom_types.NoticeDeliveryRandom()
	noticeTwo.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = noticeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = noticeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testNoticesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	noticeOne := &Notice{}
	noticeTwo := &Notice{}
	if err = randomize.Struct(seed, noticeOne, noticeDBTypes, false, noticeColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	if err = randomize.Struct(seed, noticeTwo, noticeDBTypes, false, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	noticeOne.Delivery = custom_types.NoticeDeliveryRandom()
	noticeTwo.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = noticeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = noticeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func noticeBeforeInsertHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeAfterInsertHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeAfterSelectHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeBeforeUpdateHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeAfterUpdateHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeBeforeDeleteHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeAfterDeleteHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeBeforeUpsertHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func noticeAfterUpsertHook(e boil.Executor, o *Notice) error {
	*o = Notice{}
	return nil
}

func testNoticesHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	empty := &Notice{}

	AddNoticeHook(boil.BeforeInsertHook, noticeBeforeInsertHook)
	if err = notice.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", notice)
	}
	noticeBeforeInsertHooks = []NoticeHook{}

	AddNoticeHook(boil.AfterInsertHook, noticeAfterInsertHook)
	if err = notice.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", notice)
	}
	noticeAfterInsertHooks = []NoticeHook{}

	AddNoticeHook(boil.AfterSelectHook, noticeAfterSelectHook)
	if err = notice.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", notice)
	}
	noticeAfterSelectHooks = []NoticeHook{}

	AddNoticeHook(boil.BeforeUpdateHook, noticeBeforeUpdateHook)
	if err = notice.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", notice)
	}
	noticeBeforeUpdateHooks = []NoticeHook{}

	AddNoticeHook(boil.AfterUpdateHook, noticeAfterUpdateHook)
	if err = notice.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", notice)
	}
	noticeAfterUpdateHooks = []NoticeHook{}

	AddNoticeHook(boil.BeforeDeleteHook, noticeBeforeDeleteHook)
	if err = notice.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", notice)
	}
	noticeBeforeDeleteHooks = []NoticeHook{}

	AddNoticeHook(boil.AfterDeleteHook, noticeAfterDeleteHook)
	if err = notice.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", notice)
	}
	noticeAfterDeleteHooks = []NoticeHook{}

	AddNoticeHook(boil.BeforeUpsertHook, noticeBeforeUpsertHook)
	if err = notice.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", notice)
	}
	noticeBeforeUpsertHooks = []NoticeHook{}

	AddNoticeHook(boil.AfterUpsertHook, noticeAfterUpsertHook)
	if err = notice.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(notice, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", notice)
	}
	noticeAfterUpsertHooks = []NoticeHook{}
}
func testNoticesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoticesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx, noticeColumns...); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testNoticeToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notice
	var b, c Notification

	foreignBlacklist := notificationColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	b.Delivered = custom_types.NoticeDeliveryRandom()
	c.Delivered = custom_types.NoticeDeliveryRandom()
	b.Permission = custom_types.NullPermissionRandom()
	c.Permission = custom_types.NullPermissionRandom()
	b.Segment = custom_types.NullSegmentRandom()
	c.Segment = custom_types.NullSegmentRandom()
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()

	localBlacklist := noticeColumnsWithDefault
	localBlacklist = append(localBlacklist, noticeColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, noticeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	a.Delivery = custom_types.NoticeDeliveryRandom()

	b.Notice = a.ID
	c.Notice = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Notice == b.Notice {
			bFound = true
		}
		if v.Notice == c.Notice {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NoticeSlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testNoticeToManyNotifies(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Notice
	var b, c Notify

	foreignBlacklist := notifyColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notifyColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notifyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notify struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notifyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notify struct: %s", err)
	}
	b.Delivery = custom_types.NoticeDeliveryRandom()
	c.Delivery = custom_types.NoticeDeliveryRandom()

	localBlacklist := noticeColumnsWithDefault
	localBlacklist = append(localBlacklist, noticeColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, noticeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}
	a.Delivery = custom_types.NoticeDeliveryRandom()

	b.Notice = a.ID
	c.Notice = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notify, err := a.NotifiesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notify {
		if v.Notice == b.Notice {
			bFound = true
		}
		if v.Notice == c.Notice {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := NoticeSlice{&a}
	if err = a.L.LoadNotifies(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifies = nil
	if err = a.L.LoadNotifies(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notify)
	}
}

func testNoticeToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notice
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, noticeColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, noticeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Delivery = custom_types.NoticeDeliveryRandom()

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Notice {
			t.Error("foreign key was wrong value", a.ID, first.Notice)
		}
		if a.ID != second.Notice {
			t.Error("foreign key was wrong value", a.ID, second.Notice)
		}

		if first.R.Notice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Notice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testNoticeToManyAddOpNotifies(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Notice
	var b, c, d, e Notify

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(noticePrimaryKeyColumns, noticeColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, noticeColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, noticeDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Delivery = custom_types.NoticeDeliveryRandom()

	foreignComplementList := strmangle.SetComplement(notifyPrimaryKeyColumns, notifyColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notifyColumnsWithCustom...)

	foreigners := []*Notify{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notifyDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivery = custom_types.NoticeDeliveryRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notify{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifies(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Notice {
			t.Error("foreign key was wrong value", a.ID, first.Notice)
		}
		if a.ID != second.Notice {
			t.Error("foreign key was wrong value", a.ID, second.Notice)
		}

		if first.R.Notice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Notice != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotifiesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testNoticesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = notice.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testNoticesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := NoticeSlice{notice}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testNoticesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Notices(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	noticeDBTypes = map[string]string{`Delivery`: `enum.notice_delivery('none','site','weekly','daily','async')`, `ID`: `smallint`, `Name`: `character varying`}
	_             = bytes.MinRead
)

func testNoticesUpdate(t *testing.T) {
	t.Parallel()

	if len(noticeColumns) == len(noticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := noticeColumnsWithDefault
	blacklist = append(blacklist, noticeColumnsWithCustom...)

	if err = randomize.Struct(seed, notice, noticeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	if err = notice.Update(tx); err != nil {
		t.Error(err)
	}
}

func testNoticesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(noticeColumns) == len(noticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := noticePrimaryKeyColumns
	blacklist = append(blacklist, noticeColumnsWithCustom...)

	if err = randomize.Struct(seed, notice, noticeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(noticeColumns, noticePrimaryKeyColumns) {
		fields = noticeColumns
	} else {
		fields = strmangle.SetComplement(
			noticeColumns,
			noticePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(notice))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := NoticeSlice{notice}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testNoticesUpsert(t *testing.T) {
	t.Parallel()

	if len(noticeColumns) == len(noticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	notice := &Notice{}
	if err = randomize.Struct(seed, notice, noticeDBTypes, true, noticeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = notice.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notice: %s", err)
	}

	count, err := Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := noticePrimaryKeyColumns

	blacklist = append(blacklist, noticeColumnsWithCustom...)

	if err = randomize.Struct(seed, notice, noticeDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Notice struct: %s", err)
	}

	notice.Delivery = custom_types.NoticeDeliveryRandom()

	if err = notice.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Notice: %s", err)
	}

	count, err = Notices(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
