// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/databrary/sqlboiler/types"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Metric is an object representing the database table.
type Metric struct {
	ID          int                      `db:"id" json:"metric_id"`
	Category    int16                    `db:"category" json:"metric_category"`
	Name        string                   `db:"name" json:"metric_name"`
	Release     custom_types.NullRelease `db:"release" json:"metric_release,omitempty"`
	Type        custom_types.DataType    `db:"type" json:"metric_type"`
	Options     types.StringArray        `db:"options" json:"metric_options"`
	Assumed     null.String              `db:"assumed" json:"metric_assumed,omitempty"`
	Description null.String              `db:"description" json:"metric_description,omitempty"`
	Required    null.Bool                `db:"required" json:"metric_required,omitempty"`

	R *metricR `db:"-" json:"-"`
	L metricL  `db:"-" json:"-"`
}

// metricR is where relationships are stored.
type metricR struct {
	Category        *Category
	Records         RecordSlice
	MeasureDates    MeasureDateSlice
	MeasureNumerics MeasureNumericSlice
	MeasureTexts    MeasureTextSlice
	Volumes         VolumeSlice
}

// metricL is where Load methods for each relationship are stored.
type metricL struct{}

var (
	metricColumns               = []string{"id", "category", "name", "release", "type", "options", "assumed", "description", "required"}
	metricColumnsWithoutDefault = []string{"category", "name", "release", "type", "assumed", "description", "required"}
	metricColumnsWithDefault    = []string{"id", "options"}
	metricColumnsWithCustom     = []string{"release", "type"}

	metricPrimaryKeyColumns = []string{"id"}
)

type (
	// MetricSlice is an alias for a slice of pointers to Metric.
	// This should generally be used opposed to []Metric.
	MetricSlice []*Metric
	// MetricHook is the signature for custom Metric hook methods
	MetricHook func(boil.Executor, *Metric) error

	metricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	metricType    = reflect.TypeOf(&Metric{})
	metricMapping = queries.MakeStructMapping(metricType)

	metricPrimaryKeyMapping, _ = queries.BindMapping(metricType, metricMapping, metricPrimaryKeyColumns)

	metricInsertCacheMut sync.RWMutex
	metricInsertCache    = make(map[string]insertCache)
	metricUpdateCacheMut sync.RWMutex
	metricUpdateCache    = make(map[string]updateCache)
	metricUpsertCacheMut sync.RWMutex
	metricUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var metricBeforeInsertHooks []MetricHook
var metricBeforeUpdateHooks []MetricHook
var metricBeforeDeleteHooks []MetricHook
var metricBeforeUpsertHooks []MetricHook

var metricAfterInsertHooks []MetricHook
var metricAfterSelectHooks []MetricHook
var metricAfterUpdateHooks []MetricHook
var metricAfterDeleteHooks []MetricHook
var metricAfterUpsertHooks []MetricHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Metric) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range metricBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Metric) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range metricBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Metric) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range metricBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Metric) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range metricBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Metric) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range metricAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Metric) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range metricAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Metric) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range metricAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Metric) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range metricAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Metric) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range metricAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMetricHook registers your hook function for all future operations.
func AddMetricHook(hookPoint boil.HookPoint, metricHook MetricHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		metricBeforeInsertHooks = append(metricBeforeInsertHooks, metricHook)
	case boil.BeforeUpdateHook:
		metricBeforeUpdateHooks = append(metricBeforeUpdateHooks, metricHook)
	case boil.BeforeDeleteHook:
		metricBeforeDeleteHooks = append(metricBeforeDeleteHooks, metricHook)
	case boil.BeforeUpsertHook:
		metricBeforeUpsertHooks = append(metricBeforeUpsertHooks, metricHook)
	case boil.AfterInsertHook:
		metricAfterInsertHooks = append(metricAfterInsertHooks, metricHook)
	case boil.AfterSelectHook:
		metricAfterSelectHooks = append(metricAfterSelectHooks, metricHook)
	case boil.AfterUpdateHook:
		metricAfterUpdateHooks = append(metricAfterUpdateHooks, metricHook)
	case boil.AfterDeleteHook:
		metricAfterDeleteHooks = append(metricAfterDeleteHooks, metricHook)
	case boil.AfterUpsertHook:
		metricAfterUpsertHooks = append(metricAfterUpsertHooks, metricHook)
	}
}

// OneP returns a single metric record from the query, and panics on error.
func (q metricQuery) OneP() *Metric {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single metric record from the query.
func (q metricQuery) One() (*Metric, error) {
	o := &Metric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for metric")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Metric records from the query, and panics on error.
func (q metricQuery) AllP() MetricSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Metric records from the query.
func (q metricQuery) All() (MetricSlice, error) {
	var o MetricSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Metric slice")
	}

	if len(metricAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Metric records in the query, and panics on error.
func (q metricQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Metric records in the query.
func (q metricQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count metric rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q metricQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q metricQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if metric exists")
	}

	return count > 0, nil
}

// CategoryG pointed to by the foreign key.
func (o *Metric) CategoryG(mods ...qm.QueryMod) categoryQuery {
	return o.CategoryByFk(boil.GetDB(), mods...)
}

// Category pointed to by the foreign key.
func (o *Metric) CategoryByFk(exec boil.Executor, mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Category),
	}

	queryMods = append(queryMods, mods...)

	query := Categories(exec, queryMods...)
	queries.SetFrom(query.Query, "\"category\"")

	return query
}

// RecordsG retrieves all the record's record.
func (o *Metric) RecordsG(mods ...qm.QueryMod) recordQuery {
	return o.RecordsByFk(boil.GetDB(), mods...)
}

// Records retrieves all the record's record with an executor.
func (o *Metric) RecordsByFk(exec boil.Executor, mods ...qm.QueryMod) recordQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"measure_abstract\" as \"b\" on \"a\".\"id\" = \"b\".\"record\""),
		qm.Where("\"b\".\"metric\"=?", o.ID),
	)

	query := Records(exec, queryMods...)
	queries.SetFrom(query.Query, "\"record\" as \"a\"")
	return query
}

// MeasureDatesG retrieves all the measure_date's measure date.
func (o *Metric) MeasureDatesG(mods ...qm.QueryMod) measureDateQuery {
	return o.MeasureDatesByFk(boil.GetDB(), mods...)
}

// MeasureDates retrieves all the measure_date's measure date with an executor.
func (o *Metric) MeasureDatesByFk(exec boil.Executor, mods ...qm.QueryMod) measureDateQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"metric\"=?", o.ID),
	)

	query := MeasureDates(exec, queryMods...)
	queries.SetFrom(query.Query, "\"measure_date\" as \"a\"")
	return query
}

// MeasureNumericsG retrieves all the measure_numeric's measure numeric.
func (o *Metric) MeasureNumericsG(mods ...qm.QueryMod) measureNumericQuery {
	return o.MeasureNumericsByFk(boil.GetDB(), mods...)
}

// MeasureNumerics retrieves all the measure_numeric's measure numeric with an executor.
func (o *Metric) MeasureNumericsByFk(exec boil.Executor, mods ...qm.QueryMod) measureNumericQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"metric\"=?", o.ID),
	)

	query := MeasureNumerics(exec, queryMods...)
	queries.SetFrom(query.Query, "\"measure_numeric\" as \"a\"")
	return query
}

// MeasureTextsG retrieves all the measure_text's measure text.
func (o *Metric) MeasureTextsG(mods ...qm.QueryMod) measureTextQuery {
	return o.MeasureTextsByFk(boil.GetDB(), mods...)
}

// MeasureTexts retrieves all the measure_text's measure text with an executor.
func (o *Metric) MeasureTextsByFk(exec boil.Executor, mods ...qm.QueryMod) measureTextQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"metric\"=?", o.ID),
	)

	query := MeasureTexts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"measure_text\" as \"a\"")
	return query
}

// VolumesG retrieves all the volume's volume.
func (o *Metric) VolumesG(mods ...qm.QueryMod) volumeQuery {
	return o.VolumesByFk(boil.GetDB(), mods...)
}

// Volumes retrieves all the volume's volume with an executor.
func (o *Metric) VolumesByFk(exec boil.Executor, mods ...qm.QueryMod) volumeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"volume_metric\" as \"b\" on \"a\".\"id\" = \"b\".\"volume\""),
		qm.Where("\"b\".\"metric\"=?", o.ID),
	)

	query := Volumes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume\" as \"a\"")
	return query
}

// LoadCategory allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadCategory(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.Category
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.Category
		}
	}

	query := fmt.Sprintf(
		"select * from \"category\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}
	defer results.Close()

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if len(metricAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Category = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Category == foreign.ID {
				local.R.Category = foreign
				break
			}
		}
	}

	return nil
}

// LoadRecords allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadRecords(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"metric\" from \"record\" as \"a\" inner join \"measure_abstract\" as \"b\" on \"a\".\"id\" = \"b\".\"record\" where \"b\".\"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record")
	}
	defer results.Close()

	var resultSlice []*Record

	var localJoinCols []int
	for results.Next() {
		one := new(Record)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Volume, &one.Category, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice record")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice record")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Records = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Records = append(local.R.Records, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMeasureDates allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadMeasureDates(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"measure_date\" where \"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load measure_date")
	}
	defer results.Close()

	var resultSlice []*MeasureDate
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice measure_date")
	}

	if len(measureDateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MeasureDates = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Metric {
				local.R.MeasureDates = append(local.R.MeasureDates, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMeasureNumerics allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadMeasureNumerics(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"measure_numeric\" where \"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load measure_numeric")
	}
	defer results.Close()

	var resultSlice []*MeasureNumeric
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice measure_numeric")
	}

	if len(measureNumericAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MeasureNumerics = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Metric {
				local.R.MeasureNumerics = append(local.R.MeasureNumerics, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMeasureTexts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadMeasureTexts(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"measure_text\" where \"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load measure_text")
	}
	defer results.Close()

	var resultSlice []*MeasureText
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice measure_text")
	}

	if len(measureTextAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MeasureTexts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Metric {
				local.R.MeasureTexts = append(local.R.MeasureTexts, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (metricL) LoadVolumes(e boil.Executor, singular bool, maybeMetric interface{}) error {
	var slice []*Metric
	var object *Metric

	count := 1
	if singular {
		object = maybeMetric.(*Metric)
	} else {
		slice = *maybeMetric.(*MetricSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &metricR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &metricR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"metric\" from \"volume\" as \"a\" inner join \"volume_metric\" as \"b\" on \"a\".\"id\" = \"b\".\"volume\" where \"b\".\"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume")
	}
	defer results.Close()

	var resultSlice []*Volume

	var localJoinCols []int
	for results.Next() {
		one := new(Volume)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Name, &one.Body, &one.Alias, &one.Doi, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice volume")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice volume")
	}

	if len(volumeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Volumes = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Volumes = append(local.R.Volumes, foreign)
				break
			}
		}
	}

	return nil
}

// SetCategoryG of the metric to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Metrics.
// Uses the global database handle.
func (o *Metric) SetCategoryG(insert bool, related *Category) error {
	return o.SetCategory(boil.GetDB(), insert, related)
}

// SetCategoryP of the metric to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Metrics.
// Panics on error.
func (o *Metric) SetCategoryP(exec boil.Executor, insert bool, related *Category) {
	if err := o.SetCategory(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategoryGP of the metric to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Metrics.
// Uses the global database handle and panics on error.
func (o *Metric) SetCategoryGP(insert bool, related *Category) {
	if err := o.SetCategory(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetCategory of the metric to the related item.
// Sets o.R.Category to related.
// Adds o to related.R.Metrics.
func (o *Metric) SetCategory(exec boil.Executor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"metric\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"category"}),
		strmangle.WhereClause("\"", "\"", 2, metricPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Category = related.ID

	if o.R == nil {
		o.R = &metricR{
			Category: related,
		}
	} else {
		o.R.Category = related
	}

	if related.R == nil {
		related.R = &categoryR{
			Metrics: MetricSlice{o},
		}
	} else {
		related.R.Metrics = append(related.R.Metrics, o)
	}

	return nil
}

// AddRecordsG adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Metrics appropriately.
// Uses the global database handle.
func (o *Metric) AddRecordsG(insert bool, related ...*Record) error {
	return o.AddRecords(boil.GetDB(), insert, related...)
}

// AddRecordsP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Metrics appropriately.
// Panics on error.
func (o *Metric) AddRecordsP(exec boil.Executor, insert bool, related ...*Record) {
	if err := o.AddRecords(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRecordsGP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Metrics appropriately.
// Uses the global database handle and panics on error.
func (o *Metric) AddRecordsGP(insert bool, related ...*Record) {
	if err := o.AddRecords(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRecords adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Metrics appropriately.
func (o *Metric) AddRecords(exec boil.Executor, insert bool, related ...*Record) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"measure_abstract\" (\"metric\", \"record\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &metricR{
			Records: related,
		}
	} else {
		o.R.Records = append(o.R.Records, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordR{
				Metrics: MetricSlice{o},
			}
		} else {
			rel.R.Metrics = append(rel.R.Metrics, o)
		}
	}
	return nil
}

// SetRecordsG removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.Metrics's Records accordingly.
// Uses the global database handle.
func (o *Metric) SetRecordsG(insert bool, related ...*Record) error {
	return o.SetRecords(boil.GetDB(), insert, related...)
}

// SetRecordsP removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.Metrics's Records accordingly.
// Panics on error.
func (o *Metric) SetRecordsP(exec boil.Executor, insert bool, related ...*Record) {
	if err := o.SetRecords(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRecordsGP removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.Metrics's Records accordingly.
// Uses the global database handle and panics on error.
func (o *Metric) SetRecordsGP(insert bool, related ...*Record) {
	if err := o.SetRecords(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetRecords removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Records accordingly.
// Replaces o.R.Records with related.
// Sets related.R.Metrics's Records accordingly.
func (o *Metric) SetRecords(exec boil.Executor, insert bool, related ...*Record) error {
	query := "delete from \"measure_abstract\" where \"metric\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeRecordsFromMetricsSlice(o, related)
	if o.R != nil {
		o.R.Records = nil
	}
	return o.AddRecords(exec, insert, related...)
}

// RemoveRecordsG relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Uses the global database handle.
func (o *Metric) RemoveRecordsG(related ...*Record) error {
	return o.RemoveRecords(boil.GetDB(), related...)
}

// RemoveRecordsP relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Panics on error.
func (o *Metric) RemoveRecordsP(exec boil.Executor, related ...*Record) {
	if err := o.RemoveRecords(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRecordsGP relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Uses the global database handle and panics on error.
func (o *Metric) RemoveRecordsGP(related ...*Record) {
	if err := o.RemoveRecords(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveRecords relationships from objects passed in.
// Removes related items from R.Records (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
func (o *Metric) RemoveRecords(exec boil.Executor, related ...*Record) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"measure_abstract\" where \"metric\" = $1 and \"record\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeRecordsFromMetricsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Records {
			if rel != ri {
				continue
			}

			ln := len(o.R.Records)
			if ln > 1 && i < ln-1 {
				o.R.Records[i] = o.R.Records[ln-1]
			}
			o.R.Records = o.R.Records[:ln-1]
			break
		}
	}

	return nil
}

func removeRecordsFromMetricsSlice(o *Metric, related []*Record) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Metrics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Metrics)
			if ln > 1 && i < ln-1 {
				rel.R.Metrics[i] = rel.R.Metrics[ln-1]
			}
			rel.R.Metrics = rel.R.Metrics[:ln-1]
			break
		}
	}
}

// AddMeasureDatesG adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureDates.
// Sets related.R.Metric appropriately.
// Uses the global database handle.
func (o *Metric) AddMeasureDatesG(insert bool, related ...*MeasureDate) error {
	return o.AddMeasureDates(boil.GetDB(), insert, related...)
}

// AddMeasureDatesP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureDates.
// Sets related.R.Metric appropriately.
// Panics on error.
func (o *Metric) AddMeasureDatesP(exec boil.Executor, insert bool, related ...*MeasureDate) {
	if err := o.AddMeasureDates(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureDatesGP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureDates.
// Sets related.R.Metric appropriately.
// Uses the global database handle and panics on error.
func (o *Metric) AddMeasureDatesGP(insert bool, related ...*MeasureDate) {
	if err := o.AddMeasureDates(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureDates adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureDates.
// Sets related.R.Metric appropriately.
func (o *Metric) AddMeasureDates(exec boil.Executor, insert bool, related ...*MeasureDate) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Metric = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"measure_date\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"metric"}),
				strmangle.WhereClause("\"", "\"", 2, measureDatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Record, rel.Metric}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Metric = o.ID
		}
	}

	if o.R == nil {
		o.R = &metricR{
			MeasureDates: related,
		}
	} else {
		o.R.MeasureDates = append(o.R.MeasureDates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &measureDateR{
				Metric: o,
			}
		} else {
			rel.R.Metric = o
		}
	}
	return nil
}

// AddMeasureNumericsG adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureNumerics.
// Sets related.R.Metric appropriately.
// Uses the global database handle.
func (o *Metric) AddMeasureNumericsG(insert bool, related ...*MeasureNumeric) error {
	return o.AddMeasureNumerics(boil.GetDB(), insert, related...)
}

// AddMeasureNumericsP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureNumerics.
// Sets related.R.Metric appropriately.
// Panics on error.
func (o *Metric) AddMeasureNumericsP(exec boil.Executor, insert bool, related ...*MeasureNumeric) {
	if err := o.AddMeasureNumerics(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureNumericsGP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureNumerics.
// Sets related.R.Metric appropriately.
// Uses the global database handle and panics on error.
func (o *Metric) AddMeasureNumericsGP(insert bool, related ...*MeasureNumeric) {
	if err := o.AddMeasureNumerics(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureNumerics adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureNumerics.
// Sets related.R.Metric appropriately.
func (o *Metric) AddMeasureNumerics(exec boil.Executor, insert bool, related ...*MeasureNumeric) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Metric = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"measure_numeric\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"metric"}),
				strmangle.WhereClause("\"", "\"", 2, measureNumericPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Record, rel.Metric}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Metric = o.ID
		}
	}

	if o.R == nil {
		o.R = &metricR{
			MeasureNumerics: related,
		}
	} else {
		o.R.MeasureNumerics = append(o.R.MeasureNumerics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &measureNumericR{
				Metric: o,
			}
		} else {
			rel.R.Metric = o
		}
	}
	return nil
}

// AddMeasureTextsG adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureTexts.
// Sets related.R.Metric appropriately.
// Uses the global database handle.
func (o *Metric) AddMeasureTextsG(insert bool, related ...*MeasureText) error {
	return o.AddMeasureTexts(boil.GetDB(), insert, related...)
}

// AddMeasureTextsP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureTexts.
// Sets related.R.Metric appropriately.
// Panics on error.
func (o *Metric) AddMeasureTextsP(exec boil.Executor, insert bool, related ...*MeasureText) {
	if err := o.AddMeasureTexts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureTextsGP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureTexts.
// Sets related.R.Metric appropriately.
// Uses the global database handle and panics on error.
func (o *Metric) AddMeasureTextsGP(insert bool, related ...*MeasureText) {
	if err := o.AddMeasureTexts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMeasureTexts adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.MeasureTexts.
// Sets related.R.Metric appropriately.
func (o *Metric) AddMeasureTexts(exec boil.Executor, insert bool, related ...*MeasureText) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Metric = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"measure_text\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"metric"}),
				strmangle.WhereClause("\"", "\"", 2, measureTextPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Record, rel.Metric}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Metric = o.ID
		}
	}

	if o.R == nil {
		o.R = &metricR{
			MeasureTexts: related,
		}
	} else {
		o.R.MeasureTexts = append(o.R.MeasureTexts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &measureTextR{
				Metric: o,
			}
		} else {
			rel.R.Metric = o
		}
	}
	return nil
}

// AddVolumesG adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Volumes.
// Sets related.R.Metrics appropriately.
// Uses the global database handle.
func (o *Metric) AddVolumesG(insert bool, related ...*Volume) error {
	return o.AddVolumes(boil.GetDB(), insert, related...)
}

// AddVolumesP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Volumes.
// Sets related.R.Metrics appropriately.
// Panics on error.
func (o *Metric) AddVolumesP(exec boil.Executor, insert bool, related ...*Volume) {
	if err := o.AddVolumes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumesGP adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Volumes.
// Sets related.R.Metrics appropriately.
// Uses the global database handle and panics on error.
func (o *Metric) AddVolumesGP(insert bool, related ...*Volume) {
	if err := o.AddVolumes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumes adds the given related objects to the existing relationships
// of the metric, optionally inserting them as new records.
// Appends related to o.R.Volumes.
// Sets related.R.Metrics appropriately.
func (o *Metric) AddVolumes(exec boil.Executor, insert bool, related ...*Volume) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"volume_metric\" (\"metric\", \"volume\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &metricR{
			Volumes: related,
		}
	} else {
		o.R.Volumes = append(o.R.Volumes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeR{
				Metrics: MetricSlice{o},
			}
		} else {
			rel.R.Metrics = append(rel.R.Metrics, o)
		}
	}
	return nil
}

// SetVolumesG removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Volumes accordingly.
// Replaces o.R.Volumes with related.
// Sets related.R.Metrics's Volumes accordingly.
// Uses the global database handle.
func (o *Metric) SetVolumesG(insert bool, related ...*Volume) error {
	return o.SetVolumes(boil.GetDB(), insert, related...)
}

// SetVolumesP removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Volumes accordingly.
// Replaces o.R.Volumes with related.
// Sets related.R.Metrics's Volumes accordingly.
// Panics on error.
func (o *Metric) SetVolumesP(exec boil.Executor, insert bool, related ...*Volume) {
	if err := o.SetVolumes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumesGP removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Volumes accordingly.
// Replaces o.R.Volumes with related.
// Sets related.R.Metrics's Volumes accordingly.
// Uses the global database handle and panics on error.
func (o *Metric) SetVolumesGP(insert bool, related ...*Volume) {
	if err := o.SetVolumes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumes removes all previously related items of the
// metric replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Metrics's Volumes accordingly.
// Replaces o.R.Volumes with related.
// Sets related.R.Metrics's Volumes accordingly.
func (o *Metric) SetVolumes(exec boil.Executor, insert bool, related ...*Volume) error {
	query := "delete from \"volume_metric\" where \"metric\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeVolumesFromMetricsSlice(o, related)
	if o.R != nil {
		o.R.Volumes = nil
	}
	return o.AddVolumes(exec, insert, related...)
}

// RemoveVolumesG relationships from objects passed in.
// Removes related items from R.Volumes (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Uses the global database handle.
func (o *Metric) RemoveVolumesG(related ...*Volume) error {
	return o.RemoveVolumes(boil.GetDB(), related...)
}

// RemoveVolumesP relationships from objects passed in.
// Removes related items from R.Volumes (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Panics on error.
func (o *Metric) RemoveVolumesP(exec boil.Executor, related ...*Volume) {
	if err := o.RemoveVolumes(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveVolumesGP relationships from objects passed in.
// Removes related items from R.Volumes (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
// Uses the global database handle and panics on error.
func (o *Metric) RemoveVolumesGP(related ...*Volume) {
	if err := o.RemoveVolumes(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveVolumes relationships from objects passed in.
// Removes related items from R.Volumes (uses pointer comparison, removal does not keep order)
// Sets related.R.Metrics.
func (o *Metric) RemoveVolumes(exec boil.Executor, related ...*Volume) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"volume_metric\" where \"metric\" = $1 and \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeVolumesFromMetricsSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Volumes {
			if rel != ri {
				continue
			}

			ln := len(o.R.Volumes)
			if ln > 1 && i < ln-1 {
				o.R.Volumes[i] = o.R.Volumes[ln-1]
			}
			o.R.Volumes = o.R.Volumes[:ln-1]
			break
		}
	}

	return nil
}

func removeVolumesFromMetricsSlice(o *Metric, related []*Volume) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Metrics {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Metrics)
			if ln > 1 && i < ln-1 {
				rel.R.Metrics[i] = rel.R.Metrics[ln-1]
			}
			rel.R.Metrics = rel.R.Metrics[:ln-1]
			break
		}
	}
}

// MetricsG retrieves all records.
func MetricsG(mods ...qm.QueryMod) metricQuery {
	return Metrics(boil.GetDB(), mods...)
}

// Metrics retrieves all the records using an executor.
func Metrics(exec boil.Executor, mods ...qm.QueryMod) metricQuery {
	mods = append(mods, qm.From("\"metric\""))
	return metricQuery{NewQuery(exec, mods...)}
}

// FindMetricG retrieves a single record by ID.
func FindMetricG(id int, selectCols ...string) (*Metric, error) {
	return FindMetric(boil.GetDB(), id, selectCols...)
}

// FindMetricGP retrieves a single record by ID, and panics on error.
func FindMetricGP(id int, selectCols ...string) *Metric {
	retobj, err := FindMetric(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindMetric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMetric(exec boil.Executor, id int, selectCols ...string) (*Metric, error) {
	metricObj := &Metric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"metric\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(metricObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from metric")
	}

	return metricObj, nil
}

// FindMetricP retrieves a single record by ID with an executor, and panics on error.
func FindMetricP(exec boil.Executor, id int, selectCols ...string) *Metric {
	retobj, err := FindMetric(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Metric) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Metric) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Metric) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Metric) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no metric provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metricColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	metricInsertCacheMut.RLock()
	cache, cached := metricInsertCache[key]
	metricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			metricColumns,
			metricColumnsWithDefault,
			metricColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(metricType, metricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"metric\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"metric\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into metric")
	}

	if !cached {
		metricInsertCacheMut.Lock()
		metricInsertCache[key] = cache
		metricInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Metric record. See Update for
// whitelist behavior description.
func (o *Metric) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Metric record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Metric) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Metric, and panics on error.
// See Update for whitelist behavior description.
func (o *Metric) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Metric.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Metric) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	metricUpdateCacheMut.RLock()
	cache, cached := metricUpdateCache[key]
	metricUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(metricColumns, metricPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update metric, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"metric\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, metricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, append(wl, metricPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update metric row")
	}

	if !cached {
		metricUpdateCacheMut.Lock()
		metricUpdateCache[key] = cache
		metricUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q metricQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q metricQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for metric")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MetricSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o MetricSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o MetricSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MetricSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"metric\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(metricPrimaryKeyColumns), len(colNames)+1, len(metricPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in metric slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Metric) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Metric) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Metric) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Metric) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no metric provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(metricColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	metricUpsertCacheMut.RLock()
	cache, cached := metricUpsertCache[key]
	metricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			metricColumns,
			metricColumnsWithDefault,
			metricColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			metricColumns,
			metricPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert metric, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(metricPrimaryKeyColumns))
			copy(conflict, metricPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"metric\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(metricType, metricMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(metricType, metricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert metric")
	}

	if !cached {
		metricUpsertCacheMut.Lock()
		metricUpsertCache[key] = cache
		metricUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Metric record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Metric) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Metric record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Metric) DeleteG() error {
	if o == nil {
		return errors.New("public: no Metric provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Metric record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Metric) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Metric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Metric) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Metric provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), metricPrimaryKeyMapping)
	query := "DELETE FROM \"metric\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from metric")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q metricQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q metricQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no metricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from metric")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o MetricSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o MetricSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Metric slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o MetricSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MetricSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Metric slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(metricBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"metric\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, metricPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(metricPrimaryKeyColumns), 1, len(metricPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from metric slice")
	}

	if len(metricAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Metric) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Metric) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Metric) ReloadG() error {
	if o == nil {
		return errors.New("public: no Metric provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Metric) Reload(exec boil.Executor) error {
	ret, err := FindMetric(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MetricSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *MetricSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetricSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty MetricSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MetricSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	metrics := MetricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), metricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"metric\".* FROM \"metric\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, metricPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(metricPrimaryKeyColumns), 1, len(metricPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&metrics)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in MetricSlice")
	}

	*o = metrics

	return nil
}

// MetricExists checks if the Metric row exists.
func MetricExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"metric\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if metric exists")
	}

	return exists, nil
}

// MetricExistsG checks if the Metric row exists.
func MetricExistsG(id int) (bool, error) {
	return MetricExists(boil.GetDB(), id)
}

// MetricExistsGP checks if the Metric row exists. Panics on error.
func MetricExistsGP(id int) bool {
	e, err := MetricExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// MetricExistsP checks if the Metric row exists. Panics on error.
func MetricExistsP(exec boil.Executor, id int) bool {
	e, err := MetricExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
