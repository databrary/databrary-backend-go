// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Container is an object representing the database table.
type Container struct {
	ID     int         `db:"id" json:"container_id"`
	Volume int         `db:"volume" json:"container_volume"`
	Top    bool        `db:"top" json:"container_top"`
	Name   null.String `db:"name" json:"container_name,omitempty"`
	Date   null.Time   `db:"date" json:"container_date,omitempty"`

	R *containerR `db:"-" json:"-"`
	L containerL  `db:"-" json:"-"`
}

// containerR is where relationships are stored.
type containerR struct {
	Volume           *Volume
	Comments         CommentSlice
	Notifications    NotificationSlice
	SlotAssets       SlotAssetSlice
	SlotRecords      SlotRecordSlice
	SlotReleases     SlotReleaseSlice
	TagUses          TagUseSlice
	VolumeInclusions VolumeInclusionSlice
}

// containerL is where Load methods for each relationship are stored.
type containerL struct{}

var (
	containerColumns               = []string{"id", "volume", "top", "name", "date"}
	containerColumnsWithoutDefault = []string{"volume", "name", "date"}
	containerColumnsWithDefault    = []string{"id", "top"}
	containerColumnsWithCustom     = []string{}

	containerPrimaryKeyColumns = []string{"id"}
)

type (
	// ContainerSlice is an alias for a slice of pointers to Container.
	// This should generally be used opposed to []Container.
	ContainerSlice []*Container
	// ContainerHook is the signature for custom Container hook methods
	ContainerHook func(boil.Executor, *Container) error

	containerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	containerType    = reflect.TypeOf(&Container{})
	containerMapping = queries.MakeStructMapping(containerType)

	containerPrimaryKeyMapping, _ = queries.BindMapping(containerType, containerMapping, containerPrimaryKeyColumns)

	containerInsertCacheMut sync.RWMutex
	containerInsertCache    = make(map[string]insertCache)
	containerUpdateCacheMut sync.RWMutex
	containerUpdateCache    = make(map[string]updateCache)
	containerUpsertCacheMut sync.RWMutex
	containerUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var containerBeforeInsertHooks []ContainerHook
var containerBeforeUpdateHooks []ContainerHook
var containerBeforeDeleteHooks []ContainerHook
var containerBeforeUpsertHooks []ContainerHook

var containerAfterInsertHooks []ContainerHook
var containerAfterSelectHooks []ContainerHook
var containerAfterUpdateHooks []ContainerHook
var containerAfterDeleteHooks []ContainerHook
var containerAfterUpsertHooks []ContainerHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Container) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range containerBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Container) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range containerBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Container) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range containerBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Container) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range containerBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Container) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range containerAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Container) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range containerAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Container) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range containerAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Container) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range containerAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Container) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range containerAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddContainerHook registers your hook function for all future operations.
func AddContainerHook(hookPoint boil.HookPoint, containerHook ContainerHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		containerBeforeInsertHooks = append(containerBeforeInsertHooks, containerHook)
	case boil.BeforeUpdateHook:
		containerBeforeUpdateHooks = append(containerBeforeUpdateHooks, containerHook)
	case boil.BeforeDeleteHook:
		containerBeforeDeleteHooks = append(containerBeforeDeleteHooks, containerHook)
	case boil.BeforeUpsertHook:
		containerBeforeUpsertHooks = append(containerBeforeUpsertHooks, containerHook)
	case boil.AfterInsertHook:
		containerAfterInsertHooks = append(containerAfterInsertHooks, containerHook)
	case boil.AfterSelectHook:
		containerAfterSelectHooks = append(containerAfterSelectHooks, containerHook)
	case boil.AfterUpdateHook:
		containerAfterUpdateHooks = append(containerAfterUpdateHooks, containerHook)
	case boil.AfterDeleteHook:
		containerAfterDeleteHooks = append(containerAfterDeleteHooks, containerHook)
	case boil.AfterUpsertHook:
		containerAfterUpsertHooks = append(containerAfterUpsertHooks, containerHook)
	}
}

// OneP returns a single container record from the query, and panics on error.
func (q containerQuery) OneP() *Container {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single container record from the query.
func (q containerQuery) One() (*Container, error) {
	o := &Container{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for container")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Container records from the query, and panics on error.
func (q containerQuery) AllP() ContainerSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Container records from the query.
func (q containerQuery) All() (ContainerSlice, error) {
	var o ContainerSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Container slice")
	}

	if len(containerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Container records in the query, and panics on error.
func (q containerQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Container records in the query.
func (q containerQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count container rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q containerQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q containerQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if container exists")
	}

	return count > 0, nil
}

// VolumeG pointed to by the foreign key.
func (o *Container) VolumeG(mods ...qm.QueryMod) volumeQuery {
	return o.VolumeByFk(boil.GetDB(), mods...)
}

// Volume pointed to by the foreign key.
func (o *Container) VolumeByFk(exec boil.Executor, mods ...qm.QueryMod) volumeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Volume),
	}

	queryMods = append(queryMods, mods...)

	query := Volumes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume\"")

	return query
}

// CommentsG retrieves all the comment's comment.
func (o *Container) CommentsG(mods ...qm.QueryMod) commentQuery {
	return o.CommentsByFk(boil.GetDB(), mods...)
}

// Comments retrieves all the comment's comment with an executor.
func (o *Container) CommentsByFk(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := Comments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"comment\" as \"a\"")
	return query
}

// NotificationsG retrieves all the notification's notification.
func (o *Container) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Container) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// SlotAssetsG retrieves all the slot_asset's slot asset.
func (o *Container) SlotAssetsG(mods ...qm.QueryMod) slotAssetQuery {
	return o.SlotAssetsByFk(boil.GetDB(), mods...)
}

// SlotAssets retrieves all the slot_asset's slot asset with an executor.
func (o *Container) SlotAssetsByFk(exec boil.Executor, mods ...qm.QueryMod) slotAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := SlotAssets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"slot_asset\" as \"a\"")
	return query
}

// SlotRecordsG retrieves all the slot_record's slot record.
func (o *Container) SlotRecordsG(mods ...qm.QueryMod) slotRecordQuery {
	return o.SlotRecordsByFk(boil.GetDB(), mods...)
}

// SlotRecords retrieves all the slot_record's slot record with an executor.
func (o *Container) SlotRecordsByFk(exec boil.Executor, mods ...qm.QueryMod) slotRecordQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := SlotRecords(exec, queryMods...)
	queries.SetFrom(query.Query, "\"slot_record\" as \"a\"")
	return query
}

// SlotReleasesG retrieves all the slot_release's slot release.
func (o *Container) SlotReleasesG(mods ...qm.QueryMod) slotReleaseQuery {
	return o.SlotReleasesByFk(boil.GetDB(), mods...)
}

// SlotReleases retrieves all the slot_release's slot release with an executor.
func (o *Container) SlotReleasesByFk(exec boil.Executor, mods ...qm.QueryMod) slotReleaseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := SlotReleases(exec, queryMods...)
	queries.SetFrom(query.Query, "\"slot_release\" as \"a\"")
	return query
}

// TagUsesG retrieves all the tag_use's tag use.
func (o *Container) TagUsesG(mods ...qm.QueryMod) tagUseQuery {
	return o.TagUsesByFk(boil.GetDB(), mods...)
}

// TagUses retrieves all the tag_use's tag use with an executor.
func (o *Container) TagUsesByFk(exec boil.Executor, mods ...qm.QueryMod) tagUseQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := TagUses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"tag_use\" as \"a\"")
	return query
}

// VolumeInclusionsG retrieves all the volume_inclusion's volume inclusion.
func (o *Container) VolumeInclusionsG(mods ...qm.QueryMod) volumeInclusionQuery {
	return o.VolumeInclusionsByFk(boil.GetDB(), mods...)
}

// VolumeInclusions retrieves all the volume_inclusion's volume inclusion with an executor.
func (o *Container) VolumeInclusionsByFk(exec boil.Executor, mods ...qm.QueryMod) volumeInclusionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"container\"=?", o.ID),
	)

	query := VolumeInclusions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_inclusion\" as \"a\"")
	return query
}

// LoadVolume allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadVolume(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.Volume
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.Volume
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Volume")
	}
	defer results.Close()

	var resultSlice []*Volume
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Volume")
	}

	if len(containerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Volume = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Volume == foreign.ID {
				local.R.Volume = foreign
				break
			}
		}
	}

	return nil
}

// LoadComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadComments(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"comment\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}
	defer results.Close()

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Comments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.Comments = append(local.R.Comments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadNotifications(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSlotAssets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadSlotAssets(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"slot_asset\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load slot_asset")
	}
	defer results.Close()

	var resultSlice []*SlotAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice slot_asset")
	}

	if len(slotAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SlotAssets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.SlotAssets = append(local.R.SlotAssets, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSlotRecords allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadSlotRecords(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"slot_record\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load slot_record")
	}
	defer results.Close()

	var resultSlice []*SlotRecord
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice slot_record")
	}

	if len(slotRecordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SlotRecords = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.SlotRecords = append(local.R.SlotRecords, foreign)
				break
			}
		}
	}

	return nil
}

// LoadSlotReleases allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadSlotReleases(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"slot_release\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load slot_release")
	}
	defer results.Close()

	var resultSlice []*SlotRelease
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice slot_release")
	}

	if len(slotReleaseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SlotReleases = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.SlotReleases = append(local.R.SlotReleases, foreign)
				break
			}
		}
	}

	return nil
}

// LoadTagUses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadTagUses(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"tag_use\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tag_use")
	}
	defer results.Close()

	var resultSlice []*TagUse
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice tag_use")
	}

	if len(tagUseAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TagUses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.TagUses = append(local.R.TagUses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeInclusions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (containerL) LoadVolumeInclusions(e boil.Executor, singular bool, maybeContainer interface{}) error {
	var slice []*Container
	var object *Container

	count := 1
	if singular {
		object = maybeContainer.(*Container)
	} else {
		slice = *maybeContainer.(*ContainerSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &containerR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &containerR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_inclusion\" where \"container\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_inclusion")
	}
	defer results.Close()

	var resultSlice []*VolumeInclusion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_inclusion")
	}

	if len(volumeInclusionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeInclusions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Container {
				local.R.VolumeInclusions = append(local.R.VolumeInclusions, foreign)
				break
			}
		}
	}

	return nil
}

// SetVolumeG of the container to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Containers.
// Uses the global database handle.
func (o *Container) SetVolumeG(insert bool, related *Volume) error {
	return o.SetVolume(boil.GetDB(), insert, related)
}

// SetVolumeP of the container to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Containers.
// Panics on error.
func (o *Container) SetVolumeP(exec boil.Executor, insert bool, related *Volume) {
	if err := o.SetVolume(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeGP of the container to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Containers.
// Uses the global database handle and panics on error.
func (o *Container) SetVolumeGP(insert bool, related *Volume) {
	if err := o.SetVolume(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolume of the container to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Containers.
func (o *Container) SetVolume(exec boil.Executor, insert bool, related *Volume) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"container\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
		strmangle.WhereClause("\"", "\"", 2, containerPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Volume = related.ID

	if o.R == nil {
		o.R = &containerR{
			Volume: related,
		}
	} else {
		o.R.Volume = related
	}

	if related.R == nil {
		related.R = &volumeR{
			Containers: ContainerSlice{o},
		}
	} else {
		related.R.Containers = append(related.R.Containers, o)
	}

	return nil
}

// AddCommentsG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddCommentsG(insert bool, related ...*Comment) error {
	return o.AddComments(boil.GetDB(), insert, related...)
}

// AddCommentsP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.AddComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddCommentsGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddCommentsGP(insert bool, related ...*Comment) {
	if err := o.AddComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddComments adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Comments.
// Sets related.R.Container appropriately.
func (o *Container) AddComments(exec boil.Executor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			Comments: related,
		}
	} else {
		o.R.Comments = append(o.R.Comments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Container appropriately.
func (o *Container) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container.Int = o.ID
			rel.Container.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container.Int = o.ID
			rel.Container.Valid = true
		}
	}

	if o.R == nil {
		o.R = &containerR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// container replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Container's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Container's Notifications accordingly.
// Uses the global database handle.
func (o *Container) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// container replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Container's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Container's Notifications accordingly.
// Panics on error.
func (o *Container) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// container replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Container's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Container's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Container) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// container replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Container's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Container's Notifications accordingly.
func (o *Container) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"container\" = null where \"container\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Container.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Container = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Container.
// Uses the global database handle.
func (o *Container) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Container.
// Panics on error.
func (o *Container) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Container.
// Uses the global database handle and panics on error.
func (o *Container) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Container.
func (o *Container) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Container.Valid = false
		if rel.R != nil {
			rel.R.Container = nil
		}
		if err = rel.Update(exec, "container"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddSlotAssetsG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotAssets.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddSlotAssetsG(insert bool, related ...*SlotAsset) error {
	return o.AddSlotAssets(boil.GetDB(), insert, related...)
}

// AddSlotAssetsP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotAssets.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddSlotAssetsP(exec boil.Executor, insert bool, related ...*SlotAsset) {
	if err := o.AddSlotAssets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotAssetsGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotAssets.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddSlotAssetsGP(insert bool, related ...*SlotAsset) {
	if err := o.AddSlotAssets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotAssets adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotAssets.
// Sets related.R.Container appropriately.
func (o *Container) AddSlotAssets(exec boil.Executor, insert bool, related ...*SlotAsset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"slot_asset\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, slotAssetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Asset}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			SlotAssets: related,
		}
	} else {
		o.R.SlotAssets = append(o.R.SlotAssets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &slotAssetR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// AddSlotRecordsG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotRecords.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddSlotRecordsG(insert bool, related ...*SlotRecord) error {
	return o.AddSlotRecords(boil.GetDB(), insert, related...)
}

// AddSlotRecordsP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotRecords.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddSlotRecordsP(exec boil.Executor, insert bool, related ...*SlotRecord) {
	if err := o.AddSlotRecords(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotRecordsGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotRecords.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddSlotRecordsGP(insert bool, related ...*SlotRecord) {
	if err := o.AddSlotRecords(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotRecords adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotRecords.
// Sets related.R.Container appropriately.
func (o *Container) AddSlotRecords(exec boil.Executor, insert bool, related ...*SlotRecord) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"slot_record\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, slotRecordPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Segment, rel.Record}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			SlotRecords: related,
		}
	} else {
		o.R.SlotRecords = append(o.R.SlotRecords, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &slotRecordR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// AddSlotReleasesG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotReleases.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddSlotReleasesG(insert bool, related ...*SlotRelease) error {
	return o.AddSlotReleases(boil.GetDB(), insert, related...)
}

// AddSlotReleasesP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotReleases.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddSlotReleasesP(exec boil.Executor, insert bool, related ...*SlotRelease) {
	if err := o.AddSlotReleases(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotReleasesGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotReleases.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddSlotReleasesGP(insert bool, related ...*SlotRelease) {
	if err := o.AddSlotReleases(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSlotReleases adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.SlotReleases.
// Sets related.R.Container appropriately.
func (o *Container) AddSlotReleases(exec boil.Executor, insert bool, related ...*SlotRelease) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"slot_release\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, slotReleasePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Segment}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			SlotReleases: related,
		}
	} else {
		o.R.SlotReleases = append(o.R.SlotReleases, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &slotReleaseR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// AddTagUsesG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddTagUsesG(insert bool, related ...*TagUse) error {
	return o.AddTagUses(boil.GetDB(), insert, related...)
}

// AddTagUsesP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddTagUsesP(exec boil.Executor, insert bool, related ...*TagUse) {
	if err := o.AddTagUses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagUsesGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddTagUsesGP(insert bool, related ...*TagUse) {
	if err := o.AddTagUses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddTagUses adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.TagUses.
// Sets related.R.Container appropriately.
func (o *Container) AddTagUses(exec boil.Executor, insert bool, related ...*TagUse) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"tag_use\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, tagUsePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Segment, rel.Tag, rel.Who}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			TagUses: related,
		}
	} else {
		o.R.TagUses = append(o.R.TagUses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &tagUseR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// AddVolumeInclusionsG adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Container appropriately.
// Uses the global database handle.
func (o *Container) AddVolumeInclusionsG(insert bool, related ...*VolumeInclusion) error {
	return o.AddVolumeInclusions(boil.GetDB(), insert, related...)
}

// AddVolumeInclusionsP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Container appropriately.
// Panics on error.
func (o *Container) AddVolumeInclusionsP(exec boil.Executor, insert bool, related ...*VolumeInclusion) {
	if err := o.AddVolumeInclusions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeInclusionsGP adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Container appropriately.
// Uses the global database handle and panics on error.
func (o *Container) AddVolumeInclusionsGP(insert bool, related ...*VolumeInclusion) {
	if err := o.AddVolumeInclusions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeInclusions adds the given related objects to the existing relationships
// of the container, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Container appropriately.
func (o *Container) AddVolumeInclusions(exec boil.Executor, insert bool, related ...*VolumeInclusion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Container = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_inclusion\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
				strmangle.WhereClause("\"", "\"", 2, volumeInclusionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Volume}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Container = o.ID
		}
	}

	if o.R == nil {
		o.R = &containerR{
			VolumeInclusions: related,
		}
	} else {
		o.R.VolumeInclusions = append(o.R.VolumeInclusions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeInclusionR{
				Container: o,
			}
		} else {
			rel.R.Container = o
		}
	}
	return nil
}

// ContainersG retrieves all records.
func ContainersG(mods ...qm.QueryMod) containerQuery {
	return Containers(boil.GetDB(), mods...)
}

// Containers retrieves all the records using an executor.
func Containers(exec boil.Executor, mods ...qm.QueryMod) containerQuery {
	mods = append(mods, qm.From("\"container\""))
	return containerQuery{NewQuery(exec, mods...)}
}

// FindContainerG retrieves a single record by ID.
func FindContainerG(id int, selectCols ...string) (*Container, error) {
	return FindContainer(boil.GetDB(), id, selectCols...)
}

// FindContainerGP retrieves a single record by ID, and panics on error.
func FindContainerGP(id int, selectCols ...string) *Container {
	retobj, err := FindContainer(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindContainer retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindContainer(exec boil.Executor, id int, selectCols ...string) (*Container, error) {
	containerObj := &Container{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"container\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(containerObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from container")
	}

	return containerObj, nil
}

// FindContainerP retrieves a single record by ID with an executor, and panics on error.
func FindContainerP(exec boil.Executor, id int, selectCols ...string) *Container {
	retobj, err := FindContainer(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Container) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Container) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Container) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Container) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no container provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(containerColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	containerInsertCacheMut.RLock()
	cache, cached := containerInsertCache[key]
	containerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			containerColumns,
			containerColumnsWithDefault,
			containerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(containerType, containerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(containerType, containerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"container\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"container\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into container")
	}

	if !cached {
		containerInsertCacheMut.Lock()
		containerInsertCache[key] = cache
		containerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Container record. See Update for
// whitelist behavior description.
func (o *Container) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Container record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Container) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Container, and panics on error.
// See Update for whitelist behavior description.
func (o *Container) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Container.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Container) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	containerUpdateCacheMut.RLock()
	cache, cached := containerUpdateCache[key]
	containerUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(containerColumns, containerPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update container, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"container\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, containerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(containerType, containerMapping, append(wl, containerPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update container row")
	}

	if !cached {
		containerUpdateCacheMut.Lock()
		containerUpdateCache[key] = cache
		containerUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q containerQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q containerQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for container")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ContainerSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o ContainerSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o ContainerSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ContainerSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), containerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"container\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(containerPrimaryKeyColumns), len(colNames)+1, len(containerPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in container slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Container) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Container) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Container) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Container) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no container provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(containerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	containerUpsertCacheMut.RLock()
	cache, cached := containerUpsertCache[key]
	containerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			containerColumns,
			containerColumnsWithDefault,
			containerColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			containerColumns,
			containerPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert container, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(containerPrimaryKeyColumns))
			copy(conflict, containerPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"container\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(containerType, containerMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(containerType, containerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert container")
	}

	if !cached {
		containerUpsertCacheMut.Lock()
		containerUpsertCache[key] = cache
		containerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Container record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Container) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Container record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Container) DeleteG() error {
	if o == nil {
		return errors.New("public: no Container provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Container record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Container) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Container record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Container) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Container provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), containerPrimaryKeyMapping)
	query := "DELETE FROM \"container\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from container")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q containerQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q containerQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no containerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from container")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o ContainerSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o ContainerSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Container slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o ContainerSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ContainerSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Container slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(containerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), containerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"container\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, containerPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(containerPrimaryKeyColumns), 1, len(containerPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from container slice")
	}

	if len(containerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Container) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Container) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Container) ReloadG() error {
	if o == nil {
		return errors.New("public: no Container provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Container) Reload(exec boil.Executor) error {
	ret, err := FindContainer(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ContainerSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *ContainerSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContainerSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty ContainerSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ContainerSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	containers := ContainerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), containerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"container\".* FROM \"container\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, containerPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(containerPrimaryKeyColumns), 1, len(containerPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&containers)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in ContainerSlice")
	}

	*o = containers

	return nil
}

// ContainerExists checks if the Container row exists.
func ContainerExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"container\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if container exists")
	}

	return exists, nil
}

// ContainerExistsG checks if the Container row exists.
func ContainerExistsG(id int) (bool, error) {
	return ContainerExists(boil.GetDB(), id)
}

// ContainerExistsGP checks if the Container row exists. Panics on error.
func ContainerExistsGP(id int) bool {
	e, err := ContainerExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// ContainerExistsP checks if the Container row exists. Panics on error.
func ContainerExistsP(exec boil.Executor, id int) bool {
	e, err := ContainerExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
