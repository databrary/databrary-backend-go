// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testMetrics(t *testing.T) {
	t.Parallel()

	query := Metrics(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMetricsLive(t *testing.T) {
	all, err := Metrics(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Metrics err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM metric) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM metric) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("MetricsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testMetricsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = metric.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMetricsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Metrics(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMetricsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MetricSlice{metric}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMetricsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MetricExists(tx, metric.ID)
	if err != nil {
		t.Errorf("Unable to check if Metric exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MetricExistsG to return true, but got false.")
	}
}

func testMetricsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	metricFound, err := FindMetric(tx, metric.ID)
	if err != nil {
		t.Error(err)
	}

	if metricFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMetricsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Metrics(tx).Bind(metric); err != nil {
		t.Error(err)
	}
}

func testMetricsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Metrics(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMetricsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metricOne := &Metric{}
	metricTwo := &Metric{}
	if err = randomize.Struct(seed, metricOne, metricDBTypes, false, metricColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	if err = randomize.Struct(seed, metricTwo, metricDBTypes, false, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metricOne.Release = custom_types.NullReleaseRandom()
	metricTwo.Release = custom_types.NullReleaseRandom()
	metricOne.Type = custom_types.DataTypeRandom()
	metricTwo.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metricOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = metricTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Metrics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMetricsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metricOne := &Metric{}
	metricTwo := &Metric{}
	if err = randomize.Struct(seed, metricOne, metricDBTypes, false, metricColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	if err = randomize.Struct(seed, metricTwo, metricDBTypes, false, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metricOne.Release = custom_types.NullReleaseRandom()
	metricTwo.Release = custom_types.NullReleaseRandom()
	metricOne.Type = custom_types.DataTypeRandom()
	metricTwo.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metricOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = metricTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func metricBeforeInsertHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricAfterInsertHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricAfterSelectHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricBeforeUpdateHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricAfterUpdateHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricBeforeDeleteHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricAfterDeleteHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricBeforeUpsertHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func metricAfterUpsertHook(e boil.Executor, o *Metric) error {
	*o = Metric{}
	return nil
}

func testMetricsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	empty := &Metric{}

	AddMetricHook(boil.BeforeInsertHook, metricBeforeInsertHook)
	if err = metric.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", metric)
	}
	metricBeforeInsertHooks = []MetricHook{}

	AddMetricHook(boil.AfterInsertHook, metricAfterInsertHook)
	if err = metric.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", metric)
	}
	metricAfterInsertHooks = []MetricHook{}

	AddMetricHook(boil.AfterSelectHook, metricAfterSelectHook)
	if err = metric.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", metric)
	}
	metricAfterSelectHooks = []MetricHook{}

	AddMetricHook(boil.BeforeUpdateHook, metricBeforeUpdateHook)
	if err = metric.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", metric)
	}
	metricBeforeUpdateHooks = []MetricHook{}

	AddMetricHook(boil.AfterUpdateHook, metricAfterUpdateHook)
	if err = metric.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", metric)
	}
	metricAfterUpdateHooks = []MetricHook{}

	AddMetricHook(boil.BeforeDeleteHook, metricBeforeDeleteHook)
	if err = metric.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", metric)
	}
	metricBeforeDeleteHooks = []MetricHook{}

	AddMetricHook(boil.AfterDeleteHook, metricAfterDeleteHook)
	if err = metric.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", metric)
	}
	metricAfterDeleteHooks = []MetricHook{}

	AddMetricHook(boil.BeforeUpsertHook, metricBeforeUpsertHook)
	if err = metric.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", metric)
	}
	metricBeforeUpsertHooks = []MetricHook{}

	AddMetricHook(boil.AfterUpsertHook, metricAfterUpsertHook)
	if err = metric.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(metric, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", metric)
	}
	metricAfterUpsertHooks = []MetricHook{}
}
func testMetricsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMetricsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx, metricColumns...); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMetricToManyRecords(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c Record

	foreignBlacklist := recordColumnsWithDefault
	if err := randomize.Struct(seed, &b, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"measure_abstract\" (\"metric\", \"record\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"measure_abstract\" (\"metric\", \"record\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	record, err := a.RecordsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range record {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MetricSlice{&a}
	if err = a.L.LoadRecords(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Records = nil
	if err = a.L.LoadRecords(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Records); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", record)
	}
}

func testMetricToManyMeasureDates(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c MeasureDate

	foreignBlacklist := measureDateColumnsWithDefault
	if err := randomize.Struct(seed, &b, measureDateDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureDate struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, measureDateDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureDate struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	b.Metric = a.ID
	c.Metric = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureDate, err := a.MeasureDatesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureDate {
		if v.Metric == b.Metric {
			bFound = true
		}
		if v.Metric == c.Metric {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MetricSlice{&a}
	if err = a.L.LoadMeasureDates(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureDates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureDates = nil
	if err = a.L.LoadMeasureDates(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureDates); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureDate)
	}
}

func testMetricToManyMeasureNumerics(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c MeasureNumeric

	foreignBlacklist := measureNumericColumnsWithDefault
	if err := randomize.Struct(seed, &b, measureNumericDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureNumeric struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, measureNumericDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureNumeric struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	b.Metric = a.ID
	c.Metric = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureNumeric, err := a.MeasureNumericsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureNumeric {
		if v.Metric == b.Metric {
			bFound = true
		}
		if v.Metric == c.Metric {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MetricSlice{&a}
	if err = a.L.LoadMeasureNumerics(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureNumerics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureNumerics = nil
	if err = a.L.LoadMeasureNumerics(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureNumerics); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureNumeric)
	}
}

func testMetricToManyMeasureTexts(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c MeasureText

	foreignBlacklist := measureTextColumnsWithDefault
	if err := randomize.Struct(seed, &b, measureTextDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, measureTextDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	b.Metric = a.ID
	c.Metric = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	measureText, err := a.MeasureTextsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range measureText {
		if v.Metric == b.Metric {
			bFound = true
		}
		if v.Metric == c.Metric {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MetricSlice{&a}
	if err = a.L.LoadMeasureTexts(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureTexts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.MeasureTexts = nil
	if err = a.L.LoadMeasureTexts(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.MeasureTexts); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", measureText)
	}
}

func testMetricToManyVolumes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c Volume

	foreignBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &b, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"volume_metric\" (\"metric\", \"volume\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"volume_metric\" (\"metric\", \"volume\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	volume, err := a.VolumesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volume {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := MetricSlice{&a}
	if err = a.L.LoadVolumes(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Volumes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Volumes = nil
	if err = a.L.LoadVolumes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Volumes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volume)
	}
}

func testMetricToManyAddOpRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Record

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)

	foreigners := []*Record{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Record{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddRecords(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Metrics[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Metrics[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Records[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Records[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.RecordsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMetricToManySetOpRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Record

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)

	foreigners := []*Record{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetRecords(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecordsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetRecords(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecordsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Metrics) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Metrics) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Records[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Records[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMetricToManyRemoveOpRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Record

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)

	foreigners := []*Record{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, recordDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddRecords(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.RecordsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveRecords(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.RecordsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Metrics) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Metrics) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Records) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Records[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Records[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMetricToManyAddOpMeasureDates(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e MeasureDate

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(measureDatePrimaryKeyColumns, measureDateColumnsWithoutDefault)

	foreigners := []*MeasureDate{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureDateDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureDate{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureDates(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Metric {
			t.Error("foreign key was wrong value", a.ID, first.Metric)
		}
		if a.ID != second.Metric {
			t.Error("foreign key was wrong value", a.ID, second.Metric)
		}

		if first.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureDates[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureDates[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureDatesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMetricToManyAddOpMeasureNumerics(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e MeasureNumeric

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(measureNumericPrimaryKeyColumns, measureNumericColumnsWithoutDefault)

	foreigners := []*MeasureNumeric{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureNumericDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureNumeric{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureNumerics(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Metric {
			t.Error("foreign key was wrong value", a.ID, first.Metric)
		}
		if a.ID != second.Metric {
			t.Error("foreign key was wrong value", a.ID, second.Metric)
		}

		if first.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureNumerics[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureNumerics[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureNumericsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMetricToManyAddOpMeasureTexts(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e MeasureText

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(measureTextPrimaryKeyColumns, measureTextColumnsWithoutDefault)

	foreigners := []*MeasureText{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, measureTextDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*MeasureText{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddMeasureTexts(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Metric {
			t.Error("foreign key was wrong value", a.ID, first.Metric)
		}
		if a.ID != second.Metric {
			t.Error("foreign key was wrong value", a.ID, second.Metric)
		}

		if first.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Metric != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.MeasureTexts[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.MeasureTexts[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.MeasureTextsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testMetricToManyAddOpVolumes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Volume

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)

	foreigners := []*Volume{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Volume{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Metrics[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Metrics[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Volumes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Volumes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testMetricToManySetOpVolumes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Volume

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)

	foreigners := []*Volume{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetVolumes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VolumesByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetVolumes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VolumesByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Metrics) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Metrics) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Volumes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Volumes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testMetricToManyRemoveOpVolumes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Metric
	var b, c, d, e Volume

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localComplelementList = append(localComplelementList, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, &a, metricDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	foreignComplementList := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)

	foreigners := []*Volume{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddVolumes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.VolumesByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveVolumes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.VolumesByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Metrics) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Metrics) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Metrics[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Volumes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Volumes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Volumes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testMetricToOneCategoryUsingCategory(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Category
	var local Metric

	foreignBlacklist := categoryColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, categoryDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	localBlacklist := metricColumnsWithDefault
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, metricDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	local.Release = custom_types.NullReleaseRandom()
	local.Type = custom_types.DataTypeRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Category = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.CategoryByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MetricSlice{&local}
	if err = local.L.LoadCategory(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Category = nil
	if err = local.L.LoadCategory(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Category == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMetricToOneSetOpCategoryUsingCategory(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Metric
	var b, c Category

	foreignBlacklist := strmangle.SetComplement(categoryPrimaryKeyColumns, categoryColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, categoryDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, categoryDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Category struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, metricDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	a.Release = custom_types.NullReleaseRandom()
	a.Type = custom_types.DataTypeRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Category{&b, &c} {
		err = a.SetCategory(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Category != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Metrics[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Category != x.ID {
			t.Error("foreign key was wrong value", a.Category)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Category))
		reflect.Indirect(reflect.ValueOf(&a.Category)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Category != x.ID {
			t.Error("foreign key was wrong value", a.Category, x.ID)
		}
	}
}

func testMetricsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = metric.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMetricsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MetricSlice{metric}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMetricsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Metrics(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	metricDBTypes = map[string]string{`Assumed`: `text`, `Category`: `smallint`, `Description`: `text`, `ID`: `integer`, `Name`: `character varying`, `Options`: `ARRAYtext`, `Release`: `enum.release('PRIVATE','SHARED','EXCERPTS','PUBLIC')`, `Required`: `boolean`, `Type`: `enum.data_type('text','numeric','date','void')`}
	_             = bytes.MinRead
)

func testMetricsUpdate(t *testing.T) {
	t.Parallel()

	if len(metricColumns) == len(metricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := metricColumnsWithDefault
	blacklist = append(blacklist, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, metric, metricDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	if err = metric.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMetricsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(metricColumns) == len(metricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := metricPrimaryKeyColumns
	blacklist = append(blacklist, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, metric, metricDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(metricColumns, metricPrimaryKeyColumns) {
		fields = metricColumns
	} else {
		fields = strmangle.SetComplement(
			metricColumns,
			metricPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(metric))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MetricSlice{metric}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testMetricsUpsert(t *testing.T) {
	t.Parallel()

	if len(metricColumns) == len(metricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	metric := &Metric{}
	if err = randomize.Struct(seed, metric, metricDBTypes, true, metricColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = metric.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Metric: %s", err)
	}

	count, err := Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := metricPrimaryKeyColumns

	blacklist = append(blacklist, metricColumnsWithCustom...)

	if err = randomize.Struct(seed, metric, metricDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}

	metric.Release = custom_types.NullReleaseRandom()
	metric.Type = custom_types.DataTypeRandom()

	if err = metric.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Metric: %s", err)
	}

	count, err = Metrics(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
