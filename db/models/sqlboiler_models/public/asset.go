// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Asset is an object representing the database table.
type Asset struct {
	ID       int                       `db:"id" json:"asset_id"`
	Volume   int                       `db:"volume" json:"asset_volume"`
	Format   int16                     `db:"format" json:"asset_format"`
	Release  custom_types.NullRelease  `db:"release" json:"asset_release,omitempty"`
	Duration custom_types.NullInterval `db:"duration" json:"asset_duration,omitempty"`
	Name     null.String               `db:"name" json:"asset_name,omitempty"`
	Sha1     null.Bytes                `db:"sha1" json:"asset_sha1,omitempty"`
	Size     null.Int64                `db:"size" json:"asset_size,omitempty"`

	R *assetR `db:"-" json:"-"`
	L assetL  `db:"-" json:"-"`
}

// assetR is where relationships are stored.
type assetR struct {
	Format            *Format
	Volume            *Volume
	OrigAssetRevision *AssetRevision
	SlotAsset         *SlotAsset
	Transcode         *Transcode
	AssetRevisions    AssetRevisionSlice
	Avatars           AvatarSlice
	Notifications     NotificationSlice
	OrigTranscodes    TranscodeSlice
}

// assetL is where Load methods for each relationship are stored.
type assetL struct{}

var (
	assetColumns               = []string{"id", "volume", "format", "release", "duration", "name", "sha1", "size"}
	assetColumnsWithoutDefault = []string{"volume", "format", "release", "duration", "name", "sha1", "size"}
	assetColumnsWithDefault    = []string{"id"}
	assetColumnsWithCustom     = []string{"release", "duration"}

	assetPrimaryKeyColumns = []string{"id"}
)

type (
	// AssetSlice is an alias for a slice of pointers to Asset.
	// This should generally be used opposed to []Asset.
	AssetSlice []*Asset
	// AssetHook is the signature for custom Asset hook methods
	AssetHook func(boil.Executor, *Asset) error

	assetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	assetType    = reflect.TypeOf(&Asset{})
	assetMapping = queries.MakeStructMapping(assetType)

	assetPrimaryKeyMapping, _ = queries.BindMapping(assetType, assetMapping, assetPrimaryKeyColumns)

	assetInsertCacheMut sync.RWMutex
	assetInsertCache    = make(map[string]insertCache)
	assetUpdateCacheMut sync.RWMutex
	assetUpdateCache    = make(map[string]updateCache)
	assetUpsertCacheMut sync.RWMutex
	assetUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var assetBeforeInsertHooks []AssetHook
var assetBeforeUpdateHooks []AssetHook
var assetBeforeDeleteHooks []AssetHook
var assetBeforeUpsertHooks []AssetHook

var assetAfterInsertHooks []AssetHook
var assetAfterSelectHooks []AssetHook
var assetAfterUpdateHooks []AssetHook
var assetAfterDeleteHooks []AssetHook
var assetAfterUpsertHooks []AssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Asset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Asset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Asset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Asset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Asset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Asset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range assetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Asset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range assetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Asset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range assetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Asset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range assetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAssetHook registers your hook function for all future operations.
func AddAssetHook(hookPoint boil.HookPoint, assetHook AssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		assetBeforeInsertHooks = append(assetBeforeInsertHooks, assetHook)
	case boil.BeforeUpdateHook:
		assetBeforeUpdateHooks = append(assetBeforeUpdateHooks, assetHook)
	case boil.BeforeDeleteHook:
		assetBeforeDeleteHooks = append(assetBeforeDeleteHooks, assetHook)
	case boil.BeforeUpsertHook:
		assetBeforeUpsertHooks = append(assetBeforeUpsertHooks, assetHook)
	case boil.AfterInsertHook:
		assetAfterInsertHooks = append(assetAfterInsertHooks, assetHook)
	case boil.AfterSelectHook:
		assetAfterSelectHooks = append(assetAfterSelectHooks, assetHook)
	case boil.AfterUpdateHook:
		assetAfterUpdateHooks = append(assetAfterUpdateHooks, assetHook)
	case boil.AfterDeleteHook:
		assetAfterDeleteHooks = append(assetAfterDeleteHooks, assetHook)
	case boil.AfterUpsertHook:
		assetAfterUpsertHooks = append(assetAfterUpsertHooks, assetHook)
	}
}

// OneP returns a single asset record from the query, and panics on error.
func (q assetQuery) OneP() *Asset {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single asset record from the query.
func (q assetQuery) One() (*Asset, error) {
	o := &Asset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for asset")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Asset records from the query, and panics on error.
func (q assetQuery) AllP() AssetSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Asset records from the query.
func (q assetQuery) All() (AssetSlice, error) {
	var o AssetSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Asset slice")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Asset records in the query, and panics on error.
func (q assetQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Asset records in the query.
func (q assetQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count asset rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q assetQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q assetQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if asset exists")
	}

	return count > 0, nil
}

// FormatG pointed to by the foreign key.
func (o *Asset) FormatG(mods ...qm.QueryMod) formatQuery {
	return o.FormatByFk(boil.GetDB(), mods...)
}

// Format pointed to by the foreign key.
func (o *Asset) FormatByFk(exec boil.Executor, mods ...qm.QueryMod) formatQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Format),
	}

	queryMods = append(queryMods, mods...)

	query := Formats(exec, queryMods...)
	queries.SetFrom(query.Query, "\"format\"")

	return query
}

// VolumeG pointed to by the foreign key.
func (o *Asset) VolumeG(mods ...qm.QueryMod) volumeQuery {
	return o.VolumeByFk(boil.GetDB(), mods...)
}

// Volume pointed to by the foreign key.
func (o *Asset) VolumeByFk(exec boil.Executor, mods ...qm.QueryMod) volumeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Volume),
	}

	queryMods = append(queryMods, mods...)

	query := Volumes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume\"")

	return query
}

// OrigAssetRevisionG pointed to by the foreign key.
func (o *Asset) OrigAssetRevisionG(mods ...qm.QueryMod) assetRevisionQuery {
	return o.OrigAssetRevisionByFk(boil.GetDB(), mods...)
}

// OrigAssetRevision pointed to by the foreign key.
func (o *Asset) OrigAssetRevisionByFk(exec boil.Executor, mods ...qm.QueryMod) assetRevisionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("orig=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := AssetRevisions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset_revision\"")

	return query
}

// SlotAssetG pointed to by the foreign key.
func (o *Asset) SlotAssetG(mods ...qm.QueryMod) slotAssetQuery {
	return o.SlotAssetByFk(boil.GetDB(), mods...)
}

// SlotAsset pointed to by the foreign key.
func (o *Asset) SlotAssetByFk(exec boil.Executor, mods ...qm.QueryMod) slotAssetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("asset=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := SlotAssets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"slot_asset\"")

	return query
}

// TranscodeG pointed to by the foreign key.
func (o *Asset) TranscodeG(mods ...qm.QueryMod) transcodeQuery {
	return o.TranscodeByFk(boil.GetDB(), mods...)
}

// Transcode pointed to by the foreign key.
func (o *Asset) TranscodeByFk(exec boil.Executor, mods ...qm.QueryMod) transcodeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("asset=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Transcodes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"transcode\"")

	return query
}

// AssetRevisionsG retrieves all the asset_revision's asset revision.
func (o *Asset) AssetRevisionsG(mods ...qm.QueryMod) assetRevisionQuery {
	return o.AssetRevisionsByFk(boil.GetDB(), mods...)
}

// AssetRevisions retrieves all the asset_revision's asset revision with an executor.
func (o *Asset) AssetRevisionsByFk(exec boil.Executor, mods ...qm.QueryMod) assetRevisionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"asset\"=?", o.ID),
	)

	query := AssetRevisions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset_revision\" as \"a\"")
	return query
}

// AvatarsG retrieves all the avatar's avatar.
func (o *Asset) AvatarsG(mods ...qm.QueryMod) avatarQuery {
	return o.AvatarsByFk(boil.GetDB(), mods...)
}

// Avatars retrieves all the avatar's avatar with an executor.
func (o *Asset) AvatarsByFk(exec boil.Executor, mods ...qm.QueryMod) avatarQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"asset\"=?", o.ID),
	)

	query := Avatars(exec, queryMods...)
	queries.SetFrom(query.Query, "\"avatar\" as \"a\"")
	return query
}

// NotificationsG retrieves all the notification's notification.
func (o *Asset) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Asset) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"asset\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// OrigTranscodesG retrieves all the transcode's transcode via orig column.
func (o *Asset) OrigTranscodesG(mods ...qm.QueryMod) transcodeQuery {
	return o.OrigTranscodesByFk(boil.GetDB(), mods...)
}

// OrigTranscodes retrieves all the transcode's transcode with an executor via orig column.
func (o *Asset) OrigTranscodesByFk(exec boil.Executor, mods ...qm.QueryMod) transcodeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"orig\"=?", o.ID),
	)

	query := Transcodes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"transcode\" as \"a\"")
	return query
}

// LoadFormat allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadFormat(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.Format
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.Format
		}
	}

	query := fmt.Sprintf(
		"select * from \"format\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Format")
	}
	defer results.Close()

	var resultSlice []*Format
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Format")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Format = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Format == foreign.ID {
				local.R.Format = foreign
				break
			}
		}
	}

	return nil
}

// LoadVolume allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadVolume(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.Volume
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.Volume
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Volume")
	}
	defer results.Close()

	var resultSlice []*Volume
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Volume")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Volume = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Volume == foreign.ID {
				local.R.Volume = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrigAssetRevision allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadOrigAssetRevision(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset_revision\" where \"orig\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load AssetRevision")
	}
	defer results.Close()

	var resultSlice []*AssetRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice AssetRevision")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.OrigAssetRevision = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Orig {
				local.R.OrigAssetRevision = foreign
				break
			}
		}
	}

	return nil
}

// LoadSlotAsset allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadSlotAsset(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"slot_asset\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SlotAsset")
	}
	defer results.Close()

	var resultSlice []*SlotAsset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SlotAsset")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.SlotAsset = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Asset {
				local.R.SlotAsset = foreign
				break
			}
		}
	}

	return nil
}

// LoadTranscode allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadTranscode(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"transcode\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transcode")
	}
	defer results.Close()

	var resultSlice []*Transcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transcode")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Transcode = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Asset {
				local.R.Transcode = foreign
				break
			}
		}
	}

	return nil
}

// LoadAssetRevisions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadAssetRevisions(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset_revision\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset_revision")
	}
	defer results.Close()

	var resultSlice []*AssetRevision
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset_revision")
	}

	if len(assetRevisionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetRevisions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Asset {
				local.R.AssetRevisions = append(local.R.AssetRevisions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAvatars allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadAvatars(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"avatar\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load avatar")
	}
	defer results.Close()

	var resultSlice []*Avatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice avatar")
	}

	if len(avatarAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Avatars = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Asset {
				local.R.Avatars = append(local.R.Avatars, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadNotifications(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Asset.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadOrigTranscodes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (assetL) LoadOrigTranscodes(e boil.Executor, singular bool, maybeAsset interface{}) error {
	var slice []*Asset
	var object *Asset

	count := 1
	if singular {
		object = maybeAsset.(*Asset)
	} else {
		slice = *maybeAsset.(*AssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &assetR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &assetR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"transcode\" where \"orig\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transcode")
	}
	defer results.Close()

	var resultSlice []*Transcode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transcode")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.OrigTranscodes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Orig {
				local.R.OrigTranscodes = append(local.R.OrigTranscodes, foreign)
				break
			}
		}
	}

	return nil
}

// SetFormatG of the asset to the related item.
// Sets o.R.Format to related.
// Adds o to related.R.Assets.
// Uses the global database handle.
func (o *Asset) SetFormatG(insert bool, related *Format) error {
	return o.SetFormat(boil.GetDB(), insert, related)
}

// SetFormatP of the asset to the related item.
// Sets o.R.Format to related.
// Adds o to related.R.Assets.
// Panics on error.
func (o *Asset) SetFormatP(exec boil.Executor, insert bool, related *Format) {
	if err := o.SetFormat(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFormatGP of the asset to the related item.
// Sets o.R.Format to related.
// Adds o to related.R.Assets.
// Uses the global database handle and panics on error.
func (o *Asset) SetFormatGP(insert bool, related *Format) {
	if err := o.SetFormat(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetFormat of the asset to the related item.
// Sets o.R.Format to related.
// Adds o to related.R.Assets.
func (o *Asset) SetFormat(exec boil.Executor, insert bool, related *Format) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"format"}),
		strmangle.WhereClause("\"", "\"", 2, assetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Format = related.ID

	if o.R == nil {
		o.R = &assetR{
			Format: related,
		}
	} else {
		o.R.Format = related
	}

	if related.R == nil {
		related.R = &formatR{
			Assets: AssetSlice{o},
		}
	} else {
		related.R.Assets = append(related.R.Assets, o)
	}

	return nil
}

// SetVolumeG of the asset to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Assets.
// Uses the global database handle.
func (o *Asset) SetVolumeG(insert bool, related *Volume) error {
	return o.SetVolume(boil.GetDB(), insert, related)
}

// SetVolumeP of the asset to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Assets.
// Panics on error.
func (o *Asset) SetVolumeP(exec boil.Executor, insert bool, related *Volume) {
	if err := o.SetVolume(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeGP of the asset to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Assets.
// Uses the global database handle and panics on error.
func (o *Asset) SetVolumeGP(insert bool, related *Volume) {
	if err := o.SetVolume(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolume of the asset to the related item.
// Sets o.R.Volume to related.
// Adds o to related.R.Assets.
func (o *Asset) SetVolume(exec boil.Executor, insert bool, related *Volume) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"asset\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
		strmangle.WhereClause("\"", "\"", 2, assetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Volume = related.ID

	if o.R == nil {
		o.R = &assetR{
			Volume: related,
		}
	} else {
		o.R.Volume = related
	}

	if related.R == nil {
		related.R = &volumeR{
			Assets: AssetSlice{o},
		}
	} else {
		related.R.Assets = append(related.R.Assets, o)
	}

	return nil
}

// SetOrigAssetRevisionG of the asset to the related item.
// Sets o.R.OrigAssetRevision to related.
// Adds o to related.R.Orig.
// Uses the global database handle.
func (o *Asset) SetOrigAssetRevisionG(insert bool, related *AssetRevision) error {
	return o.SetOrigAssetRevision(boil.GetDB(), insert, related)
}

// SetOrigAssetRevisionP of the asset to the related item.
// Sets o.R.OrigAssetRevision to related.
// Adds o to related.R.Orig.
// Panics on error.
func (o *Asset) SetOrigAssetRevisionP(exec boil.Executor, insert bool, related *AssetRevision) {
	if err := o.SetOrigAssetRevision(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrigAssetRevisionGP of the asset to the related item.
// Sets o.R.OrigAssetRevision to related.
// Adds o to related.R.Orig.
// Uses the global database handle and panics on error.
func (o *Asset) SetOrigAssetRevisionGP(insert bool, related *AssetRevision) {
	if err := o.SetOrigAssetRevision(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrigAssetRevision of the asset to the related item.
// Sets o.R.OrigAssetRevision to related.
// Adds o to related.R.Orig.
func (o *Asset) SetOrigAssetRevision(exec boil.Executor, insert bool, related *AssetRevision) error {
	var err error

	if insert {
		related.Orig = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"asset_revision\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"orig"}),
			strmangle.WhereClause("\"", "\"", 2, assetRevisionPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Orig}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Orig = o.ID

	}

	if o.R == nil {
		o.R = &assetR{
			OrigAssetRevision: related,
		}
	} else {
		o.R.OrigAssetRevision = related
	}

	if related.R == nil {
		related.R = &assetRevisionR{
			Orig: o,
		}
	} else {
		related.R.Orig = o
	}
	return nil
}

// SetSlotAssetG of the asset to the related item.
// Sets o.R.SlotAsset to related.
// Adds o to related.R.Asset.
// Uses the global database handle.
func (o *Asset) SetSlotAssetG(insert bool, related *SlotAsset) error {
	return o.SetSlotAsset(boil.GetDB(), insert, related)
}

// SetSlotAssetP of the asset to the related item.
// Sets o.R.SlotAsset to related.
// Adds o to related.R.Asset.
// Panics on error.
func (o *Asset) SetSlotAssetP(exec boil.Executor, insert bool, related *SlotAsset) {
	if err := o.SetSlotAsset(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSlotAssetGP of the asset to the related item.
// Sets o.R.SlotAsset to related.
// Adds o to related.R.Asset.
// Uses the global database handle and panics on error.
func (o *Asset) SetSlotAssetGP(insert bool, related *SlotAsset) {
	if err := o.SetSlotAsset(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSlotAsset of the asset to the related item.
// Sets o.R.SlotAsset to related.
// Adds o to related.R.Asset.
func (o *Asset) SetSlotAsset(exec boil.Executor, insert bool, related *SlotAsset) error {
	var err error

	if insert {
		related.Asset = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"slot_asset\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
			strmangle.WhereClause("\"", "\"", 2, slotAssetPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Asset}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Asset = o.ID

	}

	if o.R == nil {
		o.R = &assetR{
			SlotAsset: related,
		}
	} else {
		o.R.SlotAsset = related
	}

	if related.R == nil {
		related.R = &slotAssetR{
			Asset: o,
		}
	} else {
		related.R.Asset = o
	}
	return nil
}

// SetTranscodeG of the asset to the related item.
// Sets o.R.Transcode to related.
// Adds o to related.R.Asset.
// Uses the global database handle.
func (o *Asset) SetTranscodeG(insert bool, related *Transcode) error {
	return o.SetTranscode(boil.GetDB(), insert, related)
}

// SetTranscodeP of the asset to the related item.
// Sets o.R.Transcode to related.
// Adds o to related.R.Asset.
// Panics on error.
func (o *Asset) SetTranscodeP(exec boil.Executor, insert bool, related *Transcode) {
	if err := o.SetTranscode(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTranscodeGP of the asset to the related item.
// Sets o.R.Transcode to related.
// Adds o to related.R.Asset.
// Uses the global database handle and panics on error.
func (o *Asset) SetTranscodeGP(insert bool, related *Transcode) {
	if err := o.SetTranscode(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetTranscode of the asset to the related item.
// Sets o.R.Transcode to related.
// Adds o to related.R.Asset.
func (o *Asset) SetTranscode(exec boil.Executor, insert bool, related *Transcode) error {
	var err error

	if insert {
		related.Asset = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"transcode\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
			strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Asset}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Asset = o.ID

	}

	if o.R == nil {
		o.R = &assetR{
			Transcode: related,
		}
	} else {
		o.R.Transcode = related
	}

	if related.R == nil {
		related.R = &transcodeR{
			Asset: o,
		}
	} else {
		related.R.Asset = o
	}
	return nil
}

// AddAssetRevisionsG adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.AssetRevisions.
// Sets related.R.Asset appropriately.
// Uses the global database handle.
func (o *Asset) AddAssetRevisionsG(insert bool, related ...*AssetRevision) error {
	return o.AddAssetRevisions(boil.GetDB(), insert, related...)
}

// AddAssetRevisionsP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.AssetRevisions.
// Sets related.R.Asset appropriately.
// Panics on error.
func (o *Asset) AddAssetRevisionsP(exec boil.Executor, insert bool, related ...*AssetRevision) {
	if err := o.AddAssetRevisions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssetRevisionsGP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.AssetRevisions.
// Sets related.R.Asset appropriately.
// Uses the global database handle and panics on error.
func (o *Asset) AddAssetRevisionsGP(insert bool, related ...*AssetRevision) {
	if err := o.AddAssetRevisions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssetRevisions adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.AssetRevisions.
// Sets related.R.Asset appropriately.
func (o *Asset) AddAssetRevisions(exec boil.Executor, insert bool, related ...*AssetRevision) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Asset = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset_revision\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
				strmangle.WhereClause("\"", "\"", 2, assetRevisionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Orig}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Asset = o.ID
		}
	}

	if o.R == nil {
		o.R = &assetR{
			AssetRevisions: related,
		}
	} else {
		o.R.AssetRevisions = append(o.R.AssetRevisions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetRevisionR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// AddAvatarsG adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Avatars.
// Sets related.R.Asset appropriately.
// Uses the global database handle.
func (o *Asset) AddAvatarsG(insert bool, related ...*Avatar) error {
	return o.AddAvatars(boil.GetDB(), insert, related...)
}

// AddAvatarsP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Avatars.
// Sets related.R.Asset appropriately.
// Panics on error.
func (o *Asset) AddAvatarsP(exec boil.Executor, insert bool, related ...*Avatar) {
	if err := o.AddAvatars(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAvatarsGP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Avatars.
// Sets related.R.Asset appropriately.
// Uses the global database handle and panics on error.
func (o *Asset) AddAvatarsGP(insert bool, related ...*Avatar) {
	if err := o.AddAvatars(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAvatars adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Avatars.
// Sets related.R.Asset appropriately.
func (o *Asset) AddAvatars(exec boil.Executor, insert bool, related ...*Avatar) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Asset = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"avatar\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
				strmangle.WhereClause("\"", "\"", 2, avatarPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Party}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Asset = o.ID
		}
	}

	if o.R == nil {
		o.R = &assetR{
			Avatars: related,
		}
	} else {
		o.R.Avatars = append(o.R.Avatars, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &avatarR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Asset appropriately.
// Uses the global database handle.
func (o *Asset) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Asset appropriately.
// Panics on error.
func (o *Asset) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Asset appropriately.
// Uses the global database handle and panics on error.
func (o *Asset) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Asset appropriately.
func (o *Asset) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Asset.Int = o.ID
			rel.Asset.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Asset.Int = o.ID
			rel.Asset.Valid = true
		}
	}

	if o.R == nil {
		o.R = &assetR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Asset's Notifications accordingly.
// Uses the global database handle.
func (o *Asset) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Asset's Notifications accordingly.
// Panics on error.
func (o *Asset) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Asset's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Asset) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// asset replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Asset's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Asset's Notifications accordingly.
func (o *Asset) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"asset\" = null where \"asset\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Asset.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Asset = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
// Uses the global database handle.
func (o *Asset) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
// Panics on error.
func (o *Asset) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
// Uses the global database handle and panics on error.
func (o *Asset) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Asset.
func (o *Asset) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Asset.Valid = false
		if rel.R != nil {
			rel.R.Asset = nil
		}
		if err = rel.Update(exec, "asset"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddOrigTranscodesG adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.OrigTranscodes.
// Sets related.R.Orig appropriately.
// Uses the global database handle.
func (o *Asset) AddOrigTranscodesG(insert bool, related ...*Transcode) error {
	return o.AddOrigTranscodes(boil.GetDB(), insert, related...)
}

// AddOrigTranscodesP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.OrigTranscodes.
// Sets related.R.Orig appropriately.
// Panics on error.
func (o *Asset) AddOrigTranscodesP(exec boil.Executor, insert bool, related ...*Transcode) {
	if err := o.AddOrigTranscodes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrigTranscodesGP adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.OrigTranscodes.
// Sets related.R.Orig appropriately.
// Uses the global database handle and panics on error.
func (o *Asset) AddOrigTranscodesGP(insert bool, related ...*Transcode) {
	if err := o.AddOrigTranscodes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddOrigTranscodes adds the given related objects to the existing relationships
// of the asset, optionally inserting them as new records.
// Appends related to o.R.OrigTranscodes.
// Sets related.R.Orig appropriately.
func (o *Asset) AddOrigTranscodes(exec boil.Executor, insert bool, related ...*Transcode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Orig = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transcode\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"orig"}),
				strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Asset}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Orig = o.ID
		}
	}

	if o.R == nil {
		o.R = &assetR{
			OrigTranscodes: related,
		}
	} else {
		o.R.OrigTranscodes = append(o.R.OrigTranscodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transcodeR{
				Orig: o,
			}
		} else {
			rel.R.Orig = o
		}
	}
	return nil
}

// AssetsG retrieves all records.
func AssetsG(mods ...qm.QueryMod) assetQuery {
	return Assets(boil.GetDB(), mods...)
}

// Assets retrieves all the records using an executor.
func Assets(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	mods = append(mods, qm.From("\"asset\""))
	return assetQuery{NewQuery(exec, mods...)}
}

// FindAssetG retrieves a single record by ID.
func FindAssetG(id int, selectCols ...string) (*Asset, error) {
	return FindAsset(boil.GetDB(), id, selectCols...)
}

// FindAssetGP retrieves a single record by ID, and panics on error.
func FindAssetGP(id int, selectCols ...string) *Asset {
	retobj, err := FindAsset(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAsset(exec boil.Executor, id int, selectCols ...string) (*Asset, error) {
	assetObj := &Asset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"asset\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(assetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from asset")
	}

	return assetObj, nil
}

// FindAssetP retrieves a single record by ID with an executor, and panics on error.
func FindAssetP(exec boil.Executor, id int, selectCols ...string) *Asset {
	retobj, err := FindAsset(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Asset) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Asset) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Asset) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Asset) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no asset provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	assetInsertCacheMut.RLock()
	cache, cached := assetInsertCache[key]
	assetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			assetColumns,
			assetColumnsWithDefault,
			assetColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(assetType, assetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"asset\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"asset\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into asset")
	}

	if !cached {
		assetInsertCacheMut.Lock()
		assetInsertCache[key] = cache
		assetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Asset record. See Update for
// whitelist behavior description.
func (o *Asset) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Asset record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Asset) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Asset, and panics on error.
// See Update for whitelist behavior description.
func (o *Asset) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Asset.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Asset) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	assetUpdateCacheMut.RLock()
	cache, cached := assetUpdateCache[key]
	assetUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(assetColumns, assetPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update asset, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"asset\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, assetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, append(wl, assetPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update asset row")
	}

	if !cached {
		assetUpdateCacheMut.Lock()
		assetUpdateCache[key] = cache
		assetUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q assetQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q assetQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for asset")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o AssetSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o AssetSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o AssetSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AssetSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"asset\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(assetPrimaryKeyColumns), len(colNames)+1, len(assetPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in asset slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Asset) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Asset) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Asset) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Asset) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no asset provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(assetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	assetUpsertCacheMut.RLock()
	cache, cached := assetUpsertCache[key]
	assetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			assetColumns,
			assetColumnsWithDefault,
			assetColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			assetColumns,
			assetPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert asset, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(assetPrimaryKeyColumns))
			copy(conflict, assetPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"asset\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(assetType, assetMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(assetType, assetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert asset")
	}

	if !cached {
		assetUpsertCacheMut.Lock()
		assetUpsertCache[key] = cache
		assetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Asset record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Asset) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Asset record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Asset) DeleteG() error {
	if o == nil {
		return errors.New("public: no Asset provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Asset record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Asset) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Asset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Asset) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Asset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), assetPrimaryKeyMapping)
	query := "DELETE FROM \"asset\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from asset")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q assetQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q assetQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no assetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from asset")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o AssetSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o AssetSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Asset slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o AssetSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AssetSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Asset slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(assetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"asset\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, assetPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(assetPrimaryKeyColumns), 1, len(assetPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from asset slice")
	}

	if len(assetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Asset) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Asset) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Asset) ReloadG() error {
	if o == nil {
		return errors.New("public: no Asset provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Asset) Reload(exec boil.Executor) error {
	ret, err := FindAsset(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AssetSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *AssetSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty AssetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AssetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	assets := AssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), assetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"asset\".* FROM \"asset\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, assetPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(assetPrimaryKeyColumns), 1, len(assetPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&assets)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in AssetSlice")
	}

	*o = assets

	return nil
}

// AssetExists checks if the Asset row exists.
func AssetExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"asset\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if asset exists")
	}

	return exists, nil
}

// AssetExistsG checks if the Asset row exists.
func AssetExistsG(id int) (bool, error) {
	return AssetExists(boil.GetDB(), id)
}

// AssetExistsGP checks if the Asset row exists. Panics on error.
func AssetExistsGP(id int) bool {
	e, err := AssetExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// AssetExistsP checks if the Asset row exists. Panics on error.
func AssetExistsP(exec boil.Executor, id int) bool {
	e, err := AssetExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
