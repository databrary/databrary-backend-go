// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testPlayEvolutionsLocks(t *testing.T) {
	t.Parallel()

	query := PlayEvolutionsLocks(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPlayEvolutionsLocksLive(t *testing.T) {
	all, err := PlayEvolutionsLocks(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all PlayEvolutionsLocks err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM play_evolutions_lock) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM play_evolutions_lock) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("PlayEvolutionsLocksLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testPlayEvolutionsLocksDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playEvolutionsLock.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayEvolutionsLocksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PlayEvolutionsLocks(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayEvolutionsLocksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlayEvolutionsLockSlice{playEvolutionsLock}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPlayEvolutionsLocksExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := PlayEvolutionsLockExists(tx, playEvolutionsLock.Lock)
	if err != nil {
		t.Errorf("Unable to check if PlayEvolutionsLock exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PlayEvolutionsLockExistsG to return true, but got false.")
	}
}

func testPlayEvolutionsLocksFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	playEvolutionsLockFound, err := FindPlayEvolutionsLock(tx, playEvolutionsLock.Lock)
	if err != nil {
		t.Error(err)
	}

	if playEvolutionsLockFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPlayEvolutionsLocksBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = PlayEvolutionsLocks(tx).Bind(playEvolutionsLock); err != nil {
		t.Error(err)
	}
}

func testPlayEvolutionsLocksOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := PlayEvolutionsLocks(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPlayEvolutionsLocksAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLockOne := &PlayEvolutionsLock{}
	playEvolutionsLockTwo := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLockOne, playEvolutionsLockDBTypes, false, playEvolutionsLockColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}
	if err = randomize.Struct(seed, playEvolutionsLockTwo, playEvolutionsLockDBTypes, false, playEvolutionsLockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLockOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playEvolutionsLockTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PlayEvolutionsLocks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPlayEvolutionsLocksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLockOne := &PlayEvolutionsLock{}
	playEvolutionsLockTwo := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLockOne, playEvolutionsLockDBTypes, false, playEvolutionsLockColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}
	if err = randomize.Struct(seed, playEvolutionsLockTwo, playEvolutionsLockDBTypes, false, playEvolutionsLockColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLockOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = playEvolutionsLockTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func playEvolutionsLockBeforeInsertHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockAfterInsertHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockAfterSelectHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockBeforeUpdateHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockAfterUpdateHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockBeforeDeleteHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockAfterDeleteHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockBeforeUpsertHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func playEvolutionsLockAfterUpsertHook(e boil.Executor, o *PlayEvolutionsLock) error {
	*o = PlayEvolutionsLock{}
	return nil
}

func testPlayEvolutionsLocksHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	empty := &PlayEvolutionsLock{}

	AddPlayEvolutionsLockHook(boil.BeforeInsertHook, playEvolutionsLockBeforeInsertHook)
	if err = playEvolutionsLock.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockBeforeInsertHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.AfterInsertHook, playEvolutionsLockAfterInsertHook)
	if err = playEvolutionsLock.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockAfterInsertHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.AfterSelectHook, playEvolutionsLockAfterSelectHook)
	if err = playEvolutionsLock.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockAfterSelectHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.BeforeUpdateHook, playEvolutionsLockBeforeUpdateHook)
	if err = playEvolutionsLock.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockBeforeUpdateHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.AfterUpdateHook, playEvolutionsLockAfterUpdateHook)
	if err = playEvolutionsLock.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockAfterUpdateHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.BeforeDeleteHook, playEvolutionsLockBeforeDeleteHook)
	if err = playEvolutionsLock.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockBeforeDeleteHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.AfterDeleteHook, playEvolutionsLockAfterDeleteHook)
	if err = playEvolutionsLock.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockAfterDeleteHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.BeforeUpsertHook, playEvolutionsLockBeforeUpsertHook)
	if err = playEvolutionsLock.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockBeforeUpsertHooks = []PlayEvolutionsLockHook{}

	AddPlayEvolutionsLockHook(boil.AfterUpsertHook, playEvolutionsLockAfterUpsertHook)
	if err = playEvolutionsLock.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(playEvolutionsLock, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", playEvolutionsLock)
	}
	playEvolutionsLockAfterUpsertHooks = []PlayEvolutionsLockHook{}
}
func testPlayEvolutionsLocksInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayEvolutionsLocksInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx, playEvolutionsLockColumns...); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPlayEvolutionsLocksReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = playEvolutionsLock.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testPlayEvolutionsLocksReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := PlayEvolutionsLockSlice{playEvolutionsLock}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testPlayEvolutionsLocksSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := PlayEvolutionsLocks(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	playEvolutionsLockDBTypes = map[string]string{`Lock`: `integer`}
	_                         = bytes.MinRead
)

func testPlayEvolutionsLocksUpdate(t *testing.T) {
	t.Parallel()

	if len(playEvolutionsLockColumns) == len(playEvolutionsLockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := playEvolutionsLockColumnsWithDefault

	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	if err = playEvolutionsLock.Update(tx); err != nil {
		t.Error(err)
	}
}

func testPlayEvolutionsLocksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(playEvolutionsLockColumns) == len(playEvolutionsLockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := playEvolutionsLockPrimaryKeyColumns

	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(playEvolutionsLockColumns, playEvolutionsLockPrimaryKeyColumns) {
		fields = playEvolutionsLockColumns
	} else {
		fields = strmangle.SetComplement(
			playEvolutionsLockColumns,
			playEvolutionsLockPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(playEvolutionsLock))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := PlayEvolutionsLockSlice{playEvolutionsLock}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testPlayEvolutionsLocksUpsert(t *testing.T) {
	t.Parallel()

	if len(playEvolutionsLockColumns) == len(playEvolutionsLockPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	playEvolutionsLock := &PlayEvolutionsLock{}
	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, true); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = playEvolutionsLock.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert PlayEvolutionsLock: %s", err)
	}

	count, err := PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := playEvolutionsLockPrimaryKeyColumns

	if err = randomize.Struct(seed, playEvolutionsLock, playEvolutionsLockDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize PlayEvolutionsLock struct: %s", err)
	}

	if err = playEvolutionsLock.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert PlayEvolutionsLock: %s", err)
	}

	count, err = PlayEvolutionsLocks(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
