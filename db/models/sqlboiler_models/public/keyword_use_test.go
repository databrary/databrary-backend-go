// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testKeywordUses(t *testing.T) {
	t.Parallel()

	query := KeywordUses(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testKeywordUsesLive(t *testing.T) {
	all, err := KeywordUses(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all KeywordUses err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM keyword_use) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM keyword_use) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("KeywordUsesLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testKeywordUsesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = keywordUse.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeywordUsesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = KeywordUses(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeywordUsesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := KeywordUseSlice{keywordUse}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testKeywordUsesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := KeywordUseExists(tx, keywordUse.Container, keywordUse.Segment, keywordUse.Tag)
	if err != nil {
		t.Errorf("Unable to check if KeywordUse exists: %s", err)
	}
	if !e {
		t.Errorf("Expected KeywordUseExistsG to return true, but got false.")
	}
}

func testKeywordUsesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	keywordUseFound, err := FindKeywordUse(tx, keywordUse.Container, keywordUse.Segment, keywordUse.Tag)
	if err != nil {
		t.Error(err)
	}

	if keywordUseFound == nil {
		t.Error("want a record, got nil")
	}
}

func testKeywordUsesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = KeywordUses(tx).Bind(keywordUse); err != nil {
		t.Error(err)
	}
}

func testKeywordUsesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := KeywordUses(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testKeywordUsesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUseOne := &KeywordUse{}
	keywordUseTwo := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUseOne, keywordUseDBTypes, false, keywordUseColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}
	if err = randomize.Struct(seed, keywordUseTwo, keywordUseDBTypes, false, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUseOne.Segment = custom_types.SegmentRandom()
	keywordUseTwo.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = keywordUseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := KeywordUses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testKeywordUsesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUseOne := &KeywordUse{}
	keywordUseTwo := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUseOne, keywordUseDBTypes, false, keywordUseColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}
	if err = randomize.Struct(seed, keywordUseTwo, keywordUseDBTypes, false, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUseOne.Segment = custom_types.SegmentRandom()
	keywordUseTwo.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUseOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = keywordUseTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func keywordUseBeforeInsertHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseAfterInsertHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseAfterSelectHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseBeforeUpdateHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseAfterUpdateHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseBeforeDeleteHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseAfterDeleteHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseBeforeUpsertHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func keywordUseAfterUpsertHook(e boil.Executor, o *KeywordUse) error {
	*o = KeywordUse{}
	return nil
}

func testKeywordUsesHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	empty := &KeywordUse{}

	AddKeywordUseHook(boil.BeforeInsertHook, keywordUseBeforeInsertHook)
	if err = keywordUse.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseBeforeInsertHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.AfterInsertHook, keywordUseAfterInsertHook)
	if err = keywordUse.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseAfterInsertHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.AfterSelectHook, keywordUseAfterSelectHook)
	if err = keywordUse.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseAfterSelectHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.BeforeUpdateHook, keywordUseBeforeUpdateHook)
	if err = keywordUse.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseBeforeUpdateHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.AfterUpdateHook, keywordUseAfterUpdateHook)
	if err = keywordUse.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseAfterUpdateHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.BeforeDeleteHook, keywordUseBeforeDeleteHook)
	if err = keywordUse.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseBeforeDeleteHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.AfterDeleteHook, keywordUseAfterDeleteHook)
	if err = keywordUse.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseAfterDeleteHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.BeforeUpsertHook, keywordUseBeforeUpsertHook)
	if err = keywordUse.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseBeforeUpsertHooks = []KeywordUseHook{}

	AddKeywordUseHook(boil.AfterUpsertHook, keywordUseAfterUpsertHook)
	if err = keywordUse.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(keywordUse, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", keywordUse)
	}
	keywordUseAfterUpsertHooks = []KeywordUseHook{}
}
func testKeywordUsesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeywordUsesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx, keywordUseColumns...); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testKeywordUsesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = keywordUse.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testKeywordUsesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := KeywordUseSlice{keywordUse}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testKeywordUsesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := KeywordUses(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	keywordUseDBTypes = map[string]string{`Container`: `integer`, `Segment`: `USER-DEFINED`, `Tag`: `integer`, `Who`: `integer`}
	_                 = bytes.MinRead
)

func testKeywordUsesUpdate(t *testing.T) {
	t.Parallel()

	if len(keywordUseColumns) == len(keywordUsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := keywordUseColumnsWithDefault
	blacklist = append(blacklist, keywordUseColumnsWithCustom...)

	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	if err = keywordUse.Update(tx); err != nil {
		t.Error(err)
	}
}

func testKeywordUsesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(keywordUseColumns) == len(keywordUsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := keywordUsePrimaryKeyColumns
	blacklist = append(blacklist, keywordUseColumnsWithCustom...)

	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(keywordUseColumns, keywordUsePrimaryKeyColumns) {
		fields = keywordUseColumns
	} else {
		fields = strmangle.SetComplement(
			keywordUseColumns,
			keywordUsePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(keywordUse))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := KeywordUseSlice{keywordUse}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testKeywordUsesUpsert(t *testing.T) {
	t.Parallel()

	if len(keywordUseColumns) == len(keywordUsePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	keywordUse := &KeywordUse{}
	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, true, keywordUseColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = keywordUse.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert KeywordUse: %s", err)
	}

	count, err := KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := keywordUsePrimaryKeyColumns

	blacklist = append(blacklist, keywordUseColumnsWithCustom...)

	if err = randomize.Struct(seed, keywordUse, keywordUseDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize KeywordUse struct: %s", err)
	}

	keywordUse.Segment = custom_types.SegmentRandom()

	if err = keywordUse.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert KeywordUse: %s", err)
	}

	count, err = KeywordUses(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
