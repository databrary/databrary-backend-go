// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"reflect"
	"strings"
	"sync"
	"time"
)

// SlotAsset is an object representing the database table.
type SlotAsset struct {
	Container int                  `db:"container" json:"slotAsset_container"`
	Segment   custom_types.Segment `db:"segment" json:"slotAsset_segment"`
	Asset     int                  `db:"asset" json:"slotAsset_asset"`

	R *slotAssetR `db:"-" json:"-"`
	L slotAssetL  `db:"-" json:"-"`
}

// slotAssetR is where relationships are stored.
type slotAssetR struct {
	Asset         *Asset
	Container     *Container
	AssetExcerpts ExcerptSlice
}

// slotAssetL is where Load methods for each relationship are stored.
type slotAssetL struct{}

var (
	slotAssetColumns               = []string{"container", "segment", "asset"}
	slotAssetColumnsWithoutDefault = []string{"container", "segment", "asset"}
	slotAssetColumnsWithDefault    = []string{}
	slotAssetColumnsWithCustom     = []string{"segment"}

	slotAssetPrimaryKeyColumns = []string{"asset"}
)

type (
	// SlotAssetSlice is an alias for a slice of pointers to SlotAsset.
	// This should generally be used opposed to []SlotAsset.
	SlotAssetSlice []*SlotAsset
	// SlotAssetHook is the signature for custom SlotAsset hook methods
	SlotAssetHook func(boil.Executor, *SlotAsset) error

	slotAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	slotAssetType    = reflect.TypeOf(&SlotAsset{})
	slotAssetMapping = queries.MakeStructMapping(slotAssetType)

	slotAssetPrimaryKeyMapping, _ = queries.BindMapping(slotAssetType, slotAssetMapping, slotAssetPrimaryKeyColumns)

	slotAssetInsertCacheMut sync.RWMutex
	slotAssetInsertCache    = make(map[string]insertCache)
	slotAssetUpdateCacheMut sync.RWMutex
	slotAssetUpdateCache    = make(map[string]updateCache)
	slotAssetUpsertCacheMut sync.RWMutex
	slotAssetUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var slotAssetBeforeInsertHooks []SlotAssetHook
var slotAssetBeforeUpdateHooks []SlotAssetHook
var slotAssetBeforeDeleteHooks []SlotAssetHook
var slotAssetBeforeUpsertHooks []SlotAssetHook

var slotAssetAfterInsertHooks []SlotAssetHook
var slotAssetAfterSelectHooks []SlotAssetHook
var slotAssetAfterUpdateHooks []SlotAssetHook
var slotAssetAfterDeleteHooks []SlotAssetHook
var slotAssetAfterUpsertHooks []SlotAssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SlotAsset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SlotAsset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SlotAsset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SlotAsset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SlotAsset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SlotAsset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SlotAsset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SlotAsset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SlotAsset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSlotAssetHook registers your hook function for all future operations.
func AddSlotAssetHook(hookPoint boil.HookPoint, slotAssetHook SlotAssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		slotAssetBeforeInsertHooks = append(slotAssetBeforeInsertHooks, slotAssetHook)
	case boil.BeforeUpdateHook:
		slotAssetBeforeUpdateHooks = append(slotAssetBeforeUpdateHooks, slotAssetHook)
	case boil.BeforeDeleteHook:
		slotAssetBeforeDeleteHooks = append(slotAssetBeforeDeleteHooks, slotAssetHook)
	case boil.BeforeUpsertHook:
		slotAssetBeforeUpsertHooks = append(slotAssetBeforeUpsertHooks, slotAssetHook)
	case boil.AfterInsertHook:
		slotAssetAfterInsertHooks = append(slotAssetAfterInsertHooks, slotAssetHook)
	case boil.AfterSelectHook:
		slotAssetAfterSelectHooks = append(slotAssetAfterSelectHooks, slotAssetHook)
	case boil.AfterUpdateHook:
		slotAssetAfterUpdateHooks = append(slotAssetAfterUpdateHooks, slotAssetHook)
	case boil.AfterDeleteHook:
		slotAssetAfterDeleteHooks = append(slotAssetAfterDeleteHooks, slotAssetHook)
	case boil.AfterUpsertHook:
		slotAssetAfterUpsertHooks = append(slotAssetAfterUpsertHooks, slotAssetHook)
	}
}

// OneP returns a single slotAsset record from the query, and panics on error.
func (q slotAssetQuery) OneP() *SlotAsset {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single slotAsset record from the query.
func (q slotAssetQuery) One() (*SlotAsset, error) {
	o := &SlotAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for slot_asset")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SlotAsset records from the query, and panics on error.
func (q slotAssetQuery) AllP() SlotAssetSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SlotAsset records from the query.
func (q slotAssetQuery) All() (SlotAssetSlice, error) {
	var o SlotAssetSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to SlotAsset slice")
	}

	if len(slotAssetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SlotAsset records in the query, and panics on error.
func (q slotAssetQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SlotAsset records in the query.
func (q slotAssetQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count slot_asset rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q slotAssetQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q slotAssetQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if slot_asset exists")
	}

	return count > 0, nil
}

// AssetG pointed to by the foreign key.
func (o *SlotAsset) AssetG(mods ...qm.QueryMod) assetQuery {
	return o.AssetByFk(boil.GetDB(), mods...)
}

// Asset pointed to by the foreign key.
func (o *SlotAsset) AssetByFk(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Asset),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// ContainerG pointed to by the foreign key.
func (o *SlotAsset) ContainerG(mods ...qm.QueryMod) containerQuery {
	return o.ContainerByFk(boil.GetDB(), mods...)
}

// Container pointed to by the foreign key.
func (o *SlotAsset) ContainerByFk(exec boil.Executor, mods ...qm.QueryMod) containerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Container),
	}

	queryMods = append(queryMods, mods...)

	query := Containers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"container\"")

	return query
}

// AssetExcerptsG retrieves all the excerpt's excerpt via asset column.
func (o *SlotAsset) AssetExcerptsG(mods ...qm.QueryMod) excerptQuery {
	return o.AssetExcerptsByFk(boil.GetDB(), mods...)
}

// AssetExcerpts retrieves all the excerpt's excerpt with an executor via asset column.
func (o *SlotAsset) AssetExcerptsByFk(exec boil.Executor, mods ...qm.QueryMod) excerptQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"asset\"=?", o.Asset),
	)

	query := Excerpts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"excerpt\" as \"a\"")
	return query
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (slotAssetL) LoadAsset(e boil.Executor, singular bool, maybeSlotAsset interface{}) error {
	var slice []*SlotAsset
	var object *SlotAsset

	count := 1
	if singular {
		object = maybeSlotAsset.(*SlotAsset)
	} else {
		slice = *maybeSlotAsset.(*SlotAssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &slotAssetR{}
		}
		args[0] = object.Asset
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &slotAssetR{}
			}
			args[i] = obj.Asset
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}
	defer results.Close()

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if len(slotAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Asset = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Asset == foreign.ID {
				local.R.Asset = foreign
				break
			}
		}
	}

	return nil
}

// LoadContainer allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (slotAssetL) LoadContainer(e boil.Executor, singular bool, maybeSlotAsset interface{}) error {
	var slice []*SlotAsset
	var object *SlotAsset

	count := 1
	if singular {
		object = maybeSlotAsset.(*SlotAsset)
	} else {
		slice = *maybeSlotAsset.(*SlotAssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &slotAssetR{}
		}
		args[0] = object.Container
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &slotAssetR{}
			}
			args[i] = obj.Container
		}
	}

	query := fmt.Sprintf(
		"select * from \"container\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Container")
	}
	defer results.Close()

	var resultSlice []*Container
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Container")
	}

	if len(slotAssetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Container = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Container == foreign.ID {
				local.R.Container = foreign
				break
			}
		}
	}

	return nil
}

// LoadAssetExcerpts allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (slotAssetL) LoadAssetExcerpts(e boil.Executor, singular bool, maybeSlotAsset interface{}) error {
	var slice []*SlotAsset
	var object *SlotAsset

	count := 1
	if singular {
		object = maybeSlotAsset.(*SlotAsset)
	} else {
		slice = *maybeSlotAsset.(*SlotAssetSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &slotAssetR{}
		}
		args[0] = object.Asset
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &slotAssetR{}
			}
			args[i] = obj.Asset
		}
	}

	query := fmt.Sprintf(
		"select * from \"excerpt\" where \"asset\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load excerpt")
	}
	defer results.Close()

	var resultSlice []*Excerpt
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice excerpt")
	}

	if len(excerptAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AssetExcerpts = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.Asset == foreign.Asset {
				local.R.AssetExcerpts = append(local.R.AssetExcerpts, foreign)
				break
			}
		}
	}

	return nil
}

// SetAssetG of the slot_asset to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.SlotAsset.
// Uses the global database handle.
func (o *SlotAsset) SetAssetG(insert bool, related *Asset) error {
	return o.SetAsset(boil.GetDB(), insert, related)
}

// SetAssetP of the slot_asset to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.SlotAsset.
// Panics on error.
func (o *SlotAsset) SetAssetP(exec boil.Executor, insert bool, related *Asset) {
	if err := o.SetAsset(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAssetGP of the slot_asset to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.SlotAsset.
// Uses the global database handle and panics on error.
func (o *SlotAsset) SetAssetGP(insert bool, related *Asset) {
	if err := o.SetAsset(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAsset of the slot_asset to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.SlotAsset.
func (o *SlotAsset) SetAsset(exec boil.Executor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"slot_asset\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
		strmangle.WhereClause("\"", "\"", 2, slotAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Asset}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Asset = related.ID

	if o.R == nil {
		o.R = &slotAssetR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			SlotAsset: o,
		}
	} else {
		related.R.SlotAsset = o
	}

	return nil
}

// SetContainerG of the slot_asset to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.SlotAssets.
// Uses the global database handle.
func (o *SlotAsset) SetContainerG(insert bool, related *Container) error {
	return o.SetContainer(boil.GetDB(), insert, related)
}

// SetContainerP of the slot_asset to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.SlotAssets.
// Panics on error.
func (o *SlotAsset) SetContainerP(exec boil.Executor, insert bool, related *Container) {
	if err := o.SetContainer(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainerGP of the slot_asset to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.SlotAssets.
// Uses the global database handle and panics on error.
func (o *SlotAsset) SetContainerGP(insert bool, related *Container) {
	if err := o.SetContainer(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainer of the slot_asset to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.SlotAssets.
func (o *SlotAsset) SetContainer(exec boil.Executor, insert bool, related *Container) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"slot_asset\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
		strmangle.WhereClause("\"", "\"", 2, slotAssetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Asset}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Container = related.ID

	if o.R == nil {
		o.R = &slotAssetR{
			Container: related,
		}
	} else {
		o.R.Container = related
	}

	if related.R == nil {
		related.R = &containerR{
			SlotAssets: SlotAssetSlice{o},
		}
	} else {
		related.R.SlotAssets = append(related.R.SlotAssets, o)
	}

	return nil
}

// AddAssetExcerptsG adds the given related objects to the existing relationships
// of the slot_asset, optionally inserting them as new records.
// Appends related to o.R.AssetExcerpts.
// Sets related.R.Asset appropriately.
// Uses the global database handle.
func (o *SlotAsset) AddAssetExcerptsG(insert bool, related ...*Excerpt) error {
	return o.AddAssetExcerpts(boil.GetDB(), insert, related...)
}

// AddAssetExcerptsP adds the given related objects to the existing relationships
// of the slot_asset, optionally inserting them as new records.
// Appends related to o.R.AssetExcerpts.
// Sets related.R.Asset appropriately.
// Panics on error.
func (o *SlotAsset) AddAssetExcerptsP(exec boil.Executor, insert bool, related ...*Excerpt) {
	if err := o.AddAssetExcerpts(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssetExcerptsGP adds the given related objects to the existing relationships
// of the slot_asset, optionally inserting them as new records.
// Appends related to o.R.AssetExcerpts.
// Sets related.R.Asset appropriately.
// Uses the global database handle and panics on error.
func (o *SlotAsset) AddAssetExcerptsGP(insert bool, related ...*Excerpt) {
	if err := o.AddAssetExcerpts(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssetExcerpts adds the given related objects to the existing relationships
// of the slot_asset, optionally inserting them as new records.
// Appends related to o.R.AssetExcerpts.
// Sets related.R.Asset appropriately.
func (o *SlotAsset) AddAssetExcerpts(exec boil.Executor, insert bool, related ...*Excerpt) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Asset = o.Asset
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"excerpt\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
				strmangle.WhereClause("\"", "\"", 2, excerptPrimaryKeyColumns),
			)
			values := []interface{}{o.Asset, rel.Asset, rel.Segment}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Asset = o.Asset
		}
	}

	if o.R == nil {
		o.R = &slotAssetR{
			AssetExcerpts: related,
		}
	} else {
		o.R.AssetExcerpts = append(o.R.AssetExcerpts, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &excerptR{
				Asset: o,
			}
		} else {
			rel.R.Asset = o
		}
	}
	return nil
}

// SlotAssetsG retrieves all records.
func SlotAssetsG(mods ...qm.QueryMod) slotAssetQuery {
	return SlotAssets(boil.GetDB(), mods...)
}

// SlotAssets retrieves all the records using an executor.
func SlotAssets(exec boil.Executor, mods ...qm.QueryMod) slotAssetQuery {
	mods = append(mods, qm.From("\"slot_asset\""))
	return slotAssetQuery{NewQuery(exec, mods...)}
}

// FindSlotAssetG retrieves a single record by ID.
func FindSlotAssetG(asset int, selectCols ...string) (*SlotAsset, error) {
	return FindSlotAsset(boil.GetDB(), asset, selectCols...)
}

// FindSlotAssetGP retrieves a single record by ID, and panics on error.
func FindSlotAssetGP(asset int, selectCols ...string) *SlotAsset {
	retobj, err := FindSlotAsset(boil.GetDB(), asset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSlotAsset retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSlotAsset(exec boil.Executor, asset int, selectCols ...string) (*SlotAsset, error) {
	slotAssetObj := &SlotAsset{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"slot_asset\" where \"asset\"=$1", sel,
	)

	q := queries.Raw(exec, query, asset)

	err := q.Bind(slotAssetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from slot_asset")
	}

	return slotAssetObj, nil
}

// FindSlotAssetP retrieves a single record by ID with an executor, and panics on error.
func FindSlotAssetP(exec boil.Executor, asset int, selectCols ...string) *SlotAsset {
	retobj, err := FindSlotAsset(exec, asset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SlotAsset) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SlotAsset) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SlotAsset) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SlotAsset) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no slot_asset provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotAssetColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	slotAssetInsertCacheMut.RLock()
	cache, cached := slotAssetInsertCache[key]
	slotAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			slotAssetColumns,
			slotAssetColumnsWithDefault,
			slotAssetColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"slot_asset\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"slot_asset\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into slot_asset")
	}

	if !cached {
		slotAssetInsertCacheMut.Lock()
		slotAssetInsertCache[key] = cache
		slotAssetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single SlotAsset record. See Update for
// whitelist behavior description.
func (o *SlotAsset) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single SlotAsset record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *SlotAsset) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the SlotAsset, and panics on error.
// See Update for whitelist behavior description.
func (o *SlotAsset) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the SlotAsset.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *SlotAsset) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	slotAssetUpdateCacheMut.RLock()
	cache, cached := slotAssetUpdateCache[key]
	slotAssetUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(slotAssetColumns, slotAssetPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update slot_asset, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"slot_asset\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, slotAssetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, append(wl, slotAssetPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update slot_asset row")
	}

	if !cached {
		slotAssetUpdateCacheMut.Lock()
		slotAssetUpdateCache[key] = cache
		slotAssetUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q slotAssetQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q slotAssetQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for slot_asset")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o SlotAssetSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o SlotAssetSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SlotAssetSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SlotAssetSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"slot_asset\" SET %s WHERE (\"asset\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(slotAssetPrimaryKeyColumns), len(colNames)+1, len(slotAssetPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in slotAsset slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *SlotAsset) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *SlotAsset) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SlotAsset) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *SlotAsset) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no slot_asset provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotAssetColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	slotAssetUpsertCacheMut.RLock()
	cache, cached := slotAssetUpsertCache[key]
	slotAssetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			slotAssetColumns,
			slotAssetColumnsWithDefault,
			slotAssetColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			slotAssetColumns,
			slotAssetPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert slot_asset, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(slotAssetPrimaryKeyColumns))
			copy(conflict, slotAssetPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"slot_asset\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert slot_asset")
	}

	if !cached {
		slotAssetUpsertCacheMut.Lock()
		slotAssetUpsertCache[key] = cache
		slotAssetUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single SlotAsset record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SlotAsset) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single SlotAsset record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *SlotAsset) DeleteG() error {
	if o == nil {
		return errors.New("public: no SlotAsset provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single SlotAsset record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SlotAsset) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single SlotAsset record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SlotAsset) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no SlotAsset provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), slotAssetPrimaryKeyMapping)
	query := "DELETE FROM \"slot_asset\" WHERE \"asset\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from slot_asset")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q slotAssetQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q slotAssetQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no slotAssetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from slot_asset")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o SlotAssetSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o SlotAssetSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no SlotAsset slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SlotAssetSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SlotAssetSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no SlotAsset slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(slotAssetBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"slot_asset\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, slotAssetPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(slotAssetPrimaryKeyColumns), 1, len(slotAssetPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from slotAsset slice")
	}

	if len(slotAssetAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *SlotAsset) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SlotAsset) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *SlotAsset) ReloadG() error {
	if o == nil {
		return errors.New("public: no SlotAsset provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SlotAsset) Reload(exec boil.Executor) error {
	ret, err := FindSlotAsset(exec, o.Asset)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SlotAssetSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SlotAssetSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlotAssetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty SlotAssetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SlotAssetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slotAssets := SlotAssetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), slotAssetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"slot_asset\".* FROM \"slot_asset\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, slotAssetPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(slotAssetPrimaryKeyColumns), 1, len(slotAssetPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&slotAssets)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in SlotAssetSlice")
	}

	*o = slotAssets

	return nil
}

// SlotAssetExists checks if the SlotAsset row exists.
func SlotAssetExists(exec boil.Executor, asset int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"slot_asset\" where \"asset\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, asset)
	}

	row := exec.QueryRow(query, asset)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if slot_asset exists")
	}

	return exists, nil
}

// SlotAssetExistsG checks if the SlotAsset row exists.
func SlotAssetExistsG(asset int) (bool, error) {
	return SlotAssetExists(boil.GetDB(), asset)
}

// SlotAssetExistsGP checks if the SlotAsset row exists. Panics on error.
func SlotAssetExistsGP(asset int) bool {
	e, err := SlotAssetExists(boil.GetDB(), asset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SlotAssetExistsP checks if the SlotAsset row exists. Panics on error.
func SlotAssetExistsP(exec boil.Executor, asset int) bool {
	e, err := SlotAssetExists(exec, asset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
