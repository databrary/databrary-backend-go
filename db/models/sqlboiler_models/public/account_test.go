// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testAccounts(t *testing.T) {
	t.Parallel()

	query := Accounts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccountsLive(t *testing.T) {
	all, err := Accounts(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Accounts err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM account) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM account) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("AccountsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testAccountsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = account.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Accounts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AccountSlice{account}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AccountExists(tx, account.ID)
	if err != nil {
		t.Errorf("Unable to check if Account exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountExistsG to return true, but got false.")
	}
}

func testAccountsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	accountFound, err := FindAccount(tx, account.ID)
	if err != nil {
		t.Error(err)
	}

	if accountFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccountsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Accounts(tx).Bind(account); err != nil {
		t.Error(err)
	}
}

func testAccountsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Accounts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountOne := &Account{}
	accountTwo := &Account{}
	if err = randomize.Struct(seed, accountOne, accountDBTypes, false, accountColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err = randomize.Struct(seed, accountTwo, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = accountTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Accounts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountOne := &Account{}
	accountTwo := &Account{}
	if err = randomize.Struct(seed, accountOne, accountDBTypes, false, accountColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err = randomize.Struct(seed, accountTwo, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = accountOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = accountTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accountBeforeInsertHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountAfterInsertHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountAfterSelectHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountBeforeUpdateHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountAfterUpdateHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountBeforeDeleteHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountAfterDeleteHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountBeforeUpsertHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func accountAfterUpsertHook(e boil.Executor, o *Account) error {
	*o = Account{}
	return nil
}

func testAccountsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	empty := &Account{}

	AddAccountHook(boil.BeforeInsertHook, accountBeforeInsertHook)
	if err = account.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", account)
	}
	accountBeforeInsertHooks = []AccountHook{}

	AddAccountHook(boil.AfterInsertHook, accountAfterInsertHook)
	if err = account.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", account)
	}
	accountAfterInsertHooks = []AccountHook{}

	AddAccountHook(boil.AfterSelectHook, accountAfterSelectHook)
	if err = account.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", account)
	}
	accountAfterSelectHooks = []AccountHook{}

	AddAccountHook(boil.BeforeUpdateHook, accountBeforeUpdateHook)
	if err = account.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", account)
	}
	accountBeforeUpdateHooks = []AccountHook{}

	AddAccountHook(boil.AfterUpdateHook, accountAfterUpdateHook)
	if err = account.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", account)
	}
	accountAfterUpdateHooks = []AccountHook{}

	AddAccountHook(boil.BeforeDeleteHook, accountBeforeDeleteHook)
	if err = account.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", account)
	}
	accountBeforeDeleteHooks = []AccountHook{}

	AddAccountHook(boil.AfterDeleteHook, accountAfterDeleteHook)
	if err = account.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", account)
	}
	accountAfterDeleteHooks = []AccountHook{}

	AddAccountHook(boil.BeforeUpsertHook, accountBeforeUpsertHook)
	if err = account.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", account)
	}
	accountBeforeUpsertHooks = []AccountHook{}

	AddAccountHook(boil.AfterUpsertHook, accountAfterUpsertHook)
	if err = account.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(account, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", account)
	}
	accountAfterUpsertHooks = []AccountHook{}
}
func testAccountsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx, accountColumns...); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountOneToOneLoginTokenUsingLoginToken(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign LoginToken
	var local Account

	foreignBlacklist := loginTokenColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, loginTokenDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize LoginToken struct: %s", err)
	}
	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &local, accountDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreign.Account = local.ID
	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.LoginTokenByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.Account != foreign.Account {
		t.Errorf("want: %v, got %v", foreign.Account, check.Account)
	}

	slice := AccountSlice{&local}
	if err = local.L.LoadLoginToken(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.LoginToken == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.LoginToken = nil
	if err = local.L.LoadLoginToken(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.LoginToken == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountOneToOneSetOpLoginTokenUsingLoginToken(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	seed := randomize.NewSeed()
	var a Account
	var b, c LoginToken

	foreignBlacklist := strmangle.SetComplement(loginTokenPrimaryKeyColumns, loginTokenColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, loginTokenDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize LoginToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, loginTokenDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize LoginToken struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*LoginToken{&b, &c} {
		err = a.SetLoginToken(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.LoginToken != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Account != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ID != x.Account {
			t.Error("foreign key was wrong value", a.ID)
		}

		zero := reflect.Zero(reflect.TypeOf(x.Account))
		reflect.Indirect(reflect.ValueOf(&x.Account)).Set(zero)

		if err = x.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ID != x.Account {
			t.Error("foreign key was wrong value", a.ID, x.Account)
		}

		if err = x.Delete(tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testAccountToManyAccountTokens(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c AccountToken

	foreignBlacklist := accountTokenColumnsWithDefault
	if err := randomize.Struct(seed, &b, accountTokenDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, accountTokenDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize AccountToken struct: %s", err)
	}
	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Account = a.ID
	c.Account = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	accountToken, err := a.AccountTokensByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range accountToken {
		if v.Account == b.Account {
			bFound = true
		}
		if v.Account == c.Account {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadAccountTokens(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AccountTokens); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.AccountTokens = nil
	if err = a.L.LoadAccountTokens(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.AccountTokens); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", accountToken)
	}
}

func testAccountToManyWhoComments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Comment

	foreignBlacklist := commentColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Who = a.ID
	c.Who = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	comment, err := a.WhoCommentsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range comment {
		if v.Who == b.Who {
			bFound = true
		}
		if v.Who == c.Who {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadWhoComments(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhoComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WhoComments = nil
	if err = a.L.LoadWhoComments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhoComments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", comment)
	}
}

func testAccountToManyTargetNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Notification

	foreignBlacklist := notificationColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	b.Delivered = custom_types.NoticeDeliveryRandom()
	c.Delivered = custom_types.NoticeDeliveryRandom()
	b.Permission = custom_types.NullPermissionRandom()
	c.Permission = custom_types.NullPermissionRandom()
	b.Segment = custom_types.NullSegmentRandom()
	c.Segment = custom_types.NullSegmentRandom()
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()

	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Target = a.ID
	c.Target = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.TargetNotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Target == b.Target {
			bFound = true
		}
		if v.Target == c.Target {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadTargetNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TargetNotifications = nil
	if err = a.L.LoadTargetNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetNotifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testAccountToManyTargetNotifies(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Notify

	foreignBlacklist := notifyColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notifyColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notifyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notify struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notifyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notify struct: %s", err)
	}
	b.Delivery = custom_types.NoticeDeliveryRandom()
	c.Delivery = custom_types.NoticeDeliveryRandom()

	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Target = a.ID
	c.Target = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notify, err := a.TargetNotifiesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notify {
		if v.Target == b.Target {
			bFound = true
		}
		if v.Target == c.Target {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadTargetNotifies(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetNotifies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TargetNotifies = nil
	if err = a.L.LoadTargetNotifies(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TargetNotifies); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notify)
	}
}

func testAccountToManySessions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Session

	foreignBlacklist := sessionColumnsWithDefault
	if err := randomize.Struct(seed, &b, sessionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, sessionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}
	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Account = a.ID
	c.Account = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	session, err := a.SessionsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range session {
		if v.Account == b.Account {
			bFound = true
		}
		if v.Account == c.Account {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadSessions(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Sessions = nil
	if err = a.L.LoadSessions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Sessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", session)
	}
}

func testAccountToManyWhoTagUses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c TagUse

	foreignBlacklist := tagUseColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, tagUseColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, tagUseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize TagUse struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, tagUseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize TagUse struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Who = a.ID
	c.Who = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tagUse, err := a.WhoTagUsesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tagUse {
		if v.Who == b.Who {
			bFound = true
		}
		if v.Who == c.Who {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadWhoTagUses(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhoTagUses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.WhoTagUses = nil
	if err = a.L.LoadWhoTagUses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.WhoTagUses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tagUse)
	}
}

func testAccountToManyOwnerTranscodes(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Transcode

	foreignBlacklist := transcodeColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, transcodeColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, transcodeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Transcode struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, transcodeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Transcode struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Owner = a.ID
	c.Owner = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	transcode, err := a.OwnerTranscodesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transcode {
		if v.Owner == b.Owner {
			bFound = true
		}
		if v.Owner == c.Owner {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadOwnerTranscodes(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwnerTranscodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OwnerTranscodes = nil
	if err = a.L.LoadOwnerTranscodes(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OwnerTranscodes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transcode)
	}
}

func testAccountToManyUploads(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Upload

	foreignBlacklist := uploadColumnsWithDefault
	if err := randomize.Struct(seed, &b, uploadDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, uploadDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Upload struct: %s", err)
	}
	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	b.Account = a.ID
	c.Account = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	upload, err := a.UploadsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range upload {
		if v.Account == b.Account {
			bFound = true
		}
		if v.Account == c.Account {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountSlice{&a}
	if err = a.L.LoadUploads(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uploads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Uploads = nil
	if err = a.L.LoadUploads(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Uploads); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", upload)
	}
}

func testAccountToManyAddOpAccountTokens(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e AccountToken

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(accountTokenPrimaryKeyColumns, accountTokenColumnsWithoutDefault)

	foreigners := []*AccountToken{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, accountTokenDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*AccountToken{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAccountTokens(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Account {
			t.Error("foreign key was wrong value", a.ID, first.Account)
		}
		if a.ID != second.Account {
			t.Error("foreign key was wrong value", a.ID, second.Account)
		}

		if first.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.AccountTokens[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.AccountTokens[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.AccountTokensByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpWhoComments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, commentColumnsWithCustom...)

	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Comment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWhoComments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Who {
			t.Error("foreign key was wrong value", a.ID, first.Who)
		}
		if a.ID != second.Who {
			t.Error("foreign key was wrong value", a.ID, second.Who)
		}

		if first.R.Who != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Who != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WhoComments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WhoComments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WhoCommentsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpTargetNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTargetNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Target {
			t.Error("foreign key was wrong value", a.ID, first.Target)
		}
		if a.ID != second.Target {
			t.Error("foreign key was wrong value", a.ID, second.Target)
		}

		if first.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TargetNotifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TargetNotifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TargetNotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpTargetNotifies(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Notify

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notifyPrimaryKeyColumns, notifyColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notifyColumnsWithCustom...)

	foreigners := []*Notify{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notifyDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivery = custom_types.NoticeDeliveryRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notify{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTargetNotifies(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Target {
			t.Error("foreign key was wrong value", a.ID, first.Target)
		}
		if a.ID != second.Target {
			t.Error("foreign key was wrong value", a.ID, second.Target)
		}

		if first.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Target != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TargetNotifies[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TargetNotifies[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TargetNotifiesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpSessions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Session

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(sessionPrimaryKeyColumns, sessionColumnsWithoutDefault)

	foreigners := []*Session{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, sessionDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Session{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSessions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Account {
			t.Error("foreign key was wrong value", a.ID, first.Account)
		}
		if a.ID != second.Account {
			t.Error("foreign key was wrong value", a.ID, second.Account)
		}

		if first.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Sessions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Sessions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SessionsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpWhoTagUses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e TagUse

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(tagUsePrimaryKeyColumns, tagUseColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, tagUseColumnsWithCustom...)

	foreigners := []*TagUse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagUseDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TagUse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddWhoTagUses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Who {
			t.Error("foreign key was wrong value", a.ID, first.Who)
		}
		if a.ID != second.Who {
			t.Error("foreign key was wrong value", a.ID, second.Who)
		}

		if first.R.Who != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Who != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.WhoTagUses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.WhoTagUses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.WhoTagUsesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpOwnerTranscodes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Transcode

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(transcodePrimaryKeyColumns, transcodeColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, transcodeColumnsWithCustom...)

	foreigners := []*Transcode{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transcodeDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transcode{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOwnerTranscodes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Owner {
			t.Error("foreign key was wrong value", a.ID, first.Owner)
		}
		if a.ID != second.Owner {
			t.Error("foreign key was wrong value", a.ID, second.Owner)
		}

		if first.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Owner != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OwnerTranscodes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OwnerTranscodes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OwnerTranscodesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountToManyAddOpUploads(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Account
	var b, c, d, e Upload

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, accountDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(uploadPrimaryKeyColumns, uploadColumnsWithoutDefault)

	foreigners := []*Upload{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, uploadDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Upload{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUploads(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Account {
			t.Error("foreign key was wrong value", a.ID, first.Account)
		}
		if a.ID != second.Account {
			t.Error("foreign key was wrong value", a.ID, second.Account)
		}

		if first.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Account != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Uploads[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Uploads[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UploadsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAccountToOnePartyUsingID(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Party
	var local Account

	foreignBlacklist := partyColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &local, accountDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.ID = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.IDByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccountSlice{&local}
	if err = local.L.LoadID(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.ID == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ID = nil
	if err = local.L.LoadID(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.ID == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountToOneSetOpPartyUsingID(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Account
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, accountDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetID(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ID != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.IDAccount != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ID != x.ID {
			t.Error("foreign key was wrong value", a.ID)
		}

		if exists, err := AccountExists(tx, a.ID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAccountsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = account.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAccountsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AccountSlice{account}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAccountsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Accounts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountDBTypes = map[string]string{`Email`: `character varying`, `ID`: `integer`, `Password`: `character varying`}
	_              = bytes.MinRead
)

func testAccountsUpdate(t *testing.T) {
	t.Parallel()

	if len(accountColumns) == len(accountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := accountColumnsWithDefault

	if err = randomize.Struct(seed, account, accountDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err = account.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAccountsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountColumns) == len(accountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := accountPrimaryKeyColumns

	if err = randomize.Struct(seed, account, accountDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountColumns, accountPrimaryKeyColumns) {
		fields = accountColumns
	} else {
		fields = strmangle.SetComplement(
			accountColumns,
			accountPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(account))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AccountSlice{account}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testAccountsUpsert(t *testing.T) {
	t.Parallel()

	if len(accountColumns) == len(accountPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	account := &Account{}
	if err = randomize.Struct(seed, account, accountDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = account.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Account: %s", err)
	}

	count, err := Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := accountPrimaryKeyColumns

	if err = randomize.Struct(seed, account, accountDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err = account.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Account: %s", err)
	}

	count, err = Accounts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
