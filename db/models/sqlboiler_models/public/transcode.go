// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/databrary/sqlboiler/types"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Transcode is an object representing the database table.
type Transcode struct {
	Orig    int                  `db:"orig" json:"transcode_orig"`
	Asset   int                  `db:"asset" json:"transcode_asset"`
	Owner   int                  `db:"owner" json:"transcode_owner"`
	Segment custom_types.Segment `db:"segment" json:"transcode_segment"`
	Options types.StringArray    `db:"options" json:"transcode_options"`
	Start   null.Time            `db:"start" json:"transcode_start,omitempty"`
	Process null.Int             `db:"process" json:"transcode_process,omitempty"`
	Log     null.String          `db:"log" json:"transcode_log,omitempty"`

	R *transcodeR `db:"-" json:"-"`
	L transcodeL  `db:"-" json:"-"`
}

// transcodeR is where relationships are stored.
type transcodeR struct {
	Asset *Asset
	Orig  *Asset
	Owner *Account
}

// transcodeL is where Load methods for each relationship are stored.
type transcodeL struct{}

var (
	transcodeColumns               = []string{"orig", "asset", "owner", "segment", "options", "start", "process", "log"}
	transcodeColumnsWithoutDefault = []string{"orig", "asset", "owner", "process", "log"}
	transcodeColumnsWithDefault    = []string{"segment", "options", "start"}
	transcodeColumnsWithCustom     = []string{"segment"}

	transcodePrimaryKeyColumns = []string{"asset"}
)

type (
	// TranscodeSlice is an alias for a slice of pointers to Transcode.
	// This should generally be used opposed to []Transcode.
	TranscodeSlice []*Transcode
	// TranscodeHook is the signature for custom Transcode hook methods
	TranscodeHook func(boil.Executor, *Transcode) error

	transcodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transcodeType    = reflect.TypeOf(&Transcode{})
	transcodeMapping = queries.MakeStructMapping(transcodeType)

	transcodePrimaryKeyMapping, _ = queries.BindMapping(transcodeType, transcodeMapping, transcodePrimaryKeyColumns)

	transcodeInsertCacheMut sync.RWMutex
	transcodeInsertCache    = make(map[string]insertCache)
	transcodeUpdateCacheMut sync.RWMutex
	transcodeUpdateCache    = make(map[string]updateCache)
	transcodeUpsertCacheMut sync.RWMutex
	transcodeUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var transcodeBeforeInsertHooks []TranscodeHook
var transcodeBeforeUpdateHooks []TranscodeHook
var transcodeBeforeDeleteHooks []TranscodeHook
var transcodeBeforeUpsertHooks []TranscodeHook

var transcodeAfterInsertHooks []TranscodeHook
var transcodeAfterSelectHooks []TranscodeHook
var transcodeAfterUpdateHooks []TranscodeHook
var transcodeAfterDeleteHooks []TranscodeHook
var transcodeAfterUpsertHooks []TranscodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Transcode) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Transcode) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Transcode) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Transcode) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Transcode) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Transcode) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Transcode) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Transcode) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Transcode) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transcodeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTranscodeHook registers your hook function for all future operations.
func AddTranscodeHook(hookPoint boil.HookPoint, transcodeHook TranscodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transcodeBeforeInsertHooks = append(transcodeBeforeInsertHooks, transcodeHook)
	case boil.BeforeUpdateHook:
		transcodeBeforeUpdateHooks = append(transcodeBeforeUpdateHooks, transcodeHook)
	case boil.BeforeDeleteHook:
		transcodeBeforeDeleteHooks = append(transcodeBeforeDeleteHooks, transcodeHook)
	case boil.BeforeUpsertHook:
		transcodeBeforeUpsertHooks = append(transcodeBeforeUpsertHooks, transcodeHook)
	case boil.AfterInsertHook:
		transcodeAfterInsertHooks = append(transcodeAfterInsertHooks, transcodeHook)
	case boil.AfterSelectHook:
		transcodeAfterSelectHooks = append(transcodeAfterSelectHooks, transcodeHook)
	case boil.AfterUpdateHook:
		transcodeAfterUpdateHooks = append(transcodeAfterUpdateHooks, transcodeHook)
	case boil.AfterDeleteHook:
		transcodeAfterDeleteHooks = append(transcodeAfterDeleteHooks, transcodeHook)
	case boil.AfterUpsertHook:
		transcodeAfterUpsertHooks = append(transcodeAfterUpsertHooks, transcodeHook)
	}
}

// OneP returns a single transcode record from the query, and panics on error.
func (q transcodeQuery) OneP() *Transcode {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single transcode record from the query.
func (q transcodeQuery) One() (*Transcode, error) {
	o := &Transcode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for transcode")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Transcode records from the query, and panics on error.
func (q transcodeQuery) AllP() TranscodeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Transcode records from the query.
func (q transcodeQuery) All() (TranscodeSlice, error) {
	var o TranscodeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Transcode slice")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Transcode records in the query, and panics on error.
func (q transcodeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Transcode records in the query.
func (q transcodeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count transcode rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q transcodeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q transcodeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if transcode exists")
	}

	return count > 0, nil
}

// AssetG pointed to by the foreign key.
func (o *Transcode) AssetG(mods ...qm.QueryMod) assetQuery {
	return o.AssetByFk(boil.GetDB(), mods...)
}

// Asset pointed to by the foreign key.
func (o *Transcode) AssetByFk(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Asset),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// OrigG pointed to by the foreign key.
func (o *Transcode) OrigG(mods ...qm.QueryMod) assetQuery {
	return o.OrigByFk(boil.GetDB(), mods...)
}

// Orig pointed to by the foreign key.
func (o *Transcode) OrigByFk(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Orig),
	}

	queryMods = append(queryMods, mods...)

	query := Assets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset\"")

	return query
}

// OwnerG pointed to by the foreign key.
func (o *Transcode) OwnerG(mods ...qm.QueryMod) accountQuery {
	return o.OwnerByFk(boil.GetDB(), mods...)
}

// Owner pointed to by the foreign key.
func (o *Transcode) OwnerByFk(exec boil.Executor, mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Owner),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// LoadAsset allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transcodeL) LoadAsset(e boil.Executor, singular bool, maybeTranscode interface{}) error {
	var slice []*Transcode
	var object *Transcode

	count := 1
	if singular {
		object = maybeTranscode.(*Transcode)
	} else {
		slice = *maybeTranscode.(*TranscodeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transcodeR{}
		}
		args[0] = object.Asset
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transcodeR{}
			}
			args[i] = obj.Asset
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}
	defer results.Close()

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Asset = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Asset == foreign.ID {
				local.R.Asset = foreign
				break
			}
		}
	}

	return nil
}

// LoadOrig allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transcodeL) LoadOrig(e boil.Executor, singular bool, maybeTranscode interface{}) error {
	var slice []*Transcode
	var object *Transcode

	count := 1
	if singular {
		object = maybeTranscode.(*Transcode)
	} else {
		slice = *maybeTranscode.(*TranscodeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transcodeR{}
		}
		args[0] = object.Orig
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transcodeR{}
			}
			args[i] = obj.Orig
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Asset")
	}
	defer results.Close()

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Asset")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Orig = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Orig == foreign.ID {
				local.R.Orig = foreign
				break
			}
		}
	}

	return nil
}

// LoadOwner allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (transcodeL) LoadOwner(e boil.Executor, singular bool, maybeTranscode interface{}) error {
	var slice []*Transcode
	var object *Transcode

	count := 1
	if singular {
		object = maybeTranscode.(*Transcode)
	} else {
		slice = *maybeTranscode.(*TranscodeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &transcodeR{}
		}
		args[0] = object.Owner
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &transcodeR{}
			}
			args[i] = obj.Owner
		}
	}

	query := fmt.Sprintf(
		"select * from \"account\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}
	defer results.Close()

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if len(transcodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Owner = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Owner == foreign.ID {
				local.R.Owner = foreign
				break
			}
		}
	}

	return nil
}

// SetAssetG of the transcode to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Transcode.
// Uses the global database handle.
func (o *Transcode) SetAssetG(insert bool, related *Asset) error {
	return o.SetAsset(boil.GetDB(), insert, related)
}

// SetAssetP of the transcode to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Transcode.
// Panics on error.
func (o *Transcode) SetAssetP(exec boil.Executor, insert bool, related *Asset) {
	if err := o.SetAsset(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAssetGP of the transcode to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Transcode.
// Uses the global database handle and panics on error.
func (o *Transcode) SetAssetGP(insert bool, related *Asset) {
	if err := o.SetAsset(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAsset of the transcode to the related item.
// Sets o.R.Asset to related.
// Adds o to related.R.Transcode.
func (o *Transcode) SetAsset(exec boil.Executor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"asset"}),
		strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Asset}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Asset = related.ID

	if o.R == nil {
		o.R = &transcodeR{
			Asset: related,
		}
	} else {
		o.R.Asset = related
	}

	if related.R == nil {
		related.R = &assetR{
			Transcode: o,
		}
	} else {
		related.R.Transcode = o
	}

	return nil
}

// SetOrigG of the transcode to the related item.
// Sets o.R.Orig to related.
// Adds o to related.R.OrigTranscodes.
// Uses the global database handle.
func (o *Transcode) SetOrigG(insert bool, related *Asset) error {
	return o.SetOrig(boil.GetDB(), insert, related)
}

// SetOrigP of the transcode to the related item.
// Sets o.R.Orig to related.
// Adds o to related.R.OrigTranscodes.
// Panics on error.
func (o *Transcode) SetOrigP(exec boil.Executor, insert bool, related *Asset) {
	if err := o.SetOrig(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrigGP of the transcode to the related item.
// Sets o.R.Orig to related.
// Adds o to related.R.OrigTranscodes.
// Uses the global database handle and panics on error.
func (o *Transcode) SetOrigGP(insert bool, related *Asset) {
	if err := o.SetOrig(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOrig of the transcode to the related item.
// Sets o.R.Orig to related.
// Adds o to related.R.OrigTranscodes.
func (o *Transcode) SetOrig(exec boil.Executor, insert bool, related *Asset) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"orig"}),
		strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Asset}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Orig = related.ID

	if o.R == nil {
		o.R = &transcodeR{
			Orig: related,
		}
	} else {
		o.R.Orig = related
	}

	if related.R == nil {
		related.R = &assetR{
			OrigTranscodes: TranscodeSlice{o},
		}
	} else {
		related.R.OrigTranscodes = append(related.R.OrigTranscodes, o)
	}

	return nil
}

// SetOwnerG of the transcode to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerTranscodes.
// Uses the global database handle.
func (o *Transcode) SetOwnerG(insert bool, related *Account) error {
	return o.SetOwner(boil.GetDB(), insert, related)
}

// SetOwnerP of the transcode to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerTranscodes.
// Panics on error.
func (o *Transcode) SetOwnerP(exec boil.Executor, insert bool, related *Account) {
	if err := o.SetOwner(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOwnerGP of the transcode to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerTranscodes.
// Uses the global database handle and panics on error.
func (o *Transcode) SetOwnerGP(insert bool, related *Account) {
	if err := o.SetOwner(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetOwner of the transcode to the related item.
// Sets o.R.Owner to related.
// Adds o to related.R.OwnerTranscodes.
func (o *Transcode) SetOwner(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transcode\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"owner"}),
		strmangle.WhereClause("\"", "\"", 2, transcodePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.Asset}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Owner = related.ID

	if o.R == nil {
		o.R = &transcodeR{
			Owner: related,
		}
	} else {
		o.R.Owner = related
	}

	if related.R == nil {
		related.R = &accountR{
			OwnerTranscodes: TranscodeSlice{o},
		}
	} else {
		related.R.OwnerTranscodes = append(related.R.OwnerTranscodes, o)
	}

	return nil
}

// TranscodesG retrieves all records.
func TranscodesG(mods ...qm.QueryMod) transcodeQuery {
	return Transcodes(boil.GetDB(), mods...)
}

// Transcodes retrieves all the records using an executor.
func Transcodes(exec boil.Executor, mods ...qm.QueryMod) transcodeQuery {
	mods = append(mods, qm.From("\"transcode\""))
	return transcodeQuery{NewQuery(exec, mods...)}
}

// FindTranscodeG retrieves a single record by ID.
func FindTranscodeG(asset int, selectCols ...string) (*Transcode, error) {
	return FindTranscode(boil.GetDB(), asset, selectCols...)
}

// FindTranscodeGP retrieves a single record by ID, and panics on error.
func FindTranscodeGP(asset int, selectCols ...string) *Transcode {
	retobj, err := FindTranscode(boil.GetDB(), asset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindTranscode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTranscode(exec boil.Executor, asset int, selectCols ...string) (*Transcode, error) {
	transcodeObj := &Transcode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transcode\" where \"asset\"=$1", sel,
	)

	q := queries.Raw(exec, query, asset)

	err := q.Bind(transcodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from transcode")
	}

	return transcodeObj, nil
}

// FindTranscodeP retrieves a single record by ID with an executor, and panics on error.
func FindTranscodeP(exec boil.Executor, asset int, selectCols ...string) *Transcode {
	retobj, err := FindTranscode(exec, asset, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Transcode) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Transcode) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Transcode) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Transcode) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no transcode provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transcodeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	transcodeInsertCacheMut.RLock()
	cache, cached := transcodeInsertCache[key]
	transcodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			transcodeColumns,
			transcodeColumnsWithDefault,
			transcodeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(transcodeType, transcodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transcodeType, transcodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transcode\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transcode\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into transcode")
	}

	if !cached {
		transcodeInsertCacheMut.Lock()
		transcodeInsertCache[key] = cache
		transcodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Transcode record. See Update for
// whitelist behavior description.
func (o *Transcode) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Transcode record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Transcode) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Transcode, and panics on error.
// See Update for whitelist behavior description.
func (o *Transcode) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Transcode.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Transcode) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	transcodeUpdateCacheMut.RLock()
	cache, cached := transcodeUpdateCache[key]
	transcodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(transcodeColumns, transcodePrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update transcode, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transcode\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transcodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transcodeType, transcodeMapping, append(wl, transcodePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update transcode row")
	}

	if !cached {
		transcodeUpdateCacheMut.Lock()
		transcodeUpdateCache[key] = cache
		transcodeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q transcodeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q transcodeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for transcode")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o TranscodeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o TranscodeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o TranscodeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TranscodeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"transcode\" SET %s WHERE (\"asset\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(transcodePrimaryKeyColumns), len(colNames)+1, len(transcodePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in transcode slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Transcode) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Transcode) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Transcode) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Transcode) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no transcode provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transcodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transcodeUpsertCacheMut.RLock()
	cache, cached := transcodeUpsertCache[key]
	transcodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			transcodeColumns,
			transcodeColumnsWithDefault,
			transcodeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			transcodeColumns,
			transcodePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert transcode, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transcodePrimaryKeyColumns))
			copy(conflict, transcodePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"transcode\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(transcodeType, transcodeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transcodeType, transcodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert transcode")
	}

	if !cached {
		transcodeUpsertCacheMut.Lock()
		transcodeUpsertCache[key] = cache
		transcodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Transcode record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transcode) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Transcode record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Transcode) DeleteG() error {
	if o == nil {
		return errors.New("public: no Transcode provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Transcode record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Transcode) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Transcode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Transcode) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Transcode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transcodePrimaryKeyMapping)
	query := "DELETE FROM \"transcode\" WHERE \"asset\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from transcode")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q transcodeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q transcodeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no transcodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from transcode")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o TranscodeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o TranscodeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Transcode slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o TranscodeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TranscodeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Transcode slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(transcodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"transcode\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, transcodePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(transcodePrimaryKeyColumns), 1, len(transcodePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from transcode slice")
	}

	if len(transcodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Transcode) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Transcode) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Transcode) ReloadG() error {
	if o == nil {
		return errors.New("public: no Transcode provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Transcode) Reload(exec boil.Executor) error {
	ret, err := FindTranscode(exec, o.Asset)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TranscodeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *TranscodeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TranscodeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty TranscodeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TranscodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	transcodes := TranscodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transcodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"transcode\".* FROM \"transcode\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, transcodePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(transcodePrimaryKeyColumns), 1, len(transcodePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&transcodes)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in TranscodeSlice")
	}

	*o = transcodes

	return nil
}

// TranscodeExists checks if the Transcode row exists.
func TranscodeExists(exec boil.Executor, asset int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"transcode\" where \"asset\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, asset)
	}

	row := exec.QueryRow(query, asset)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if transcode exists")
	}

	return exists, nil
}

// TranscodeExistsG checks if the Transcode row exists.
func TranscodeExistsG(asset int) (bool, error) {
	return TranscodeExists(boil.GetDB(), asset)
}

// TranscodeExistsGP checks if the Transcode row exists. Panics on error.
func TranscodeExistsGP(asset int) bool {
	e, err := TranscodeExists(boil.GetDB(), asset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// TranscodeExistsP checks if the Transcode row exists. Panics on error.
func TranscodeExistsP(exec boil.Executor, asset int) bool {
	e, err := TranscodeExists(exec, asset)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
