// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testSchemas(t *testing.T) {
	t.Parallel()

	query := Schemas(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSchemasLive(t *testing.T) {
	all, err := Schemas(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Schemas err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM schema) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM schema) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("SchemasLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testSchemasDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = schema.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchemasQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Schemas(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchemasSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SchemaSlice{schema}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSchemasExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SchemaExists(tx, schema.Name)
	if err != nil {
		t.Errorf("Unable to check if Schema exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SchemaExistsG to return true, but got false.")
	}
}

func testSchemasFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	schemaFound, err := FindSchema(tx, schema.Name)
	if err != nil {
		t.Error(err)
	}

	if schemaFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSchemasBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Schemas(tx).Bind(schema); err != nil {
		t.Error(err)
	}
}

func testSchemasOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Schemas(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSchemasAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schemaOne := &Schema{}
	schemaTwo := &Schema{}
	if err = randomize.Struct(seed, schemaOne, schemaDBTypes, false, schemaColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Schema struct: %s", err)
	}
	if err = randomize.Struct(seed, schemaTwo, schemaDBTypes, false, schemaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schemaOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = schemaTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Schemas(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSchemasCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schemaOne := &Schema{}
	schemaTwo := &Schema{}
	if err = randomize.Struct(seed, schemaOne, schemaDBTypes, false, schemaColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Schema struct: %s", err)
	}
	if err = randomize.Struct(seed, schemaTwo, schemaDBTypes, false, schemaColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schemaOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = schemaTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func schemaBeforeInsertHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaAfterInsertHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaAfterSelectHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaBeforeUpdateHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaAfterUpdateHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaBeforeDeleteHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaAfterDeleteHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaBeforeUpsertHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func schemaAfterUpsertHook(e boil.Executor, o *Schema) error {
	*o = Schema{}
	return nil
}

func testSchemasHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	empty := &Schema{}

	AddSchemaHook(boil.BeforeInsertHook, schemaBeforeInsertHook)
	if err = schema.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", schema)
	}
	schemaBeforeInsertHooks = []SchemaHook{}

	AddSchemaHook(boil.AfterInsertHook, schemaAfterInsertHook)
	if err = schema.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", schema)
	}
	schemaAfterInsertHooks = []SchemaHook{}

	AddSchemaHook(boil.AfterSelectHook, schemaAfterSelectHook)
	if err = schema.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", schema)
	}
	schemaAfterSelectHooks = []SchemaHook{}

	AddSchemaHook(boil.BeforeUpdateHook, schemaBeforeUpdateHook)
	if err = schema.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", schema)
	}
	schemaBeforeUpdateHooks = []SchemaHook{}

	AddSchemaHook(boil.AfterUpdateHook, schemaAfterUpdateHook)
	if err = schema.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", schema)
	}
	schemaAfterUpdateHooks = []SchemaHook{}

	AddSchemaHook(boil.BeforeDeleteHook, schemaBeforeDeleteHook)
	if err = schema.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", schema)
	}
	schemaBeforeDeleteHooks = []SchemaHook{}

	AddSchemaHook(boil.AfterDeleteHook, schemaAfterDeleteHook)
	if err = schema.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", schema)
	}
	schemaAfterDeleteHooks = []SchemaHook{}

	AddSchemaHook(boil.BeforeUpsertHook, schemaBeforeUpsertHook)
	if err = schema.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", schema)
	}
	schemaBeforeUpsertHooks = []SchemaHook{}

	AddSchemaHook(boil.AfterUpsertHook, schemaAfterUpsertHook)
	if err = schema.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(schema, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", schema)
	}
	schemaAfterUpsertHooks = []SchemaHook{}
}
func testSchemasInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchemasInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx, schemaColumns...); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSchemasReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = schema.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSchemasReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SchemaSlice{schema}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSchemasSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Schemas(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	schemaDBTypes = map[string]string{`Applied`: `timestamp with time zone`, `Name`: `character varying`}
	_             = bytes.MinRead
)

func testSchemasUpdate(t *testing.T) {
	t.Parallel()

	if len(schemaColumns) == len(schemaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := schemaColumnsWithDefault

	if err = randomize.Struct(seed, schema, schemaDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	if err = schema.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSchemasSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(schemaColumns) == len(schemaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := schemaPrimaryKeyColumns

	if err = randomize.Struct(seed, schema, schemaDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(schemaColumns, schemaPrimaryKeyColumns) {
		fields = schemaColumns
	} else {
		fields = strmangle.SetComplement(
			schemaColumns,
			schemaPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(schema))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SchemaSlice{schema}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testSchemasUpsert(t *testing.T) {
	t.Parallel()

	if len(schemaColumns) == len(schemaPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	schema := &Schema{}
	if err = randomize.Struct(seed, schema, schemaDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = schema.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Schema: %s", err)
	}

	count, err := Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := schemaPrimaryKeyColumns

	if err = randomize.Struct(seed, schema, schemaDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Schema struct: %s", err)
	}

	if err = schema.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Schema: %s", err)
	}

	count, err = Schemas(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
