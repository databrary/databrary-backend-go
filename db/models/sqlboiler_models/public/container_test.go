// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testContainers(t *testing.T) {
	t.Parallel()

	query := Containers(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testContainersLive(t *testing.T) {
	all, err := Containers(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Containers err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM container) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM container) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("ContainersLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testContainersDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = container.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContainersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Containers(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContainersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContainerSlice{container}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testContainersExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := ContainerExists(tx, container.ID)
	if err != nil {
		t.Errorf("Unable to check if Container exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ContainerExistsG to return true, but got false.")
	}
}

func testContainersFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	containerFound, err := FindContainer(tx, container.ID)
	if err != nil {
		t.Error(err)
	}

	if containerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testContainersBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Containers(tx).Bind(container); err != nil {
		t.Error(err)
	}
}

func testContainersOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Containers(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testContainersAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	containerOne := &Container{}
	containerTwo := &Container{}
	if err = randomize.Struct(seed, containerOne, containerDBTypes, false, containerColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err = randomize.Struct(seed, containerTwo, containerDBTypes, false, containerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = containerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = containerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Containers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testContainersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	containerOne := &Container{}
	containerTwo := &Container{}
	if err = randomize.Struct(seed, containerOne, containerDBTypes, false, containerColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Container struct: %s", err)
	}
	if err = randomize.Struct(seed, containerTwo, containerDBTypes, false, containerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = containerOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = containerTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func containerBeforeInsertHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerAfterInsertHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerAfterSelectHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerBeforeUpdateHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerAfterUpdateHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerBeforeDeleteHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerAfterDeleteHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerBeforeUpsertHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func containerAfterUpsertHook(e boil.Executor, o *Container) error {
	*o = Container{}
	return nil
}

func testContainersHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	empty := &Container{}

	AddContainerHook(boil.BeforeInsertHook, containerBeforeInsertHook)
	if err = container.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", container)
	}
	containerBeforeInsertHooks = []ContainerHook{}

	AddContainerHook(boil.AfterInsertHook, containerAfterInsertHook)
	if err = container.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", container)
	}
	containerAfterInsertHooks = []ContainerHook{}

	AddContainerHook(boil.AfterSelectHook, containerAfterSelectHook)
	if err = container.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", container)
	}
	containerAfterSelectHooks = []ContainerHook{}

	AddContainerHook(boil.BeforeUpdateHook, containerBeforeUpdateHook)
	if err = container.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", container)
	}
	containerBeforeUpdateHooks = []ContainerHook{}

	AddContainerHook(boil.AfterUpdateHook, containerAfterUpdateHook)
	if err = container.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", container)
	}
	containerAfterUpdateHooks = []ContainerHook{}

	AddContainerHook(boil.BeforeDeleteHook, containerBeforeDeleteHook)
	if err = container.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", container)
	}
	containerBeforeDeleteHooks = []ContainerHook{}

	AddContainerHook(boil.AfterDeleteHook, containerAfterDeleteHook)
	if err = container.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", container)
	}
	containerAfterDeleteHooks = []ContainerHook{}

	AddContainerHook(boil.BeforeUpsertHook, containerBeforeUpsertHook)
	if err = container.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", container)
	}
	containerBeforeUpsertHooks = []ContainerHook{}

	AddContainerHook(boil.AfterUpsertHook, containerAfterUpsertHook)
	if err = container.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(container, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", container)
	}
	containerAfterUpsertHooks = []ContainerHook{}
}
func testContainersInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContainersInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx, containerColumns...); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testContainerToManyComments(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c Comment

	foreignBlacklist := commentColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, commentColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, commentDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Comment struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	comment, err := a.CommentsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range comment {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadComments(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Comments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Comments = nil
	if err = a.L.LoadComments(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Comments); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", comment)
	}
}

func testContainerToManyNotifications(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c Notification

	foreignBlacklist := notificationColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, notificationColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, notificationDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Notification struct: %s", err)
	}
	b.Delivered = custom_types.NoticeDeliveryRandom()
	c.Delivered = custom_types.NoticeDeliveryRandom()
	b.Permission = custom_types.NullPermissionRandom()
	c.Permission = custom_types.NullPermissionRandom()
	b.Segment = custom_types.NullSegmentRandom()
	c.Segment = custom_types.NullSegmentRandom()
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container.Valid = true
	c.Container.Valid = true
	b.Container.Int = a.ID
	c.Container.Int = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	notification, err := a.NotificationsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range notification {
		if v.Container.Int == b.Container.Int {
			bFound = true
		}
		if v.Container.Int == c.Container.Int {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadNotifications(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Notifications = nil
	if err = a.L.LoadNotifications(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Notifications); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", notification)
	}
}

func testContainerToManySlotAssets(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c SlotAsset

	foreignBlacklist := slotAssetColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, slotAssetColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, slotAssetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotAsset struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, slotAssetDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotAsset struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	slotAsset, err := a.SlotAssetsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range slotAsset {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadSlotAssets(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotAssets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SlotAssets = nil
	if err = a.L.LoadSlotAssets(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotAssets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", slotAsset)
	}
}

func testContainerToManySlotRecords(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c SlotRecord

	foreignBlacklist := slotRecordColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, slotRecordColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, slotRecordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotRecord struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, slotRecordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotRecord struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	slotRecord, err := a.SlotRecordsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range slotRecord {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadSlotRecords(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SlotRecords = nil
	if err = a.L.LoadSlotRecords(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotRecords); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", slotRecord)
	}
}

func testContainerToManySlotReleases(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c SlotRelease

	foreignBlacklist := slotReleaseColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, slotReleaseColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, slotReleaseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotRelease struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, slotReleaseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize SlotRelease struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()
	b.Release = custom_types.ReleaseRandom()
	c.Release = custom_types.ReleaseRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	slotRelease, err := a.SlotReleasesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range slotRelease {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadSlotReleases(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotReleases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.SlotReleases = nil
	if err = a.L.LoadSlotReleases(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.SlotReleases); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", slotRelease)
	}
}

func testContainerToManyTagUses(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c TagUse

	foreignBlacklist := tagUseColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, tagUseColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, tagUseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize TagUse struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, tagUseDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize TagUse struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	tagUse, err := a.TagUsesByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range tagUse {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadTagUses(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TagUses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TagUses = nil
	if err = a.L.LoadTagUses(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TagUses); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", tagUse)
	}
}

func testContainerToManyVolumeInclusions(t *testing.T) {
	var err error
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c VolumeInclusion

	foreignBlacklist := volumeInclusionColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, volumeInclusionColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, volumeInclusionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeInclusionDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeInclusion struct: %s", err)
	}
	b.Segment = custom_types.SegmentRandom()
	c.Segment = custom_types.SegmentRandom()

	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	b.Container = a.ID
	c.Container = a.ID
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	volumeInclusion, err := a.VolumeInclusionsByFk(tx).All()
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range volumeInclusion {
		if v.Container == b.Container {
			bFound = true
		}
		if v.Container == c.Container {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ContainerSlice{&a}
	if err = a.L.LoadVolumeInclusions(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeInclusions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.VolumeInclusions = nil
	if err = a.L.LoadVolumeInclusions(tx, true, &a); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.VolumeInclusions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", volumeInclusion)
	}
}

func testContainerToManyAddOpComments(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e Comment

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(commentPrimaryKeyColumns, commentColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, commentColumnsWithCustom...)

	foreigners := []*Comment{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, commentDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Comment{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddComments(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Comments[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Comments[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CommentsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContainerToManyAddOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Notification{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddNotifications(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container.Int {
			t.Error("foreign key was wrong value", a.ID, first.Container.Int)
		}
		if a.ID != second.Container.Int {
			t.Error("foreign key was wrong value", a.ID, second.Container.Int)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Notifications[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Notifications[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.NotificationsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testContainerToManySetOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err = a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.SetNotifications(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetNotifications(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Container.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Container.Valid {
		t.Error("want c's foreign key value to be nil")
	}
	if a.ID != d.Container.Int {
		t.Error("foreign key was wrong value", a.ID, d.Container.Int)
	}
	if a.ID != e.Container.Int {
		t.Error("foreign key was wrong value", a.ID, e.Container.Int)
	}

	if b.R.Container != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Container != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Container != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Container != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.Notifications[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Notifications[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testContainerToManyRemoveOpNotifications(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e Notification

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(notificationPrimaryKeyColumns, notificationColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, notificationColumnsWithCustom...)

	foreigners := []*Notification{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, notificationDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Delivered = custom_types.NoticeDeliveryRandom()
		x.Permission = custom_types.NullPermissionRandom()
		x.Segment = custom_types.NullSegmentRandom()
		x.Release = custom_types.NullReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}

	err = a.AddNotifications(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveNotifications(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.NotificationsByFk(tx).Count()
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if b.Container.Valid {
		t.Error("want b's foreign key value to be nil")
	}
	if c.Container.Valid {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Container != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Container != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Container != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Container != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.Notifications) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Notifications[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Notifications[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testContainerToManyAddOpSlotAssets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e SlotAsset

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(slotAssetPrimaryKeyColumns, slotAssetColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, slotAssetColumnsWithCustom...)

	foreigners := []*SlotAsset{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, slotAssetDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SlotAsset{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSlotAssets(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SlotAssets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SlotAssets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SlotAssetsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContainerToManyAddOpSlotRecords(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e SlotRecord

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(slotRecordPrimaryKeyColumns, slotRecordColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, slotRecordColumnsWithCustom...)

	foreigners := []*SlotRecord{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, slotRecordDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SlotRecord{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSlotRecords(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SlotRecords[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SlotRecords[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SlotRecordsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContainerToManyAddOpSlotReleases(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e SlotRelease

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(slotReleasePrimaryKeyColumns, slotReleaseColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, slotReleaseColumnsWithCustom...)

	foreigners := []*SlotRelease{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, slotReleaseDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()
		x.Release = custom_types.ReleaseRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*SlotRelease{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddSlotReleases(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.SlotReleases[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.SlotReleases[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.SlotReleasesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContainerToManyAddOpTagUses(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e TagUse

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(tagUsePrimaryKeyColumns, tagUseColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, tagUseColumnsWithCustom...)

	foreigners := []*TagUse{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, tagUseDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TagUse{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTagUses(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TagUses[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TagUses[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TagUsesByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testContainerToManyAddOpVolumeInclusions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	var a Container
	var b, c, d, e VolumeInclusion

	seed := randomize.NewSeed()
	localComplelementList := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err = randomize.Struct(seed, &a, containerDBTypes, false, localComplelementList...); err != nil {
		t.Fatal(err)
	}

	foreignComplementList := strmangle.SetComplement(volumeInclusionPrimaryKeyColumns, volumeInclusionColumnsWithoutDefault)
	foreignComplementList = append(foreignComplementList, volumeInclusionColumnsWithCustom...)

	foreigners := []*VolumeInclusion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, volumeInclusionDBTypes, false, foreignComplementList...); err != nil {
			t.Fatal(err)
		}
		x.Segment = custom_types.SegmentRandom()

	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*VolumeInclusion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddVolumeInclusions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.Container {
			t.Error("foreign key was wrong value", a.ID, first.Container)
		}
		if a.ID != second.Container {
			t.Error("foreign key was wrong value", a.ID, second.Container)
		}

		if first.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Container != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.VolumeInclusions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.VolumeInclusions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.VolumeInclusionsByFk(tx).Count()
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testContainerToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Volume
	var local Container

	foreignBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := containerColumnsWithDefault
	if err := randomize.Struct(seed, &local, containerDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := ContainerSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testContainerToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Container
	var b, c Volume

	foreignBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(containerPrimaryKeyColumns, containerColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, containerDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Containers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Volume))
		reflect.Indirect(reflect.ValueOf(&a.Volume)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume, x.ID)
		}
	}
}

func testContainersReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = container.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testContainersReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := ContainerSlice{container}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testContainersSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Containers(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	containerDBTypes = map[string]string{`Date`: `date`, `ID`: `integer`, `Name`: `text`, `Top`: `boolean`, `Volume`: `integer`}
	_                = bytes.MinRead
)

func testContainersUpdate(t *testing.T) {
	t.Parallel()

	if len(containerColumns) == len(containerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := containerColumnsWithDefault

	if err = randomize.Struct(seed, container, containerDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err = container.Update(tx); err != nil {
		t.Error(err)
	}
}

func testContainersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(containerColumns) == len(containerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := containerPrimaryKeyColumns

	if err = randomize.Struct(seed, container, containerDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(containerColumns, containerPrimaryKeyColumns) {
		fields = containerColumns
	} else {
		fields = strmangle.SetComplement(
			containerColumns,
			containerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(container))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := ContainerSlice{container}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testContainersUpsert(t *testing.T) {
	t.Parallel()

	if len(containerColumns) == len(containerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	container := &Container{}
	if err = randomize.Struct(seed, container, containerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = container.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Container: %s", err)
	}

	count, err := Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := containerPrimaryKeyColumns

	if err = randomize.Struct(seed, container, containerDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Container struct: %s", err)
	}

	if err = container.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Container: %s", err)
	}

	count, err = Containers(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
