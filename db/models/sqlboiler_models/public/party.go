// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Party is an object representing the database table.
type Party struct {
	ID          int         `db:"id" json:"party_id"`
	Name        string      `db:"name" json:"party_name"`
	Prename     null.String `db:"prename" json:"party_prename,omitempty"`
	Orcid       null.String `db:"orcid" json:"party_orcid,omitempty"`
	Affiliation null.String `db:"affiliation" json:"party_affiliation,omitempty"`
	URL         null.String `db:"url" json:"party_url,omitempty"`

	R *partyR `db:"-" json:"-"`
	L partyL  `db:"-" json:"-"`
}

// partyR is where relationships are stored.
type partyR struct {
	IDAccount          *Account
	Avatar             *Avatar
	ChildAuthorizes    AuthorizeSlice
	ParentAuthorizes   AuthorizeSlice
	AgentNotifications NotificationSlice
	Notifications      NotificationSlice
	VolumeAccesses     VolumeAccessSlice
}

// partyL is where Load methods for each relationship are stored.
type partyL struct{}

var (
	partyColumns               = []string{"id", "name", "prename", "orcid", "affiliation", "url"}
	partyColumnsWithoutDefault = []string{"name", "prename", "orcid", "affiliation", "url"}
	partyColumnsWithDefault    = []string{"id"}
	partyColumnsWithCustom     = []string{}

	partyPrimaryKeyColumns = []string{"id"}
)

type (
	// PartySlice is an alias for a slice of pointers to Party.
	// This should generally be used opposed to []Party.
	PartySlice []*Party
	// PartyHook is the signature for custom Party hook methods
	PartyHook func(boil.Executor, *Party) error

	partyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	partyType    = reflect.TypeOf(&Party{})
	partyMapping = queries.MakeStructMapping(partyType)

	partyPrimaryKeyMapping, _ = queries.BindMapping(partyType, partyMapping, partyPrimaryKeyColumns)

	partyInsertCacheMut sync.RWMutex
	partyInsertCache    = make(map[string]insertCache)
	partyUpdateCacheMut sync.RWMutex
	partyUpdateCache    = make(map[string]updateCache)
	partyUpsertCacheMut sync.RWMutex
	partyUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var partyBeforeInsertHooks []PartyHook
var partyBeforeUpdateHooks []PartyHook
var partyBeforeDeleteHooks []PartyHook
var partyBeforeUpsertHooks []PartyHook

var partyAfterInsertHooks []PartyHook
var partyAfterSelectHooks []PartyHook
var partyAfterUpdateHooks []PartyHook
var partyAfterDeleteHooks []PartyHook
var partyAfterUpsertHooks []PartyHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Party) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range partyBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Party) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range partyBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Party) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range partyBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Party) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range partyBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Party) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range partyAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Party) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range partyAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Party) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range partyAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Party) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range partyAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Party) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range partyAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddPartyHook registers your hook function for all future operations.
func AddPartyHook(hookPoint boil.HookPoint, partyHook PartyHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		partyBeforeInsertHooks = append(partyBeforeInsertHooks, partyHook)
	case boil.BeforeUpdateHook:
		partyBeforeUpdateHooks = append(partyBeforeUpdateHooks, partyHook)
	case boil.BeforeDeleteHook:
		partyBeforeDeleteHooks = append(partyBeforeDeleteHooks, partyHook)
	case boil.BeforeUpsertHook:
		partyBeforeUpsertHooks = append(partyBeforeUpsertHooks, partyHook)
	case boil.AfterInsertHook:
		partyAfterInsertHooks = append(partyAfterInsertHooks, partyHook)
	case boil.AfterSelectHook:
		partyAfterSelectHooks = append(partyAfterSelectHooks, partyHook)
	case boil.AfterUpdateHook:
		partyAfterUpdateHooks = append(partyAfterUpdateHooks, partyHook)
	case boil.AfterDeleteHook:
		partyAfterDeleteHooks = append(partyAfterDeleteHooks, partyHook)
	case boil.AfterUpsertHook:
		partyAfterUpsertHooks = append(partyAfterUpsertHooks, partyHook)
	}
}

// OneP returns a single party record from the query, and panics on error.
func (q partyQuery) OneP() *Party {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single party record from the query.
func (q partyQuery) One() (*Party, error) {
	o := &Party{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for party")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Party records from the query, and panics on error.
func (q partyQuery) AllP() PartySlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Party records from the query.
func (q partyQuery) All() (PartySlice, error) {
	var o PartySlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Party slice")
	}

	if len(partyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Party records in the query, and panics on error.
func (q partyQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Party records in the query.
func (q partyQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count party rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q partyQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q partyQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if party exists")
	}

	return count > 0, nil
}

// IDAccountG pointed to by the foreign key.
func (o *Party) IDAccountG(mods ...qm.QueryMod) accountQuery {
	return o.IDAccountByFk(boil.GetDB(), mods...)
}

// IDAccount pointed to by the foreign key.
func (o *Party) IDAccountByFk(exec boil.Executor, mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// AvatarG pointed to by the foreign key.
func (o *Party) AvatarG(mods ...qm.QueryMod) avatarQuery {
	return o.AvatarByFk(boil.GetDB(), mods...)
}

// Avatar pointed to by the foreign key.
func (o *Party) AvatarByFk(exec boil.Executor, mods ...qm.QueryMod) avatarQuery {
	queryMods := []qm.QueryMod{
		qm.Where("party=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := Avatars(exec, queryMods...)
	queries.SetFrom(query.Query, "\"avatar\"")

	return query
}

// ChildAuthorizesG retrieves all the authorize's authorize via child column.
func (o *Party) ChildAuthorizesG(mods ...qm.QueryMod) authorizeQuery {
	return o.ChildAuthorizesByFk(boil.GetDB(), mods...)
}

// ChildAuthorizes retrieves all the authorize's authorize with an executor via child column.
func (o *Party) ChildAuthorizesByFk(exec boil.Executor, mods ...qm.QueryMod) authorizeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"child\"=?", o.ID),
	)

	query := Authorizes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"authorize\" as \"a\"")
	return query
}

// ParentAuthorizesG retrieves all the authorize's authorize via parent column.
func (o *Party) ParentAuthorizesG(mods ...qm.QueryMod) authorizeQuery {
	return o.ParentAuthorizesByFk(boil.GetDB(), mods...)
}

// ParentAuthorizes retrieves all the authorize's authorize with an executor via parent column.
func (o *Party) ParentAuthorizesByFk(exec boil.Executor, mods ...qm.QueryMod) authorizeQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"parent\"=?", o.ID),
	)

	query := Authorizes(exec, queryMods...)
	queries.SetFrom(query.Query, "\"authorize\" as \"a\"")
	return query
}

// AgentNotificationsG retrieves all the notification's notification via agent column.
func (o *Party) AgentNotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.AgentNotificationsByFk(boil.GetDB(), mods...)
}

// AgentNotifications retrieves all the notification's notification with an executor via agent column.
func (o *Party) AgentNotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"agent\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// NotificationsG retrieves all the notification's notification.
func (o *Party) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Party) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"party\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// VolumeAccessesG retrieves all the volume_access's volume access.
func (o *Party) VolumeAccessesG(mods ...qm.QueryMod) volumeAccessQuery {
	return o.VolumeAccessesByFk(boil.GetDB(), mods...)
}

// VolumeAccesses retrieves all the volume_access's volume access with an executor.
func (o *Party) VolumeAccessesByFk(exec boil.Executor, mods ...qm.QueryMod) volumeAccessQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"party\"=?", o.ID),
	)

	query := VolumeAccesses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_access\" as \"a\"")
	return query
}

// LoadIDAccount allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadIDAccount(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"account\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}
	defer results.Close()

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if len(partyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.IDAccount = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.ID {
				local.R.IDAccount = foreign
				break
			}
		}
	}

	return nil
}

// LoadAvatar allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadAvatar(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"avatar\" where \"party\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Avatar")
	}
	defer results.Close()

	var resultSlice []*Avatar
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Avatar")
	}

	if len(partyAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Avatar = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Party {
				local.R.Avatar = foreign
				break
			}
		}
	}

	return nil
}

// LoadChildAuthorizes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadChildAuthorizes(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"authorize\" where \"child\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authorize")
	}
	defer results.Close()

	var resultSlice []*Authorize
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice authorize")
	}

	if len(authorizeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ChildAuthorizes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Child {
				local.R.ChildAuthorizes = append(local.R.ChildAuthorizes, foreign)
				break
			}
		}
	}

	return nil
}

// LoadParentAuthorizes allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadParentAuthorizes(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"authorize\" where \"parent\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authorize")
	}
	defer results.Close()

	var resultSlice []*Authorize
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice authorize")
	}

	if len(authorizeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentAuthorizes = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Parent {
				local.R.ParentAuthorizes = append(local.R.ParentAuthorizes, foreign)
				break
			}
		}
	}

	return nil
}

// LoadAgentNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadAgentNotifications(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"agent\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.AgentNotifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Agent {
				local.R.AgentNotifications = append(local.R.AgentNotifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadNotifications(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"party\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Party.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeAccesses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (partyL) LoadVolumeAccesses(e boil.Executor, singular bool, maybeParty interface{}) error {
	var slice []*Party
	var object *Party

	count := 1
	if singular {
		object = maybeParty.(*Party)
	} else {
		slice = *maybeParty.(*PartySlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &partyR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &partyR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_access\" where \"party\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_access")
	}
	defer results.Close()

	var resultSlice []*VolumeAccess
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_access")
	}

	if len(volumeAccessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeAccesses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Party {
				local.R.VolumeAccesses = append(local.R.VolumeAccesses, foreign)
				break
			}
		}
	}

	return nil
}

// SetIDAccountG of the party to the related item.
// Sets o.R.IDAccount to related.
// Adds o to related.R.ID.
// Uses the global database handle.
func (o *Party) SetIDAccountG(insert bool, related *Account) error {
	return o.SetIDAccount(boil.GetDB(), insert, related)
}

// SetIDAccountP of the party to the related item.
// Sets o.R.IDAccount to related.
// Adds o to related.R.ID.
// Panics on error.
func (o *Party) SetIDAccountP(exec boil.Executor, insert bool, related *Account) {
	if err := o.SetIDAccount(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetIDAccountGP of the party to the related item.
// Sets o.R.IDAccount to related.
// Adds o to related.R.ID.
// Uses the global database handle and panics on error.
func (o *Party) SetIDAccountGP(insert bool, related *Account) {
	if err := o.SetIDAccount(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetIDAccount of the party to the related item.
// Sets o.R.IDAccount to related.
// Adds o to related.R.ID.
func (o *Party) SetIDAccount(exec boil.Executor, insert bool, related *Account) error {
	var err error

	if insert {
		related.ID = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"account\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"id"}),
			strmangle.WhereClause("\"", "\"", 2, accountPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.ID = o.ID

	}

	if o.R == nil {
		o.R = &partyR{
			IDAccount: related,
		}
	} else {
		o.R.IDAccount = related
	}

	if related.R == nil {
		related.R = &accountR{
			ID: o,
		}
	} else {
		related.R.ID = o
	}
	return nil
}

// SetAvatarG of the party to the related item.
// Sets o.R.Avatar to related.
// Adds o to related.R.Party.
// Uses the global database handle.
func (o *Party) SetAvatarG(insert bool, related *Avatar) error {
	return o.SetAvatar(boil.GetDB(), insert, related)
}

// SetAvatarP of the party to the related item.
// Sets o.R.Avatar to related.
// Adds o to related.R.Party.
// Panics on error.
func (o *Party) SetAvatarP(exec boil.Executor, insert bool, related *Avatar) {
	if err := o.SetAvatar(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAvatarGP of the party to the related item.
// Sets o.R.Avatar to related.
// Adds o to related.R.Party.
// Uses the global database handle and panics on error.
func (o *Party) SetAvatarGP(insert bool, related *Avatar) {
	if err := o.SetAvatar(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetAvatar of the party to the related item.
// Sets o.R.Avatar to related.
// Adds o to related.R.Party.
func (o *Party) SetAvatar(exec boil.Executor, insert bool, related *Avatar) error {
	var err error

	if insert {
		related.Party = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"avatar\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"party"}),
			strmangle.WhereClause("\"", "\"", 2, avatarPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Party}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Party = o.ID

	}

	if o.R == nil {
		o.R = &partyR{
			Avatar: related,
		}
	} else {
		o.R.Avatar = related
	}

	if related.R == nil {
		related.R = &avatarR{
			Party: o,
		}
	} else {
		related.R.Party = o
	}
	return nil
}

// AddChildAuthorizesG adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ChildAuthorizes.
// Sets related.R.Child appropriately.
// Uses the global database handle.
func (o *Party) AddChildAuthorizesG(insert bool, related ...*Authorize) error {
	return o.AddChildAuthorizes(boil.GetDB(), insert, related...)
}

// AddChildAuthorizesP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ChildAuthorizes.
// Sets related.R.Child appropriately.
// Panics on error.
func (o *Party) AddChildAuthorizesP(exec boil.Executor, insert bool, related ...*Authorize) {
	if err := o.AddChildAuthorizes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddChildAuthorizesGP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ChildAuthorizes.
// Sets related.R.Child appropriately.
// Uses the global database handle and panics on error.
func (o *Party) AddChildAuthorizesGP(insert bool, related ...*Authorize) {
	if err := o.AddChildAuthorizes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddChildAuthorizes adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ChildAuthorizes.
// Sets related.R.Child appropriately.
func (o *Party) AddChildAuthorizes(exec boil.Executor, insert bool, related ...*Authorize) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Child = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"authorize\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"child"}),
				strmangle.WhereClause("\"", "\"", 2, authorizePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Child, rel.Parent}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Child = o.ID
		}
	}

	if o.R == nil {
		o.R = &partyR{
			ChildAuthorizes: related,
		}
	} else {
		o.R.ChildAuthorizes = append(o.R.ChildAuthorizes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorizeR{
				Child: o,
			}
		} else {
			rel.R.Child = o
		}
	}
	return nil
}

// AddParentAuthorizesG adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ParentAuthorizes.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Party) AddParentAuthorizesG(insert bool, related ...*Authorize) error {
	return o.AddParentAuthorizes(boil.GetDB(), insert, related...)
}

// AddParentAuthorizesP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ParentAuthorizes.
// Sets related.R.Parent appropriately.
// Panics on error.
func (o *Party) AddParentAuthorizesP(exec boil.Executor, insert bool, related ...*Authorize) {
	if err := o.AddParentAuthorizes(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentAuthorizesGP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ParentAuthorizes.
// Sets related.R.Parent appropriately.
// Uses the global database handle and panics on error.
func (o *Party) AddParentAuthorizesGP(insert bool, related ...*Authorize) {
	if err := o.AddParentAuthorizes(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentAuthorizes adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.ParentAuthorizes.
// Sets related.R.Parent appropriately.
func (o *Party) AddParentAuthorizes(exec boil.Executor, insert bool, related ...*Authorize) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Parent = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"authorize\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent"}),
				strmangle.WhereClause("\"", "\"", 2, authorizePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Child, rel.Parent}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Parent = o.ID
		}
	}

	if o.R == nil {
		o.R = &partyR{
			ParentAuthorizes: related,
		}
	} else {
		o.R.ParentAuthorizes = append(o.R.ParentAuthorizes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authorizeR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// AddAgentNotificationsG adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.AgentNotifications.
// Sets related.R.Agent appropriately.
// Uses the global database handle.
func (o *Party) AddAgentNotificationsG(insert bool, related ...*Notification) error {
	return o.AddAgentNotifications(boil.GetDB(), insert, related...)
}

// AddAgentNotificationsP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.AgentNotifications.
// Sets related.R.Agent appropriately.
// Panics on error.
func (o *Party) AddAgentNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddAgentNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAgentNotificationsGP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.AgentNotifications.
// Sets related.R.Agent appropriately.
// Uses the global database handle and panics on error.
func (o *Party) AddAgentNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddAgentNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAgentNotifications adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.AgentNotifications.
// Sets related.R.Agent appropriately.
func (o *Party) AddAgentNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Agent = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"agent"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Agent = o.ID
		}
	}

	if o.R == nil {
		o.R = &partyR{
			AgentNotifications: related,
		}
	} else {
		o.R.AgentNotifications = append(o.R.AgentNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Agent: o,
			}
		} else {
			rel.R.Agent = o
		}
	}
	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Party appropriately.
// Uses the global database handle.
func (o *Party) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Party appropriately.
// Panics on error.
func (o *Party) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Party appropriately.
// Uses the global database handle and panics on error.
func (o *Party) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Party appropriately.
func (o *Party) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Party.Int = o.ID
			rel.Party.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"party"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Party.Int = o.ID
			rel.Party.Valid = true
		}
	}

	if o.R == nil {
		o.R = &partyR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Party: o,
			}
		} else {
			rel.R.Party = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// party replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Party's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Party's Notifications accordingly.
// Uses the global database handle.
func (o *Party) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// party replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Party's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Party's Notifications accordingly.
// Panics on error.
func (o *Party) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// party replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Party's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Party's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Party) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// party replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Party's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Party's Notifications accordingly.
func (o *Party) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"party\" = null where \"party\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Party.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Party = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Party.
// Uses the global database handle.
func (o *Party) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Party.
// Panics on error.
func (o *Party) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Party.
// Uses the global database handle and panics on error.
func (o *Party) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Party.
func (o *Party) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Party.Valid = false
		if rel.R != nil {
			rel.R.Party = nil
		}
		if err = rel.Update(exec, "party"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddVolumeAccessesG adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Party appropriately.
// Uses the global database handle.
func (o *Party) AddVolumeAccessesG(insert bool, related ...*VolumeAccess) error {
	return o.AddVolumeAccesses(boil.GetDB(), insert, related...)
}

// AddVolumeAccessesP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Party appropriately.
// Panics on error.
func (o *Party) AddVolumeAccessesP(exec boil.Executor, insert bool, related ...*VolumeAccess) {
	if err := o.AddVolumeAccesses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeAccessesGP adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Party appropriately.
// Uses the global database handle and panics on error.
func (o *Party) AddVolumeAccessesGP(insert bool, related ...*VolumeAccess) {
	if err := o.AddVolumeAccesses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeAccesses adds the given related objects to the existing relationships
// of the party, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Party appropriately.
func (o *Party) AddVolumeAccesses(exec boil.Executor, insert bool, related ...*VolumeAccess) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Party = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_access\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"party"}),
				strmangle.WhereClause("\"", "\"", 2, volumeAccessPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Volume, rel.Party}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Party = o.ID
		}
	}

	if o.R == nil {
		o.R = &partyR{
			VolumeAccesses: related,
		}
	} else {
		o.R.VolumeAccesses = append(o.R.VolumeAccesses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeAccessR{
				Party: o,
			}
		} else {
			rel.R.Party = o
		}
	}
	return nil
}

// PartiesG retrieves all records.
func PartiesG(mods ...qm.QueryMod) partyQuery {
	return Parties(boil.GetDB(), mods...)
}

// Parties retrieves all the records using an executor.
func Parties(exec boil.Executor, mods ...qm.QueryMod) partyQuery {
	mods = append(mods, qm.From("\"party\""))
	return partyQuery{NewQuery(exec, mods...)}
}

// FindPartyG retrieves a single record by ID.
func FindPartyG(id int, selectCols ...string) (*Party, error) {
	return FindParty(boil.GetDB(), id, selectCols...)
}

// FindPartyGP retrieves a single record by ID, and panics on error.
func FindPartyGP(id int, selectCols ...string) *Party {
	retobj, err := FindParty(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindParty retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindParty(exec boil.Executor, id int, selectCols ...string) (*Party, error) {
	partyObj := &Party{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"party\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(partyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from party")
	}

	return partyObj, nil
}

// FindPartyP retrieves a single record by ID with an executor, and panics on error.
func FindPartyP(exec boil.Executor, id int, selectCols ...string) *Party {
	retobj, err := FindParty(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Party) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Party) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Party) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Party) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no party provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partyColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	partyInsertCacheMut.RLock()
	cache, cached := partyInsertCache[key]
	partyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			partyColumns,
			partyColumnsWithDefault,
			partyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(partyType, partyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"party\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"party\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into party")
	}

	if !cached {
		partyInsertCacheMut.Lock()
		partyInsertCache[key] = cache
		partyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Party record. See Update for
// whitelist behavior description.
func (o *Party) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Party record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Party) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Party, and panics on error.
// See Update for whitelist behavior description.
func (o *Party) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Party.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Party) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	partyUpdateCacheMut.RLock()
	cache, cached := partyUpdateCache[key]
	partyUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(partyColumns, partyPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update party, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"party\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, partyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, append(wl, partyPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update party row")
	}

	if !cached {
		partyUpdateCacheMut.Lock()
		partyUpdateCache[key] = cache
		partyUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q partyQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q partyQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for party")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o PartySlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o PartySlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o PartySlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o PartySlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"party\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(partyPrimaryKeyColumns), len(colNames)+1, len(partyPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in party slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Party) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Party) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Party) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Party) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no party provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(partyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	partyUpsertCacheMut.RLock()
	cache, cached := partyUpsertCache[key]
	partyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			partyColumns,
			partyColumnsWithDefault,
			partyColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			partyColumns,
			partyPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert party, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(partyPrimaryKeyColumns))
			copy(conflict, partyPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"party\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(partyType, partyMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(partyType, partyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert party")
	}

	if !cached {
		partyUpsertCacheMut.Lock()
		partyUpsertCache[key] = cache
		partyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Party record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Party) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Party record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Party) DeleteG() error {
	if o == nil {
		return errors.New("public: no Party provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Party record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Party) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Party record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Party) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Party provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), partyPrimaryKeyMapping)
	query := "DELETE FROM \"party\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from party")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q partyQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q partyQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no partyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from party")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o PartySlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o PartySlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Party slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o PartySlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o PartySlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Party slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(partyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"party\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, partyPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(partyPrimaryKeyColumns), 1, len(partyPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from party slice")
	}

	if len(partyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Party) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Party) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Party) ReloadG() error {
	if o == nil {
		return errors.New("public: no Party provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Party) Reload(exec boil.Executor) error {
	ret, err := FindParty(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PartySlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *PartySlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartySlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty PartySlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *PartySlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	parties := PartySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), partyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"party\".* FROM \"party\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, partyPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(partyPrimaryKeyColumns), 1, len(partyPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&parties)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in PartySlice")
	}

	*o = parties

	return nil
}

// PartyExists checks if the Party row exists.
func PartyExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"party\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if party exists")
	}

	return exists, nil
}

// PartyExistsG checks if the Party row exists.
func PartyExistsG(id int) (bool, error) {
	return PartyExists(boil.GetDB(), id)
}

// PartyExistsGP checks if the Party row exists. Panics on error.
func PartyExistsGP(id int) bool {
	e, err := PartyExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// PartyExistsP checks if the Party row exists. Panics on error.
func PartyExistsP(exec boil.Executor, id int) bool {
	e, err := PartyExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
