// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Volume is an object representing the database table.
type Volume struct {
	ID    int         `db:"id" json:"volume_id"`
	Name  string      `db:"name" json:"volume_name"`
	Body  null.String `db:"body" json:"volume_body,omitempty"`
	Alias null.String `db:"alias" json:"volume_alias,omitempty"`
	Doi   null.String `db:"doi" json:"volume_doi,omitempty"`

	R *volumeR `db:"-" json:"-"`
	L volumeL  `db:"-" json:"-"`
}

// volumeR is where relationships are stored.
type volumeR struct {
	VolumeCitation   *VolumeCitation
	VolumeOwner      *VolumeOwner
	Assets           AssetSlice
	Containers       ContainerSlice
	Notifications    NotificationSlice
	Records          RecordSlice
	Uploads          UploadSlice
	VolumeAccesses   VolumeAccessSlice
	VolumeFundings   VolumeFundingSlice
	VolumeInclusions VolumeInclusionSlice
	VolumeLinks      VolumeLinkSlice
	Metrics          MetricSlice
	VolumeStates     VolumeStateSlice
}

// volumeL is where Load methods for each relationship are stored.
type volumeL struct{}

var (
	volumeColumns               = []string{"id", "name", "body", "alias", "doi"}
	volumeColumnsWithoutDefault = []string{"name", "body", "alias", "doi"}
	volumeColumnsWithDefault    = []string{"id"}
	volumeColumnsWithCustom     = []string{}

	volumePrimaryKeyColumns = []string{"id"}
)

type (
	// VolumeSlice is an alias for a slice of pointers to Volume.
	// This should generally be used opposed to []Volume.
	VolumeSlice []*Volume
	// VolumeHook is the signature for custom Volume hook methods
	VolumeHook func(boil.Executor, *Volume) error

	volumeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	volumeType    = reflect.TypeOf(&Volume{})
	volumeMapping = queries.MakeStructMapping(volumeType)

	volumePrimaryKeyMapping, _ = queries.BindMapping(volumeType, volumeMapping, volumePrimaryKeyColumns)

	volumeInsertCacheMut sync.RWMutex
	volumeInsertCache    = make(map[string]insertCache)
	volumeUpdateCacheMut sync.RWMutex
	volumeUpdateCache    = make(map[string]updateCache)
	volumeUpsertCacheMut sync.RWMutex
	volumeUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var volumeBeforeInsertHooks []VolumeHook
var volumeBeforeUpdateHooks []VolumeHook
var volumeBeforeDeleteHooks []VolumeHook
var volumeBeforeUpsertHooks []VolumeHook

var volumeAfterInsertHooks []VolumeHook
var volumeAfterSelectHooks []VolumeHook
var volumeAfterUpdateHooks []VolumeHook
var volumeAfterDeleteHooks []VolumeHook
var volumeAfterUpsertHooks []VolumeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Volume) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Volume) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Volume) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Volume) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Volume) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Volume) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Volume) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Volume) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Volume) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range volumeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddVolumeHook registers your hook function for all future operations.
func AddVolumeHook(hookPoint boil.HookPoint, volumeHook VolumeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		volumeBeforeInsertHooks = append(volumeBeforeInsertHooks, volumeHook)
	case boil.BeforeUpdateHook:
		volumeBeforeUpdateHooks = append(volumeBeforeUpdateHooks, volumeHook)
	case boil.BeforeDeleteHook:
		volumeBeforeDeleteHooks = append(volumeBeforeDeleteHooks, volumeHook)
	case boil.BeforeUpsertHook:
		volumeBeforeUpsertHooks = append(volumeBeforeUpsertHooks, volumeHook)
	case boil.AfterInsertHook:
		volumeAfterInsertHooks = append(volumeAfterInsertHooks, volumeHook)
	case boil.AfterSelectHook:
		volumeAfterSelectHooks = append(volumeAfterSelectHooks, volumeHook)
	case boil.AfterUpdateHook:
		volumeAfterUpdateHooks = append(volumeAfterUpdateHooks, volumeHook)
	case boil.AfterDeleteHook:
		volumeAfterDeleteHooks = append(volumeAfterDeleteHooks, volumeHook)
	case boil.AfterUpsertHook:
		volumeAfterUpsertHooks = append(volumeAfterUpsertHooks, volumeHook)
	}
}

// OneP returns a single volume record from the query, and panics on error.
func (q volumeQuery) OneP() *Volume {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single volume record from the query.
func (q volumeQuery) One() (*Volume, error) {
	o := &Volume{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for volume")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Volume records from the query, and panics on error.
func (q volumeQuery) AllP() VolumeSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Volume records from the query.
func (q volumeQuery) All() (VolumeSlice, error) {
	var o VolumeSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Volume slice")
	}

	if len(volumeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Volume records in the query, and panics on error.
func (q volumeQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Volume records in the query.
func (q volumeQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count volume rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q volumeQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q volumeQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if volume exists")
	}

	return count > 0, nil
}

// VolumeCitationG pointed to by the foreign key.
func (o *Volume) VolumeCitationG(mods ...qm.QueryMod) volumeCitationQuery {
	return o.VolumeCitationByFk(boil.GetDB(), mods...)
}

// VolumeCitation pointed to by the foreign key.
func (o *Volume) VolumeCitationByFk(exec boil.Executor, mods ...qm.QueryMod) volumeCitationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("volume=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := VolumeCitations(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_citation\"")

	return query
}

// VolumeOwnerG pointed to by the foreign key.
func (o *Volume) VolumeOwnerG(mods ...qm.QueryMod) volumeOwnerQuery {
	return o.VolumeOwnerByFk(boil.GetDB(), mods...)
}

// VolumeOwner pointed to by the foreign key.
func (o *Volume) VolumeOwnerByFk(exec boil.Executor, mods ...qm.QueryMod) volumeOwnerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("volume=?", o.ID),
	}

	queryMods = append(queryMods, mods...)

	query := VolumeOwners(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_owners\"")

	return query
}

// AssetsG retrieves all the asset's asset.
func (o *Volume) AssetsG(mods ...qm.QueryMod) assetQuery {
	return o.AssetsByFk(boil.GetDB(), mods...)
}

// Assets retrieves all the asset's asset with an executor.
func (o *Volume) AssetsByFk(exec boil.Executor, mods ...qm.QueryMod) assetQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := Assets(exec, queryMods...)
	queries.SetFrom(query.Query, "\"asset\" as \"a\"")
	return query
}

// ContainersG retrieves all the container's container.
func (o *Volume) ContainersG(mods ...qm.QueryMod) containerQuery {
	return o.ContainersByFk(boil.GetDB(), mods...)
}

// Containers retrieves all the container's container with an executor.
func (o *Volume) ContainersByFk(exec boil.Executor, mods ...qm.QueryMod) containerQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := Containers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"container\" as \"a\"")
	return query
}

// NotificationsG retrieves all the notification's notification.
func (o *Volume) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Volume) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// RecordsG retrieves all the record's record.
func (o *Volume) RecordsG(mods ...qm.QueryMod) recordQuery {
	return o.RecordsByFk(boil.GetDB(), mods...)
}

// Records retrieves all the record's record with an executor.
func (o *Volume) RecordsByFk(exec boil.Executor, mods ...qm.QueryMod) recordQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := Records(exec, queryMods...)
	queries.SetFrom(query.Query, "\"record\" as \"a\"")
	return query
}

// UploadsG retrieves all the upload's upload.
func (o *Volume) UploadsG(mods ...qm.QueryMod) uploadQuery {
	return o.UploadsByFk(boil.GetDB(), mods...)
}

// Uploads retrieves all the upload's upload with an executor.
func (o *Volume) UploadsByFk(exec boil.Executor, mods ...qm.QueryMod) uploadQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := Uploads(exec, queryMods...)
	queries.SetFrom(query.Query, "\"upload\" as \"a\"")
	return query
}

// VolumeAccessesG retrieves all the volume_access's volume access.
func (o *Volume) VolumeAccessesG(mods ...qm.QueryMod) volumeAccessQuery {
	return o.VolumeAccessesByFk(boil.GetDB(), mods...)
}

// VolumeAccesses retrieves all the volume_access's volume access with an executor.
func (o *Volume) VolumeAccessesByFk(exec boil.Executor, mods ...qm.QueryMod) volumeAccessQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := VolumeAccesses(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_access\" as \"a\"")
	return query
}

// VolumeFundingsG retrieves all the volume_funding's volume funding.
func (o *Volume) VolumeFundingsG(mods ...qm.QueryMod) volumeFundingQuery {
	return o.VolumeFundingsByFk(boil.GetDB(), mods...)
}

// VolumeFundings retrieves all the volume_funding's volume funding with an executor.
func (o *Volume) VolumeFundingsByFk(exec boil.Executor, mods ...qm.QueryMod) volumeFundingQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := VolumeFundings(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_funding\" as \"a\"")
	return query
}

// VolumeInclusionsG retrieves all the volume_inclusion's volume inclusion.
func (o *Volume) VolumeInclusionsG(mods ...qm.QueryMod) volumeInclusionQuery {
	return o.VolumeInclusionsByFk(boil.GetDB(), mods...)
}

// VolumeInclusions retrieves all the volume_inclusion's volume inclusion with an executor.
func (o *Volume) VolumeInclusionsByFk(exec boil.Executor, mods ...qm.QueryMod) volumeInclusionQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := VolumeInclusions(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_inclusion\" as \"a\"")
	return query
}

// VolumeLinksG retrieves all the volume_link's volume link.
func (o *Volume) VolumeLinksG(mods ...qm.QueryMod) volumeLinkQuery {
	return o.VolumeLinksByFk(boil.GetDB(), mods...)
}

// VolumeLinks retrieves all the volume_link's volume link with an executor.
func (o *Volume) VolumeLinksByFk(exec boil.Executor, mods ...qm.QueryMod) volumeLinkQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := VolumeLinks(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_link\" as \"a\"")
	return query
}

// MetricsG retrieves all the metric's metric.
func (o *Volume) MetricsG(mods ...qm.QueryMod) metricQuery {
	return o.MetricsByFk(boil.GetDB(), mods...)
}

// Metrics retrieves all the metric's metric with an executor.
func (o *Volume) MetricsByFk(exec boil.Executor, mods ...qm.QueryMod) metricQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"volume_metric\" as \"b\" on \"a\".\"id\" = \"b\".\"metric\""),
		qm.Where("\"b\".\"volume\"=?", o.ID),
	)

	query := Metrics(exec, queryMods...)
	queries.SetFrom(query.Query, "\"metric\" as \"a\"")
	return query
}

// VolumeStatesG retrieves all the volume_state's volume state.
func (o *Volume) VolumeStatesG(mods ...qm.QueryMod) volumeStateQuery {
	return o.VolumeStatesByFk(boil.GetDB(), mods...)
}

// VolumeStates retrieves all the volume_state's volume state with an executor.
func (o *Volume) VolumeStatesByFk(exec boil.Executor, mods ...qm.QueryMod) volumeStateQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"volume\"=?", o.ID),
	)

	query := VolumeStates(exec, queryMods...)
	queries.SetFrom(query.Query, "\"volume_state\" as \"a\"")
	return query
}

// LoadVolumeCitation allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeCitation(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_citation\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VolumeCitation")
	}
	defer results.Close()

	var resultSlice []*VolumeCitation
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VolumeCitation")
	}

	if len(volumeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VolumeCitation = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Volume {
				local.R.VolumeCitation = foreign
				break
			}
		}
	}

	return nil
}

// LoadVolumeOwner allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeOwner(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_owners\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load VolumeOwner")
	}
	defer results.Close()

	var resultSlice []*VolumeOwner
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice VolumeOwner")
	}

	if len(volumeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.VolumeOwner = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ID == foreign.Volume {
				local.R.VolumeOwner = foreign
				break
			}
		}
	}

	return nil
}

// LoadAssets allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadAssets(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"asset\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load asset")
	}
	defer results.Close()

	var resultSlice []*Asset
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice asset")
	}

	if len(assetAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Assets = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.Assets = append(local.R.Assets, foreign)
				break
			}
		}
	}

	return nil
}

// LoadContainers allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadContainers(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"container\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load container")
	}
	defer results.Close()

	var resultSlice []*Container
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice container")
	}

	if len(containerAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Containers = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.Containers = append(local.R.Containers, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadNotifications(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// LoadRecords allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadRecords(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"record\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load record")
	}
	defer results.Close()

	var resultSlice []*Record
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice record")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Records = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.Records = append(local.R.Records, foreign)
				break
			}
		}
	}

	return nil
}

// LoadUploads allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadUploads(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"upload\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load upload")
	}
	defer results.Close()

	var resultSlice []*Upload
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice upload")
	}

	if len(uploadAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Uploads = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.Uploads = append(local.R.Uploads, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeAccesses allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeAccesses(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_access\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_access")
	}
	defer results.Close()

	var resultSlice []*VolumeAccess
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_access")
	}

	if len(volumeAccessAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeAccesses = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.VolumeAccesses = append(local.R.VolumeAccesses, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeFundings allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeFundings(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_funding\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_funding")
	}
	defer results.Close()

	var resultSlice []*VolumeFunding
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_funding")
	}

	if len(volumeFundingAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeFundings = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.VolumeFundings = append(local.R.VolumeFundings, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeInclusions allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeInclusions(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_inclusion\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_inclusion")
	}
	defer results.Close()

	var resultSlice []*VolumeInclusion
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_inclusion")
	}

	if len(volumeInclusionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeInclusions = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.VolumeInclusions = append(local.R.VolumeInclusions, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeLinks allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeLinks(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_link\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_link")
	}
	defer results.Close()

	var resultSlice []*VolumeLink
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_link")
	}

	if len(volumeLinkAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeLinks = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.VolumeLinks = append(local.R.VolumeLinks, foreign)
				break
			}
		}
	}

	return nil
}

// LoadMetrics allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadMetrics(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select \"a\".*, \"b\".\"volume\" from \"metric\" as \"a\" inner join \"volume_metric\" as \"b\" on \"a\".\"id\" = \"b\".\"metric\" where \"b\".\"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load metric")
	}
	defer results.Close()

	var resultSlice []*Metric

	var localJoinCols []int
	for results.Next() {
		one := new(Metric)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Category, &one.Name, &one.Release, &one.Type, &one.Options, &one.Assumed, &one.Description, &one.Required, &localJoinCol)
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice metric")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Err(); err != nil {
		return errors.Wrap(err, "failed to plebian-bind eager loaded slice metric")
	}

	if len(metricAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Metrics = resultSlice
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Metrics = append(local.R.Metrics, foreign)
				break
			}
		}
	}

	return nil
}

// LoadVolumeStates allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (volumeL) LoadVolumeStates(e boil.Executor, singular bool, maybeVolume interface{}) error {
	var slice []*Volume
	var object *Volume

	count := 1
	if singular {
		object = maybeVolume.(*Volume)
	} else {
		slice = *maybeVolume.(*VolumeSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &volumeR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &volumeR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"volume_state\" where \"volume\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load volume_state")
	}
	defer results.Close()

	var resultSlice []*VolumeState
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice volume_state")
	}

	if len(volumeStateAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.VolumeStates = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Volume {
				local.R.VolumeStates = append(local.R.VolumeStates, foreign)
				break
			}
		}
	}

	return nil
}

// SetVolumeCitationG of the volume to the related item.
// Sets o.R.VolumeCitation to related.
// Adds o to related.R.Volume.
// Uses the global database handle.
func (o *Volume) SetVolumeCitationG(insert bool, related *VolumeCitation) error {
	return o.SetVolumeCitation(boil.GetDB(), insert, related)
}

// SetVolumeCitationP of the volume to the related item.
// Sets o.R.VolumeCitation to related.
// Adds o to related.R.Volume.
// Panics on error.
func (o *Volume) SetVolumeCitationP(exec boil.Executor, insert bool, related *VolumeCitation) {
	if err := o.SetVolumeCitation(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeCitationGP of the volume to the related item.
// Sets o.R.VolumeCitation to related.
// Adds o to related.R.Volume.
// Uses the global database handle and panics on error.
func (o *Volume) SetVolumeCitationGP(insert bool, related *VolumeCitation) {
	if err := o.SetVolumeCitation(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeCitation of the volume to the related item.
// Sets o.R.VolumeCitation to related.
// Adds o to related.R.Volume.
func (o *Volume) SetVolumeCitation(exec boil.Executor, insert bool, related *VolumeCitation) error {
	var err error

	if insert {
		related.Volume = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"volume_citation\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
			strmangle.WhereClause("\"", "\"", 2, volumeCitationPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Volume}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Volume = o.ID

	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeCitation: related,
		}
	} else {
		o.R.VolumeCitation = related
	}

	if related.R == nil {
		related.R = &volumeCitationR{
			Volume: o,
		}
	} else {
		related.R.Volume = o
	}
	return nil
}

// SetVolumeOwnerG of the volume to the related item.
// Sets o.R.VolumeOwner to related.
// Adds o to related.R.Volume.
// Uses the global database handle.
func (o *Volume) SetVolumeOwnerG(insert bool, related *VolumeOwner) error {
	return o.SetVolumeOwner(boil.GetDB(), insert, related)
}

// SetVolumeOwnerP of the volume to the related item.
// Sets o.R.VolumeOwner to related.
// Adds o to related.R.Volume.
// Panics on error.
func (o *Volume) SetVolumeOwnerP(exec boil.Executor, insert bool, related *VolumeOwner) {
	if err := o.SetVolumeOwner(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeOwnerGP of the volume to the related item.
// Sets o.R.VolumeOwner to related.
// Adds o to related.R.Volume.
// Uses the global database handle and panics on error.
func (o *Volume) SetVolumeOwnerGP(insert bool, related *VolumeOwner) {
	if err := o.SetVolumeOwner(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetVolumeOwner of the volume to the related item.
// Sets o.R.VolumeOwner to related.
// Adds o to related.R.Volume.
func (o *Volume) SetVolumeOwner(exec boil.Executor, insert bool, related *VolumeOwner) error {
	var err error

	if insert {
		related.Volume = o.ID

		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	} else {
		updateQuery := fmt.Sprintf(
			"UPDATE \"volume_owners\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
			strmangle.WhereClause("\"", "\"", 2, volumeOwnerPrimaryKeyColumns),
		)
		values := []interface{}{o.ID, related.Volume}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, updateQuery)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		if _, err = exec.Exec(updateQuery, values...); err != nil {
			return errors.Wrap(err, "failed to update foreign table")
		}

		related.Volume = o.ID

	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeOwner: related,
		}
	} else {
		o.R.VolumeOwner = related
	}

	if related.R == nil {
		related.R = &volumeOwnerR{
			Volume: o,
		}
	} else {
		related.R.Volume = o
	}
	return nil
}

// AddAssetsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Assets.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddAssetsG(insert bool, related ...*Asset) error {
	return o.AddAssets(boil.GetDB(), insert, related...)
}

// AddAssetsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Assets.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddAssetsP(exec boil.Executor, insert bool, related ...*Asset) {
	if err := o.AddAssets(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssetsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Assets.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddAssetsGP(insert bool, related ...*Asset) {
	if err := o.AddAssets(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddAssets adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Assets.
// Sets related.R.Volume appropriately.
func (o *Volume) AddAssets(exec boil.Executor, insert bool, related ...*Asset) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"asset\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, assetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			Assets: related,
		}
	} else {
		o.R.Assets = append(o.R.Assets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &assetR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddContainersG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Containers.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddContainersG(insert bool, related ...*Container) error {
	return o.AddContainers(boil.GetDB(), insert, related...)
}

// AddContainersP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Containers.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddContainersP(exec boil.Executor, insert bool, related ...*Container) {
	if err := o.AddContainers(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContainersGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Containers.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddContainersGP(insert bool, related ...*Container) {
	if err := o.AddContainers(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddContainers adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Containers.
// Sets related.R.Volume appropriately.
func (o *Volume) AddContainers(exec boil.Executor, insert bool, related ...*Container) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"container\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, containerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			Containers: related,
		}
	} else {
		o.R.Containers = append(o.R.Containers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &containerR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Volume appropriately.
func (o *Volume) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume.Int = o.ID
			rel.Volume.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume.Int = o.ID
			rel.Volume.Valid = true
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volume's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Volume's Notifications accordingly.
// Uses the global database handle.
func (o *Volume) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volume's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Volume's Notifications accordingly.
// Panics on error.
func (o *Volume) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volume's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Volume's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Volume) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volume's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Volume's Notifications accordingly.
func (o *Volume) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"volume\" = null where \"volume\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Volume.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Volume = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Volume.
// Uses the global database handle.
func (o *Volume) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Volume.
// Panics on error.
func (o *Volume) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Volume.
// Uses the global database handle and panics on error.
func (o *Volume) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Volume.
func (o *Volume) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Volume.Valid = false
		if rel.R != nil {
			rel.R.Volume = nil
		}
		if err = rel.Update(exec, "volume"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// AddRecordsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddRecordsG(insert bool, related ...*Record) error {
	return o.AddRecords(boil.GetDB(), insert, related...)
}

// AddRecordsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddRecordsP(exec boil.Executor, insert bool, related ...*Record) {
	if err := o.AddRecords(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRecordsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddRecordsGP(insert bool, related ...*Record) {
	if err := o.AddRecords(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddRecords adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Records.
// Sets related.R.Volume appropriately.
func (o *Volume) AddRecords(exec boil.Executor, insert bool, related ...*Record) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"record\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, recordPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			Records: related,
		}
	} else {
		o.R.Records = append(o.R.Records, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &recordR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddUploadsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddUploadsG(insert bool, related ...*Upload) error {
	return o.AddUploads(boil.GetDB(), insert, related...)
}

// AddUploadsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddUploadsP(exec boil.Executor, insert bool, related ...*Upload) {
	if err := o.AddUploads(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUploadsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddUploadsGP(insert bool, related ...*Upload) {
	if err := o.AddUploads(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddUploads adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Uploads.
// Sets related.R.Volume appropriately.
func (o *Volume) AddUploads(exec boil.Executor, insert bool, related ...*Upload) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"upload\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, uploadPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Token}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			Uploads: related,
		}
	} else {
		o.R.Uploads = append(o.R.Uploads, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &uploadR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddVolumeAccessesG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddVolumeAccessesG(insert bool, related ...*VolumeAccess) error {
	return o.AddVolumeAccesses(boil.GetDB(), insert, related...)
}

// AddVolumeAccessesP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddVolumeAccessesP(exec boil.Executor, insert bool, related ...*VolumeAccess) {
	if err := o.AddVolumeAccesses(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeAccessesGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddVolumeAccessesGP(insert bool, related ...*VolumeAccess) {
	if err := o.AddVolumeAccesses(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeAccesses adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeAccesses.
// Sets related.R.Volume appropriately.
func (o *Volume) AddVolumeAccesses(exec boil.Executor, insert bool, related ...*VolumeAccess) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_access\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, volumeAccessPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Volume, rel.Party}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeAccesses: related,
		}
	} else {
		o.R.VolumeAccesses = append(o.R.VolumeAccesses, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeAccessR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddVolumeFundingsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeFundings.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddVolumeFundingsG(insert bool, related ...*VolumeFunding) error {
	return o.AddVolumeFundings(boil.GetDB(), insert, related...)
}

// AddVolumeFundingsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeFundings.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddVolumeFundingsP(exec boil.Executor, insert bool, related ...*VolumeFunding) {
	if err := o.AddVolumeFundings(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeFundingsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeFundings.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddVolumeFundingsGP(insert bool, related ...*VolumeFunding) {
	if err := o.AddVolumeFundings(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeFundings adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeFundings.
// Sets related.R.Volume appropriately.
func (o *Volume) AddVolumeFundings(exec boil.Executor, insert bool, related ...*VolumeFunding) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_funding\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, volumeFundingPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Volume, rel.Funder}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeFundings: related,
		}
	} else {
		o.R.VolumeFundings = append(o.R.VolumeFundings, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeFundingR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddVolumeInclusionsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddVolumeInclusionsG(insert bool, related ...*VolumeInclusion) error {
	return o.AddVolumeInclusions(boil.GetDB(), insert, related...)
}

// AddVolumeInclusionsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddVolumeInclusionsP(exec boil.Executor, insert bool, related ...*VolumeInclusion) {
	if err := o.AddVolumeInclusions(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeInclusionsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddVolumeInclusionsGP(insert bool, related ...*VolumeInclusion) {
	if err := o.AddVolumeInclusions(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeInclusions adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeInclusions.
// Sets related.R.Volume appropriately.
func (o *Volume) AddVolumeInclusions(exec boil.Executor, insert bool, related ...*VolumeInclusion) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_inclusion\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, volumeInclusionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Container, rel.Volume}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeInclusions: related,
		}
	} else {
		o.R.VolumeInclusions = append(o.R.VolumeInclusions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeInclusionR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddVolumeLinksG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeLinks.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddVolumeLinksG(insert bool, related ...*VolumeLink) error {
	return o.AddVolumeLinks(boil.GetDB(), insert, related...)
}

// AddVolumeLinksP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeLinks.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddVolumeLinksP(exec boil.Executor, insert bool, related ...*VolumeLink) {
	if err := o.AddVolumeLinks(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeLinksGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeLinks.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddVolumeLinksGP(insert bool, related ...*VolumeLink) {
	if err := o.AddVolumeLinks(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeLinks adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeLinks.
// Sets related.R.Volume appropriately.
func (o *Volume) AddVolumeLinks(exec boil.Executor, insert bool, related ...*VolumeLink) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_link\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, volumeLinkPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Volume, rel.URL}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeLinks: related,
		}
	} else {
		o.R.VolumeLinks = append(o.R.VolumeLinks, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeLinkR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// AddMetricsG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Metrics.
// Sets related.R.Volumes appropriately.
// Uses the global database handle.
func (o *Volume) AddMetricsG(insert bool, related ...*Metric) error {
	return o.AddMetrics(boil.GetDB(), insert, related...)
}

// AddMetricsP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Metrics.
// Sets related.R.Volumes appropriately.
// Panics on error.
func (o *Volume) AddMetricsP(exec boil.Executor, insert bool, related ...*Metric) {
	if err := o.AddMetrics(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMetricsGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Metrics.
// Sets related.R.Volumes appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddMetricsGP(insert bool, related ...*Metric) {
	if err := o.AddMetrics(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddMetrics adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.Metrics.
// Sets related.R.Volumes appropriately.
func (o *Volume) AddMetrics(exec boil.Executor, insert bool, related ...*Metric) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"volume_metric\" (\"volume\", \"metric\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &volumeR{
			Metrics: related,
		}
	} else {
		o.R.Metrics = append(o.R.Metrics, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &metricR{
				Volumes: VolumeSlice{o},
			}
		} else {
			rel.R.Volumes = append(rel.R.Volumes, o)
		}
	}
	return nil
}

// SetMetricsG removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volumes's Metrics accordingly.
// Replaces o.R.Metrics with related.
// Sets related.R.Volumes's Metrics accordingly.
// Uses the global database handle.
func (o *Volume) SetMetricsG(insert bool, related ...*Metric) error {
	return o.SetMetrics(boil.GetDB(), insert, related...)
}

// SetMetricsP removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volumes's Metrics accordingly.
// Replaces o.R.Metrics with related.
// Sets related.R.Volumes's Metrics accordingly.
// Panics on error.
func (o *Volume) SetMetricsP(exec boil.Executor, insert bool, related ...*Metric) {
	if err := o.SetMetrics(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMetricsGP removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volumes's Metrics accordingly.
// Replaces o.R.Metrics with related.
// Sets related.R.Volumes's Metrics accordingly.
// Uses the global database handle and panics on error.
func (o *Volume) SetMetricsGP(insert bool, related ...*Metric) {
	if err := o.SetMetrics(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetMetrics removes all previously related items of the
// volume replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Volumes's Metrics accordingly.
// Replaces o.R.Metrics with related.
// Sets related.R.Volumes's Metrics accordingly.
func (o *Volume) SetMetrics(exec boil.Executor, insert bool, related ...*Metric) error {
	query := "delete from \"volume_metric\" where \"volume\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeMetricsFromVolumesSlice(o, related)
	if o.R != nil {
		o.R.Metrics = nil
	}
	return o.AddMetrics(exec, insert, related...)
}

// RemoveMetricsG relationships from objects passed in.
// Removes related items from R.Metrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Volumes.
// Uses the global database handle.
func (o *Volume) RemoveMetricsG(related ...*Metric) error {
	return o.RemoveMetrics(boil.GetDB(), related...)
}

// RemoveMetricsP relationships from objects passed in.
// Removes related items from R.Metrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Volumes.
// Panics on error.
func (o *Volume) RemoveMetricsP(exec boil.Executor, related ...*Metric) {
	if err := o.RemoveMetrics(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMetricsGP relationships from objects passed in.
// Removes related items from R.Metrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Volumes.
// Uses the global database handle and panics on error.
func (o *Volume) RemoveMetricsGP(related ...*Metric) {
	if err := o.RemoveMetrics(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveMetrics relationships from objects passed in.
// Removes related items from R.Metrics (uses pointer comparison, removal does not keep order)
// Sets related.R.Volumes.
func (o *Volume) RemoveMetrics(exec boil.Executor, related ...*Metric) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"volume_metric\" where \"volume\" = $1 and \"metric\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeMetricsFromVolumesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Metrics {
			if rel != ri {
				continue
			}

			ln := len(o.R.Metrics)
			if ln > 1 && i < ln-1 {
				o.R.Metrics[i] = o.R.Metrics[ln-1]
			}
			o.R.Metrics = o.R.Metrics[:ln-1]
			break
		}
	}

	return nil
}

func removeMetricsFromVolumesSlice(o *Volume, related []*Metric) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Volumes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Volumes)
			if ln > 1 && i < ln-1 {
				rel.R.Volumes[i] = rel.R.Volumes[ln-1]
			}
			rel.R.Volumes = rel.R.Volumes[:ln-1]
			break
		}
	}
}

// AddVolumeStatesG adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeStates.
// Sets related.R.Volume appropriately.
// Uses the global database handle.
func (o *Volume) AddVolumeStatesG(insert bool, related ...*VolumeState) error {
	return o.AddVolumeStates(boil.GetDB(), insert, related...)
}

// AddVolumeStatesP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeStates.
// Sets related.R.Volume appropriately.
// Panics on error.
func (o *Volume) AddVolumeStatesP(exec boil.Executor, insert bool, related ...*VolumeState) {
	if err := o.AddVolumeStates(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeStatesGP adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeStates.
// Sets related.R.Volume appropriately.
// Uses the global database handle and panics on error.
func (o *Volume) AddVolumeStatesGP(insert bool, related ...*VolumeState) {
	if err := o.AddVolumeStates(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddVolumeStates adds the given related objects to the existing relationships
// of the volume, optionally inserting them as new records.
// Appends related to o.R.VolumeStates.
// Sets related.R.Volume appropriately.
func (o *Volume) AddVolumeStates(exec boil.Executor, insert bool, related ...*VolumeState) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Volume = o.ID
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"volume_state\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"volume"}),
				strmangle.WhereClause("\"", "\"", 2, volumeStatePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.Volume, rel.Key}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Volume = o.ID
		}
	}

	if o.R == nil {
		o.R = &volumeR{
			VolumeStates: related,
		}
	} else {
		o.R.VolumeStates = append(o.R.VolumeStates, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &volumeStateR{
				Volume: o,
			}
		} else {
			rel.R.Volume = o
		}
	}
	return nil
}

// VolumesG retrieves all records.
func VolumesG(mods ...qm.QueryMod) volumeQuery {
	return Volumes(boil.GetDB(), mods...)
}

// Volumes retrieves all the records using an executor.
func Volumes(exec boil.Executor, mods ...qm.QueryMod) volumeQuery {
	mods = append(mods, qm.From("\"volume\""))
	return volumeQuery{NewQuery(exec, mods...)}
}

// FindVolumeG retrieves a single record by ID.
func FindVolumeG(id int, selectCols ...string) (*Volume, error) {
	return FindVolume(boil.GetDB(), id, selectCols...)
}

// FindVolumeGP retrieves a single record by ID, and panics on error.
func FindVolumeGP(id int, selectCols ...string) *Volume {
	retobj, err := FindVolume(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindVolume retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindVolume(exec boil.Executor, id int, selectCols ...string) (*Volume, error) {
	volumeObj := &Volume{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"volume\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(volumeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from volume")
	}

	return volumeObj, nil
}

// FindVolumeP retrieves a single record by ID with an executor, and panics on error.
func FindVolumeP(exec boil.Executor, id int, selectCols ...string) *Volume {
	retobj, err := FindVolume(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Volume) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Volume) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Volume) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Volume) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no volume provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(volumeColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	volumeInsertCacheMut.RLock()
	cache, cached := volumeInsertCache[key]
	volumeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			volumeColumns,
			volumeColumnsWithDefault,
			volumeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(volumeType, volumeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(volumeType, volumeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"volume\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"volume\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into volume")
	}

	if !cached {
		volumeInsertCacheMut.Lock()
		volumeInsertCache[key] = cache
		volumeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Volume record. See Update for
// whitelist behavior description.
func (o *Volume) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Volume record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Volume) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Volume, and panics on error.
// See Update for whitelist behavior description.
func (o *Volume) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Volume.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Volume) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	volumeUpdateCacheMut.RLock()
	cache, cached := volumeUpdateCache[key]
	volumeUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(volumeColumns, volumePrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update volume, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"volume\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, volumePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(volumeType, volumeMapping, append(wl, volumePrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update volume row")
	}

	if !cached {
		volumeUpdateCacheMut.Lock()
		volumeUpdateCache[key] = cache
		volumeUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q volumeQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q volumeQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for volume")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o VolumeSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o VolumeSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o VolumeSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o VolumeSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"volume\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(volumePrimaryKeyColumns), len(colNames)+1, len(volumePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in volume slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Volume) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Volume) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Volume) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Volume) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no volume provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(volumeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	volumeUpsertCacheMut.RLock()
	cache, cached := volumeUpsertCache[key]
	volumeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			volumeColumns,
			volumeColumnsWithDefault,
			volumeColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			volumeColumns,
			volumePrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert volume, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(volumePrimaryKeyColumns))
			copy(conflict, volumePrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"volume\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(volumeType, volumeMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(volumeType, volumeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert volume")
	}

	if !cached {
		volumeUpsertCacheMut.Lock()
		volumeUpsertCache[key] = cache
		volumeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Volume record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Volume) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Volume record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Volume) DeleteG() error {
	if o == nil {
		return errors.New("public: no Volume provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Volume record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Volume) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Volume record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Volume) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Volume provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), volumePrimaryKeyMapping)
	query := "DELETE FROM \"volume\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from volume")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q volumeQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q volumeQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no volumeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from volume")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o VolumeSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o VolumeSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Volume slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o VolumeSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o VolumeSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Volume slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(volumeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"volume\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, volumePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(volumePrimaryKeyColumns), 1, len(volumePrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from volume slice")
	}

	if len(volumeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Volume) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Volume) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Volume) ReloadG() error {
	if o == nil {
		return errors.New("public: no Volume provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Volume) Reload(exec boil.Executor) error {
	ret, err := FindVolume(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VolumeSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *VolumeSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VolumeSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty VolumeSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *VolumeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	volumes := VolumeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), volumePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"volume\".* FROM \"volume\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, volumePrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(volumePrimaryKeyColumns), 1, len(volumePrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&volumes)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in VolumeSlice")
	}

	*o = volumes

	return nil
}

// VolumeExists checks if the Volume row exists.
func VolumeExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"volume\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if volume exists")
	}

	return exists, nil
}

// VolumeExistsG checks if the Volume row exists.
func VolumeExistsG(id int) (bool, error) {
	return VolumeExists(boil.GetDB(), id)
}

// VolumeExistsGP checks if the Volume row exists. Panics on error.
func VolumeExistsGP(id int) bool {
	e, err := VolumeExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// VolumeExistsP checks if the Volume row exists. Panics on error.
func VolumeExistsP(exec boil.Executor, id int) bool {
	e, err := VolumeExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
