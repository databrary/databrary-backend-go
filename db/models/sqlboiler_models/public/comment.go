// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Comment is an object representing the database table.
type Comment struct {
	Container int                  `db:"container" json:"comment_container"`
	Segment   custom_types.Segment `db:"segment" json:"comment_segment"`
	ID        int                  `db:"id" json:"comment_id"`
	Who       int                  `db:"who" json:"comment_who"`
	Time      time.Time            `db:"time" json:"comment_time"`
	Text      string               `db:"text" json:"comment_text"`
	Parent    null.Int             `db:"parent" json:"comment_parent,omitempty"`

	R *commentR `db:"-" json:"-"`
	L commentL  `db:"-" json:"-"`
}

// commentR is where relationships are stored.
type commentR struct {
	Container      *Container
	Parent         *Comment
	Who            *Account
	ParentComments CommentSlice
	Notifications  NotificationSlice
}

// commentL is where Load methods for each relationship are stored.
type commentL struct{}

var (
	commentColumns               = []string{"container", "segment", "id", "who", "time", "text", "parent"}
	commentColumnsWithoutDefault = []string{"container", "segment", "who", "text", "parent"}
	commentColumnsWithDefault    = []string{"id", "time"}
	commentColumnsWithCustom     = []string{"segment"}

	commentPrimaryKeyColumns = []string{"id"}
)

type (
	// CommentSlice is an alias for a slice of pointers to Comment.
	// This should generally be used opposed to []Comment.
	CommentSlice []*Comment
	// CommentHook is the signature for custom Comment hook methods
	CommentHook func(boil.Executor, *Comment) error

	commentQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	commentType    = reflect.TypeOf(&Comment{})
	commentMapping = queries.MakeStructMapping(commentType)

	commentPrimaryKeyMapping, _ = queries.BindMapping(commentType, commentMapping, commentPrimaryKeyColumns)

	commentInsertCacheMut sync.RWMutex
	commentInsertCache    = make(map[string]insertCache)
	commentUpdateCacheMut sync.RWMutex
	commentUpdateCache    = make(map[string]updateCache)
	commentUpsertCacheMut sync.RWMutex
	commentUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var commentBeforeInsertHooks []CommentHook
var commentBeforeUpdateHooks []CommentHook
var commentBeforeDeleteHooks []CommentHook
var commentBeforeUpsertHooks []CommentHook

var commentAfterInsertHooks []CommentHook
var commentAfterSelectHooks []CommentHook
var commentAfterUpdateHooks []CommentHook
var commentAfterDeleteHooks []CommentHook
var commentAfterUpsertHooks []CommentHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Comment) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Comment) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Comment) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Comment) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Comment) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Comment) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range commentAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Comment) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range commentAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Comment) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range commentAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Comment) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range commentAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCommentHook registers your hook function for all future operations.
func AddCommentHook(hookPoint boil.HookPoint, commentHook CommentHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		commentBeforeInsertHooks = append(commentBeforeInsertHooks, commentHook)
	case boil.BeforeUpdateHook:
		commentBeforeUpdateHooks = append(commentBeforeUpdateHooks, commentHook)
	case boil.BeforeDeleteHook:
		commentBeforeDeleteHooks = append(commentBeforeDeleteHooks, commentHook)
	case boil.BeforeUpsertHook:
		commentBeforeUpsertHooks = append(commentBeforeUpsertHooks, commentHook)
	case boil.AfterInsertHook:
		commentAfterInsertHooks = append(commentAfterInsertHooks, commentHook)
	case boil.AfterSelectHook:
		commentAfterSelectHooks = append(commentAfterSelectHooks, commentHook)
	case boil.AfterUpdateHook:
		commentAfterUpdateHooks = append(commentAfterUpdateHooks, commentHook)
	case boil.AfterDeleteHook:
		commentAfterDeleteHooks = append(commentAfterDeleteHooks, commentHook)
	case boil.AfterUpsertHook:
		commentAfterUpsertHooks = append(commentAfterUpsertHooks, commentHook)
	}
}

// OneP returns a single comment record from the query, and panics on error.
func (q commentQuery) OneP() *Comment {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single comment record from the query.
func (q commentQuery) One() (*Comment, error) {
	o := &Comment{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for comment")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Comment records from the query, and panics on error.
func (q commentQuery) AllP() CommentSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Comment records from the query.
func (q commentQuery) All() (CommentSlice, error) {
	var o CommentSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to Comment slice")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Comment records in the query, and panics on error.
func (q commentQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Comment records in the query.
func (q commentQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count comment rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q commentQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q commentQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if comment exists")
	}

	return count > 0, nil
}

// ContainerG pointed to by the foreign key.
func (o *Comment) ContainerG(mods ...qm.QueryMod) containerQuery {
	return o.ContainerByFk(boil.GetDB(), mods...)
}

// Container pointed to by the foreign key.
func (o *Comment) ContainerByFk(exec boil.Executor, mods ...qm.QueryMod) containerQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Container),
	}

	queryMods = append(queryMods, mods...)

	query := Containers(exec, queryMods...)
	queries.SetFrom(query.Query, "\"container\"")

	return query
}

// ParentG pointed to by the foreign key.
func (o *Comment) ParentG(mods ...qm.QueryMod) commentQuery {
	return o.ParentByFk(boil.GetDB(), mods...)
}

// Parent pointed to by the foreign key.
func (o *Comment) ParentByFk(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Parent),
	}

	queryMods = append(queryMods, mods...)

	query := Comments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"comment\"")

	return query
}

// WhoG pointed to by the foreign key.
func (o *Comment) WhoG(mods ...qm.QueryMod) accountQuery {
	return o.WhoByFk(boil.GetDB(), mods...)
}

// Who pointed to by the foreign key.
func (o *Comment) WhoByFk(exec boil.Executor, mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.Who),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(exec, queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// ParentCommentsG retrieves all the comment's comment via parent column.
func (o *Comment) ParentCommentsG(mods ...qm.QueryMod) commentQuery {
	return o.ParentCommentsByFk(boil.GetDB(), mods...)
}

// ParentComments retrieves all the comment's comment with an executor via parent column.
func (o *Comment) ParentCommentsByFk(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"parent\"=?", o.ID),
	)

	query := Comments(exec, queryMods...)
	queries.SetFrom(query.Query, "\"comment\" as \"a\"")
	return query
}

// NotificationsG retrieves all the notification's notification.
func (o *Comment) NotificationsG(mods ...qm.QueryMod) notificationQuery {
	return o.NotificationsByFk(boil.GetDB(), mods...)
}

// Notifications retrieves all the notification's notification with an executor.
func (o *Comment) NotificationsByFk(exec boil.Executor, mods ...qm.QueryMod) notificationQuery {
	queryMods := []qm.QueryMod{
		qm.Select("\"a\".*"),
	}

	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"a\".\"comment\"=?", o.ID),
	)

	query := Notifications(exec, queryMods...)
	queries.SetFrom(query.Query, "\"notification\" as \"a\"")
	return query
}

// LoadContainer allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commentL) LoadContainer(e boil.Executor, singular bool, maybeComment interface{}) error {
	var slice []*Comment
	var object *Comment

	count := 1
	if singular {
		object = maybeComment.(*Comment)
	} else {
		slice = *maybeComment.(*CommentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commentR{}
		}
		args[0] = object.Container
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commentR{}
			}
			args[i] = obj.Container
		}
	}

	query := fmt.Sprintf(
		"select * from \"container\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Container")
	}
	defer results.Close()

	var resultSlice []*Container
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Container")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Container = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Container == foreign.ID {
				local.R.Container = foreign
				break
			}
		}
	}

	return nil
}

// LoadParent allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commentL) LoadParent(e boil.Executor, singular bool, maybeComment interface{}) error {
	var slice []*Comment
	var object *Comment

	count := 1
	if singular {
		object = maybeComment.(*Comment)
	} else {
		slice = *maybeComment.(*CommentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commentR{}
		}
		args[0] = object.Parent
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commentR{}
			}
			args[i] = obj.Parent
		}
	}

	query := fmt.Sprintf(
		"select * from \"comment\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}
	defer results.Close()

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Parent = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Parent.Int == foreign.ID {
				local.R.Parent = foreign
				break
			}
		}
	}

	return nil
}

// LoadWho allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commentL) LoadWho(e boil.Executor, singular bool, maybeComment interface{}) error {
	var slice []*Comment
	var object *Comment

	count := 1
	if singular {
		object = maybeComment.(*Comment)
	} else {
		slice = *maybeComment.(*CommentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commentR{}
		}
		args[0] = object.Who
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commentR{}
			}
			args[i] = obj.Who
		}
	}

	query := fmt.Sprintf(
		"select * from \"account\" where \"id\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)

	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}
	defer results.Close()

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		object.R.Who = resultSlice[0]
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Who == foreign.ID {
				local.R.Who = foreign
				break
			}
		}
	}

	return nil
}

// LoadParentComments allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commentL) LoadParentComments(e boil.Executor, singular bool, maybeComment interface{}) error {
	var slice []*Comment
	var object *Comment

	count := 1
	if singular {
		object = maybeComment.(*Comment)
	} else {
		slice = *maybeComment.(*CommentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"comment\" where \"parent\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load comment")
	}
	defer results.Close()

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ParentComments = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Parent.Int {
				local.R.ParentComments = append(local.R.ParentComments, foreign)
				break
			}
		}
	}

	return nil
}

// LoadNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects.
func (commentL) LoadNotifications(e boil.Executor, singular bool, maybeComment interface{}) error {
	var slice []*Comment
	var object *Comment

	count := 1
	if singular {
		object = maybeComment.(*Comment)
	} else {
		slice = *maybeComment.(*CommentSlice)
		count = len(slice)
	}

	args := make([]interface{}, count)
	if singular {
		if object.R == nil {
			object.R = &commentR{}
		}
		args[0] = object.ID
	} else {
		for i, obj := range slice {
			if obj.R == nil {
				obj.R = &commentR{}
			}
			args[i] = obj.ID
		}
	}

	query := fmt.Sprintf(
		"select * from \"notification\" where \"comment\" in (%s)",
		strmangle.Placeholders(dialect.IndexPlaceholders, count, 1, 1),
	)
	if boil.DebugMode {
		fmt.Fprintf(boil.DebugWriter, "%s\n%v\n", query, args)
	}

	results, err := e.Query(query, args...)
	if err != nil {
		return errors.Wrap(err, "failed to eager load notification")
	}
	defer results.Close()

	var resultSlice []*Notification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice notification")
	}

	if len(notificationAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Notifications = resultSlice
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.Comment.Int {
				local.R.Notifications = append(local.R.Notifications, foreign)
				break
			}
		}
	}

	return nil
}

// SetContainerG of the comment to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Comments.
// Uses the global database handle.
func (o *Comment) SetContainerG(insert bool, related *Container) error {
	return o.SetContainer(boil.GetDB(), insert, related)
}

// SetContainerP of the comment to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Comments.
// Panics on error.
func (o *Comment) SetContainerP(exec boil.Executor, insert bool, related *Container) {
	if err := o.SetContainer(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainerGP of the comment to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Comments.
// Uses the global database handle and panics on error.
func (o *Comment) SetContainerGP(insert bool, related *Container) {
	if err := o.SetContainer(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetContainer of the comment to the related item.
// Sets o.R.Container to related.
// Adds o to related.R.Comments.
func (o *Comment) SetContainer(exec boil.Executor, insert bool, related *Container) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"container"}),
		strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Container = related.ID

	if o.R == nil {
		o.R = &commentR{
			Container: related,
		}
	} else {
		o.R.Container = related
	}

	if related.R == nil {
		related.R = &containerR{
			Comments: CommentSlice{o},
		}
	} else {
		related.R.Comments = append(related.R.Comments, o)
	}

	return nil
}

// SetParentG of the comment to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentComments.
// Uses the global database handle.
func (o *Comment) SetParentG(insert bool, related *Comment) error {
	return o.SetParent(boil.GetDB(), insert, related)
}

// SetParentP of the comment to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentComments.
// Panics on error.
func (o *Comment) SetParentP(exec boil.Executor, insert bool, related *Comment) {
	if err := o.SetParent(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentGP of the comment to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentComments.
// Uses the global database handle and panics on error.
func (o *Comment) SetParentGP(insert bool, related *Comment) {
	if err := o.SetParent(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParent of the comment to the related item.
// Sets o.R.Parent to related.
// Adds o to related.R.ParentComments.
func (o *Comment) SetParent(exec boil.Executor, insert bool, related *Comment) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"parent"}),
		strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Parent.Int = related.ID
	o.Parent.Valid = true

	if o.R == nil {
		o.R = &commentR{
			Parent: related,
		}
	} else {
		o.R.Parent = related
	}

	if related.R == nil {
		related.R = &commentR{
			ParentComments: CommentSlice{o},
		}
	} else {
		related.R.ParentComments = append(related.R.ParentComments, o)
	}

	return nil
}

// RemoveParentG relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Comment) RemoveParentG(related *Comment) error {
	return o.RemoveParent(boil.GetDB(), related)
}

// RemoveParentP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Panics on error.
func (o *Comment) RemoveParentP(exec boil.Executor, related *Comment) {
	if err := o.RemoveParent(exec, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentGP relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle and panics on error.
func (o *Comment) RemoveParentGP(related *Comment) {
	if err := o.RemoveParent(boil.GetDB(), related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParent relationship.
// Sets o.R.Parent to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Comment) RemoveParent(exec boil.Executor, related *Comment) error {
	var err error

	o.Parent.Valid = false
	if err = o.Update(exec, "parent"); err != nil {
		o.Parent.Valid = true
		return errors.Wrap(err, "failed to update local table")
	}

	o.R.Parent = nil
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ParentComments {
		if o.Parent.Int != ri.Parent.Int {
			continue
		}

		ln := len(related.R.ParentComments)
		if ln > 1 && i < ln-1 {
			related.R.ParentComments[i] = related.R.ParentComments[ln-1]
		}
		related.R.ParentComments = related.R.ParentComments[:ln-1]
		break
	}
	return nil
}

// SetWhoG of the comment to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoComments.
// Uses the global database handle.
func (o *Comment) SetWhoG(insert bool, related *Account) error {
	return o.SetWho(boil.GetDB(), insert, related)
}

// SetWhoP of the comment to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoComments.
// Panics on error.
func (o *Comment) SetWhoP(exec boil.Executor, insert bool, related *Account) {
	if err := o.SetWho(exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetWhoGP of the comment to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoComments.
// Uses the global database handle and panics on error.
func (o *Comment) SetWhoGP(insert bool, related *Account) {
	if err := o.SetWho(boil.GetDB(), insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetWho of the comment to the related item.
// Sets o.R.Who to related.
// Adds o to related.R.WhoComments.
func (o *Comment) SetWho(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"comment\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"who"}),
		strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Who = related.ID

	if o.R == nil {
		o.R = &commentR{
			Who: related,
		}
	} else {
		o.R.Who = related
	}

	if related.R == nil {
		related.R = &accountR{
			WhoComments: CommentSlice{o},
		}
	} else {
		related.R.WhoComments = append(related.R.WhoComments, o)
	}

	return nil
}

// AddParentCommentsG adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.ParentComments.
// Sets related.R.Parent appropriately.
// Uses the global database handle.
func (o *Comment) AddParentCommentsG(insert bool, related ...*Comment) error {
	return o.AddParentComments(boil.GetDB(), insert, related...)
}

// AddParentCommentsP adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.ParentComments.
// Sets related.R.Parent appropriately.
// Panics on error.
func (o *Comment) AddParentCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.AddParentComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentCommentsGP adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.ParentComments.
// Sets related.R.Parent appropriately.
// Uses the global database handle and panics on error.
func (o *Comment) AddParentCommentsGP(insert bool, related ...*Comment) {
	if err := o.AddParentComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddParentComments adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.ParentComments.
// Sets related.R.Parent appropriately.
func (o *Comment) AddParentComments(exec boil.Executor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Parent.Int = o.ID
			rel.Parent.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"comment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"parent"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Parent.Int = o.ID
			rel.Parent.Valid = true
		}
	}

	if o.R == nil {
		o.R = &commentR{
			ParentComments: related,
		}
	} else {
		o.R.ParentComments = append(o.R.ParentComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Parent: o,
			}
		} else {
			rel.R.Parent = o
		}
	}
	return nil
}

// SetParentCommentsG removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentComments accordingly.
// Replaces o.R.ParentComments with related.
// Sets related.R.Parent's ParentComments accordingly.
// Uses the global database handle.
func (o *Comment) SetParentCommentsG(insert bool, related ...*Comment) error {
	return o.SetParentComments(boil.GetDB(), insert, related...)
}

// SetParentCommentsP removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentComments accordingly.
// Replaces o.R.ParentComments with related.
// Sets related.R.Parent's ParentComments accordingly.
// Panics on error.
func (o *Comment) SetParentCommentsP(exec boil.Executor, insert bool, related ...*Comment) {
	if err := o.SetParentComments(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentCommentsGP removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentComments accordingly.
// Replaces o.R.ParentComments with related.
// Sets related.R.Parent's ParentComments accordingly.
// Uses the global database handle and panics on error.
func (o *Comment) SetParentCommentsGP(insert bool, related ...*Comment) {
	if err := o.SetParentComments(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetParentComments removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Parent's ParentComments accordingly.
// Replaces o.R.ParentComments with related.
// Sets related.R.Parent's ParentComments accordingly.
func (o *Comment) SetParentComments(exec boil.Executor, insert bool, related ...*Comment) error {
	query := "update \"comment\" set \"parent\" = null where \"parent\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ParentComments {
			rel.Parent.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Parent = nil
		}

		o.R.ParentComments = nil
	}
	return o.AddParentComments(exec, insert, related...)
}

// RemoveParentCommentsG relationships from objects passed in.
// Removes related items from R.ParentComments (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle.
func (o *Comment) RemoveParentCommentsG(related ...*Comment) error {
	return o.RemoveParentComments(boil.GetDB(), related...)
}

// RemoveParentCommentsP relationships from objects passed in.
// Removes related items from R.ParentComments (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Panics on error.
func (o *Comment) RemoveParentCommentsP(exec boil.Executor, related ...*Comment) {
	if err := o.RemoveParentComments(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentCommentsGP relationships from objects passed in.
// Removes related items from R.ParentComments (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
// Uses the global database handle and panics on error.
func (o *Comment) RemoveParentCommentsGP(related ...*Comment) {
	if err := o.RemoveParentComments(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveParentComments relationships from objects passed in.
// Removes related items from R.ParentComments (uses pointer comparison, removal does not keep order)
// Sets related.R.Parent.
func (o *Comment) RemoveParentComments(exec boil.Executor, related ...*Comment) error {
	var err error
	for _, rel := range related {
		rel.Parent.Valid = false
		if rel.R != nil {
			rel.R.Parent = nil
		}
		if err = rel.Update(exec, "parent"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ParentComments {
			if rel != ri {
				continue
			}

			ln := len(o.R.ParentComments)
			if ln > 1 && i < ln-1 {
				o.R.ParentComments[i] = o.R.ParentComments[ln-1]
			}
			o.R.ParentComments = o.R.ParentComments[:ln-1]
			break
		}
	}

	return nil
}

// AddNotificationsG adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Comment appropriately.
// Uses the global database handle.
func (o *Comment) AddNotificationsG(insert bool, related ...*Notification) error {
	return o.AddNotifications(boil.GetDB(), insert, related...)
}

// AddNotificationsP adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Comment appropriately.
// Panics on error.
func (o *Comment) AddNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.AddNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotificationsGP adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Comment appropriately.
// Uses the global database handle and panics on error.
func (o *Comment) AddNotificationsGP(insert bool, related ...*Notification) {
	if err := o.AddNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddNotifications adds the given related objects to the existing relationships
// of the comment, optionally inserting them as new records.
// Appends related to o.R.Notifications.
// Sets related.R.Comment appropriately.
func (o *Comment) AddNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.Comment.Int = o.ID
			rel.Comment.Valid = true
			if err = rel.Insert(exec); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"comment"}),
				strmangle.WhereClause("\"", "\"", 2, notificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.Comment.Int = o.ID
			rel.Comment.Valid = true
		}
	}

	if o.R == nil {
		o.R = &commentR{
			Notifications: related,
		}
	} else {
		o.R.Notifications = append(o.R.Notifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &notificationR{
				Comment: o,
			}
		} else {
			rel.R.Comment = o
		}
	}
	return nil
}

// SetNotificationsG removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Comment's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Comment's Notifications accordingly.
// Uses the global database handle.
func (o *Comment) SetNotificationsG(insert bool, related ...*Notification) error {
	return o.SetNotifications(boil.GetDB(), insert, related...)
}

// SetNotificationsP removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Comment's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Comment's Notifications accordingly.
// Panics on error.
func (o *Comment) SetNotificationsP(exec boil.Executor, insert bool, related ...*Notification) {
	if err := o.SetNotifications(exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotificationsGP removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Comment's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Comment's Notifications accordingly.
// Uses the global database handle and panics on error.
func (o *Comment) SetNotificationsGP(insert bool, related ...*Notification) {
	if err := o.SetNotifications(boil.GetDB(), insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetNotifications removes all previously related items of the
// comment replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Comment's Notifications accordingly.
// Replaces o.R.Notifications with related.
// Sets related.R.Comment's Notifications accordingly.
func (o *Comment) SetNotifications(exec boil.Executor, insert bool, related ...*Notification) error {
	query := "update \"notification\" set \"comment\" = null where \"comment\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.Notifications {
			rel.Comment.Valid = false
			if rel.R == nil {
				continue
			}

			rel.R.Comment = nil
		}

		o.R.Notifications = nil
	}
	return o.AddNotifications(exec, insert, related...)
}

// RemoveNotificationsG relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Comment.
// Uses the global database handle.
func (o *Comment) RemoveNotificationsG(related ...*Notification) error {
	return o.RemoveNotifications(boil.GetDB(), related...)
}

// RemoveNotificationsP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Comment.
// Panics on error.
func (o *Comment) RemoveNotificationsP(exec boil.Executor, related ...*Notification) {
	if err := o.RemoveNotifications(exec, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotificationsGP relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Comment.
// Uses the global database handle and panics on error.
func (o *Comment) RemoveNotificationsGP(related ...*Notification) {
	if err := o.RemoveNotifications(boil.GetDB(), related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// RemoveNotifications relationships from objects passed in.
// Removes related items from R.Notifications (uses pointer comparison, removal does not keep order)
// Sets related.R.Comment.
func (o *Comment) RemoveNotifications(exec boil.Executor, related ...*Notification) error {
	var err error
	for _, rel := range related {
		rel.Comment.Valid = false
		if rel.R != nil {
			rel.R.Comment = nil
		}
		if err = rel.Update(exec, "comment"); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Notifications {
			if rel != ri {
				continue
			}

			ln := len(o.R.Notifications)
			if ln > 1 && i < ln-1 {
				o.R.Notifications[i] = o.R.Notifications[ln-1]
			}
			o.R.Notifications = o.R.Notifications[:ln-1]
			break
		}
	}

	return nil
}

// CommentsG retrieves all records.
func CommentsG(mods ...qm.QueryMod) commentQuery {
	return Comments(boil.GetDB(), mods...)
}

// Comments retrieves all the records using an executor.
func Comments(exec boil.Executor, mods ...qm.QueryMod) commentQuery {
	mods = append(mods, qm.From("\"comment\""))
	return commentQuery{NewQuery(exec, mods...)}
}

// FindCommentG retrieves a single record by ID.
func FindCommentG(id int, selectCols ...string) (*Comment, error) {
	return FindComment(boil.GetDB(), id, selectCols...)
}

// FindCommentGP retrieves a single record by ID, and panics on error.
func FindCommentGP(id int, selectCols ...string) *Comment {
	retobj, err := FindComment(boil.GetDB(), id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindComment retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindComment(exec boil.Executor, id int, selectCols ...string) (*Comment, error) {
	commentObj := &Comment{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"comment\" where \"id\"=$1", sel,
	)

	q := queries.Raw(exec, query, id)

	err := q.Bind(commentObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: unable to select from comment")
	}

	return commentObj, nil
}

// FindCommentP retrieves a single record by ID with an executor, and panics on error.
func FindCommentP(exec boil.Executor, id int, selectCols ...string) *Comment {
	retobj, err := FindComment(exec, id, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Comment) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Comment) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Comment) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Comment) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no comment provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	commentInsertCacheMut.RLock()
	cache, cached := commentInsertCache[key]
	commentInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			commentColumns,
			commentColumnsWithDefault,
			commentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(commentType, commentMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(commentType, commentMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"comment\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"comment\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into comment")
	}

	if !cached {
		commentInsertCacheMut.Lock()
		commentInsertCache[key] = cache
		commentInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Comment record. See Update for
// whitelist behavior description.
func (o *Comment) UpdateG(whitelist ...string) error {
	return o.Update(boil.GetDB(), whitelist...)
}

// UpdateGP a single Comment record.
// UpdateGP takes a whitelist of column names that should be updated.
// Panics on error. See Update for whitelist behavior description.
func (o *Comment) UpdateGP(whitelist ...string) {
	if err := o.Update(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateP uses an executor to update the Comment, and panics on error.
// See Update for whitelist behavior description.
func (o *Comment) UpdateP(exec boil.Executor, whitelist ...string) {
	err := o.Update(exec, whitelist...)
	if err != nil {
		panic(boil.WrapErr(err))
	}
}

// Update uses an executor to update the Comment.
// Whitelist behavior: If a whitelist is provided, only the columns given are updated.
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns are inferred to start with
// - All primary keys are subtracted from this set
// Update does not automatically update the record in case of default values. Use .Reload()
// to refresh the records.
func (o *Comment) Update(exec boil.Executor, whitelist ...string) error {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return err
	}
	key := makeCacheKey(whitelist, nil)
	commentUpdateCacheMut.RLock()
	cache, cached := commentUpdateCache[key]
	commentUpdateCacheMut.RUnlock()

	if !cached {
		wl := strmangle.UpdateColumnSet(commentColumns, commentPrimaryKeyColumns, whitelist)

		if len(whitelist) == 0 {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("public: unable to update comment, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"comment\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, commentPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(commentType, commentMapping, append(wl, commentPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update comment row")
	}

	if !cached {
		commentUpdateCacheMut.Lock()
		commentUpdateCache[key] = cache
		commentUpdateCacheMut.Unlock()
	}

	return o.doAfterUpdateHooks(exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q commentQuery) UpdateAllP(cols M) {
	if err := q.UpdateAll(cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values.
func (q commentQuery) UpdateAll(cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to update all for comment")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CommentSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAllGP updates all rows with the specified column values, and panics on error.
func (o CommentSlice) UpdateAllGP(cols M) {
	if err := o.UpdateAll(boil.GetDB(), cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o CommentSlice) UpdateAllP(exec boil.Executor, cols M) {
	if err := o.UpdateAll(exec, cols); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CommentSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("public: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"UPDATE \"comment\" SET %s WHERE (\"id\") IN (%s)",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(commentPrimaryKeyColumns), len(colNames)+1, len(commentPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to update all in comment slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Comment) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...)
}

// UpsertGP attempts an insert, and does an update or ignore on conflict. Panics on error.
func (o *Comment) UpsertGP(updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *Comment) UpsertP(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) {
	if err := o.Upsert(exec, updateOnConflict, conflictColumns, updateColumns, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
func (o *Comment) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns []string, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no comment provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(commentColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs postgres problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range updateColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range whitelist {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	commentUpsertCacheMut.RLock()
	cache, cached := commentUpsertCache[key]
	commentUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		var ret []string
		whitelist, ret = strmangle.InsertColumnSet(
			commentColumns,
			commentColumnsWithDefault,
			commentColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)
		update := strmangle.UpdateColumnSet(
			commentColumns,
			commentPrimaryKeyColumns,
			updateColumns,
		)
		if len(update) == 0 {
			return errors.New("public: unable to upsert comment, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(commentPrimaryKeyColumns))
			copy(conflict, commentPrimaryKeyColumns)
		}
		cache.query = queries.BuildUpsertQueryPostgres(dialect, "\"comment\"", updateOnConflict, ret, update, conflict, whitelist)

		cache.valueMapping, err = queries.BindMapping(commentType, commentMapping, whitelist)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(commentType, commentMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "public: unable to upsert comment")
	}

	if !cached {
		commentUpsertCacheMut.Lock()
		commentUpsertCache[key] = cache
		commentUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteP deletes a single Comment record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Comment) DeleteP(exec boil.Executor) {
	if err := o.Delete(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteG deletes a single Comment record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Comment) DeleteG() error {
	if o == nil {
		return errors.New("public: no Comment provided for deletion")
	}

	return o.Delete(boil.GetDB())
}

// DeleteGP deletes a single Comment record.
// DeleteGP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *Comment) DeleteGP() {
	if err := o.DeleteG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Delete deletes a single Comment record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Comment) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Comment provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), commentPrimaryKeyMapping)
	query := "DELETE FROM \"comment\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete from comment")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return err
	}

	return nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q commentQuery) DeleteAllP() {
	if err := q.DeleteAll(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all matching rows.
func (q commentQuery) DeleteAll() error {
	if q.Query == nil {
		return errors.New("public: no commentQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec()
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from comment")
	}

	return nil
}

// DeleteAllGP deletes all rows in the slice, and panics on error.
func (o CommentSlice) DeleteAllGP() {
	if err := o.DeleteAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAllG deletes all rows in the slice.
func (o CommentSlice) DeleteAllG() error {
	if o == nil {
		return errors.New("public: no Comment slice provided for delete all")
	}
	return o.DeleteAll(boil.GetDB())
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o CommentSlice) DeleteAllP(exec boil.Executor) {
	if err := o.DeleteAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CommentSlice) DeleteAll(exec boil.Executor) error {
	if o == nil {
		return errors.New("public: no Comment slice provided for delete all")
	}

	if len(o) == 0 {
		return nil
	}

	if len(commentBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"DELETE FROM \"comment\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, commentPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(o)*len(commentPrimaryKeyColumns), 1, len(commentPrimaryKeyColumns)),
	)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	_, err := exec.Exec(query, args...)
	if err != nil {
		return errors.Wrap(err, "public: unable to delete all from comment slice")
	}

	if len(commentAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return err
			}
		}
	}

	return nil
}

// ReloadGP refetches the object from the database and panics on error.
func (o *Comment) ReloadGP() {
	if err := o.ReloadG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *Comment) ReloadP(exec boil.Executor) {
	if err := o.Reload(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Comment) ReloadG() error {
	if o == nil {
		return errors.New("public: no Comment provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Comment) Reload(exec boil.Executor) error {
	ret, err := FindComment(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllGP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommentSlice) ReloadAllGP() {
	if err := o.ReloadAllG(); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *CommentSlice) ReloadAllP(exec boil.Executor) {
	if err := o.ReloadAll(exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("public: empty CommentSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CommentSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	comments := CommentSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), commentPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	query := fmt.Sprintf(
		"SELECT \"comment\".* FROM \"comment\" WHERE (%s) IN (%s)",
		strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, commentPrimaryKeyColumns), ","),
		strmangle.Placeholders(dialect.IndexPlaceholders, len(*o)*len(commentPrimaryKeyColumns), 1, len(commentPrimaryKeyColumns)),
	)

	q := queries.Raw(exec, query, args...)

	err := q.Bind(&comments)
	if err != nil {
		return errors.Wrap(err, "public: unable to reload all in CommentSlice")
	}

	*o = comments

	return nil
}

// CommentExists checks if the Comment row exists.
func CommentExists(exec boil.Executor, id int) (bool, error) {
	var exists bool

	query := "select exists(select 1 from \"comment\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, id)
	}

	row := exec.QueryRow(query, id)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "public: unable to check if comment exists")
	}

	return exists, nil
}

// CommentExistsG checks if the Comment row exists.
func CommentExistsG(id int) (bool, error) {
	return CommentExists(boil.GetDB(), id)
}

// CommentExistsGP checks if the Comment row exists. Panics on error.
func CommentExistsGP(id int) bool {
	e, err := CommentExists(boil.GetDB(), id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// CommentExistsP checks if the Comment row exists. Panics on error.
func CommentExistsP(exec boil.Executor, id int) bool {
	e, err := CommentExists(exec, id)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}
