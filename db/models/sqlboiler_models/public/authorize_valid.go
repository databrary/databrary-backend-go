// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// AuthorizeValid is an object representing the database view.
type AuthorizeValid struct {
	Child   null.Int                    `db:"child" json:"authorizeValid_child,omitempty"`
	Parent  null.Int                    `db:"parent" json:"authorizeValid_parent,omitempty"`
	Site    custom_types.NullPermission `db:"site" json:"authorizeValid_site,omitempty"`
	Member  custom_types.NullPermission `db:"member" json:"authorizeValid_member,omitempty"`
	Expires null.Time                   `db:"expires" json:"authorizeValid_expires,omitempty"`

	R *authorizeValidR `db:"-" json:"-"`
	L authorizeValidL  `db:"-" json:"-"`
}

// authorizeValidR is where relationships are stored.
type authorizeValidR struct {
}

// authorizeValidL is where Load methods for each relationship are stored.
type authorizeValidL struct{}

var (
	authorizeValidColumns               = []string{"child", "parent", "site", "member", "expires"}
	authorizeValidColumnsWithoutDefault = []string{"child", "parent", "site", "member", "expires"}
	authorizeValidColumnsWithDefault    = []string{}
	authorizeValidColumnsWithCustom     = []string{"site", "member"}
)

type (
	// AuthorizeValidSlice is an alias for a slice of pointers to AuthorizeValid.
	// This should generally be used opposed to []AuthorizeValid.
	AuthorizeValidSlice []*AuthorizeValid
	// AuthorizeValidHook is the signature for custom AuthorizeValid hook methods
	AuthorizeValidHook func(boil.Executor, *AuthorizeValid) error

	authorizeValidQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizeValidType    = reflect.TypeOf(&AuthorizeValid{})
	authorizeValidMapping = queries.MakeStructMapping(authorizeValidType)

	authorizeValidInsertCacheMut sync.RWMutex
	authorizeValidInsertCache    = make(map[string]insertCache)
	authorizeValidUpdateCacheMut sync.RWMutex
	authorizeValidUpdateCache    = make(map[string]updateCache)
	authorizeValidUpsertCacheMut sync.RWMutex
	authorizeValidUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var authorizeValidBeforeInsertHooks []AuthorizeValidHook
var authorizeValidBeforeUpdateHooks []AuthorizeValidHook
var authorizeValidBeforeDeleteHooks []AuthorizeValidHook
var authorizeValidBeforeUpsertHooks []AuthorizeValidHook

var authorizeValidAfterInsertHooks []AuthorizeValidHook
var authorizeValidAfterSelectHooks []AuthorizeValidHook
var authorizeValidAfterUpdateHooks []AuthorizeValidHook
var authorizeValidAfterDeleteHooks []AuthorizeValidHook
var authorizeValidAfterUpsertHooks []AuthorizeValidHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizeValid) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizeValid) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizeValid) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizeValid) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizeValid) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizeValid) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizeValid) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizeValid) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizeValid) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeValidAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizeValidHook registers your hook function for all future operations.
func AddAuthorizeValidHook(hookPoint boil.HookPoint, authorizeValidHook AuthorizeValidHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authorizeValidBeforeInsertHooks = append(authorizeValidBeforeInsertHooks, authorizeValidHook)
	case boil.BeforeUpdateHook:
		authorizeValidBeforeUpdateHooks = append(authorizeValidBeforeUpdateHooks, authorizeValidHook)
	case boil.BeforeDeleteHook:
		authorizeValidBeforeDeleteHooks = append(authorizeValidBeforeDeleteHooks, authorizeValidHook)
	case boil.BeforeUpsertHook:
		authorizeValidBeforeUpsertHooks = append(authorizeValidBeforeUpsertHooks, authorizeValidHook)
	case boil.AfterInsertHook:
		authorizeValidAfterInsertHooks = append(authorizeValidAfterInsertHooks, authorizeValidHook)
	case boil.AfterSelectHook:
		authorizeValidAfterSelectHooks = append(authorizeValidAfterSelectHooks, authorizeValidHook)
	case boil.AfterUpdateHook:
		authorizeValidAfterUpdateHooks = append(authorizeValidAfterUpdateHooks, authorizeValidHook)
	case boil.AfterDeleteHook:
		authorizeValidAfterDeleteHooks = append(authorizeValidAfterDeleteHooks, authorizeValidHook)
	case boil.AfterUpsertHook:
		authorizeValidAfterUpsertHooks = append(authorizeValidAfterUpsertHooks, authorizeValidHook)
	}
}

// OneP returns a single authorizeValid record from the query, and panics on error.
func (q authorizeValidQuery) OneP() *AuthorizeValid {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authorizeValid record from the query.
func (q authorizeValidQuery) One() (*AuthorizeValid, error) {
	o := &AuthorizeValid{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for authorize_valid")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all AuthorizeValid records from the query, and panics on error.
func (q authorizeValidQuery) AllP() AuthorizeValidSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthorizeValid records from the query.
func (q authorizeValidQuery) All() (AuthorizeValidSlice, error) {
	var o AuthorizeValidSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to AuthorizeValid slice")
	}

	if len(authorizeValidAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all AuthorizeValid records in the query, and panics on error.
func (q authorizeValidQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthorizeValid records in the query.
func (q authorizeValidQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count authorize_valid rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authorizeValidQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authorizeValidQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if authorize_valid exists")
	}

	return count > 0, nil
}

// AuthorizeValidsG retrieves all records.
func AuthorizeValidsG(mods ...qm.QueryMod) authorizeValidQuery {
	return AuthorizeValids(boil.GetDB(), mods...)
}

// AuthorizeValids retrieves all the records using an executor.
func AuthorizeValids(exec boil.Executor, mods ...qm.QueryMod) authorizeValidQuery {
	mods = append(mods, qm.From("\"authorize_valid\""))
	return authorizeValidQuery{NewQuery(exec, mods...)}
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizeValid) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthorizeValid) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthorizeValid) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthorizeValid) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no authorize_valid provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizeValidColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authorizeValidInsertCacheMut.RLock()
	cache, cached := authorizeValidInsertCache[key]
	authorizeValidInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authorizeValidColumns,
			authorizeValidColumnsWithDefault,
			authorizeValidColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authorizeValidType, authorizeValidMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizeValidType, authorizeValidMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorize_valid\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorize_valid\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into authorize_valid")
	}

	if !cached {
		authorizeValidInsertCacheMut.Lock()
		authorizeValidInsertCache[key] = cache
		authorizeValidInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}
