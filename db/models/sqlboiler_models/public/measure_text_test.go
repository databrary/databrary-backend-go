// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testMeasureTexts(t *testing.T) {
	t.Parallel()

	query := MeasureTexts(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testMeasureTextsLive(t *testing.T) {
	all, err := MeasureTexts(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all MeasureTexts err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM measure_text) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM measure_text) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("MeasureTextsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testMeasureTextsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = measureText.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMeasureTextsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MeasureTexts(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMeasureTextsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MeasureTextSlice{measureText}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testMeasureTextsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := MeasureTextExists(tx, measureText.Record, measureText.Metric)
	if err != nil {
		t.Errorf("Unable to check if MeasureText exists: %s", err)
	}
	if !e {
		t.Errorf("Expected MeasureTextExistsG to return true, but got false.")
	}
}

func testMeasureTextsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	measureTextFound, err := FindMeasureText(tx, measureText.Record, measureText.Metric)
	if err != nil {
		t.Error(err)
	}

	if measureTextFound == nil {
		t.Error("want a record, got nil")
	}
}

func testMeasureTextsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = MeasureTexts(tx).Bind(measureText); err != nil {
		t.Error(err)
	}
}

func testMeasureTextsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := MeasureTexts(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testMeasureTextsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureTextOne := &MeasureText{}
	measureTextTwo := &MeasureText{}
	if err = randomize.Struct(seed, measureTextOne, measureTextDBTypes, false, measureTextColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}
	if err = randomize.Struct(seed, measureTextTwo, measureTextDBTypes, false, measureTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureTextOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = measureTextTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MeasureTexts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testMeasureTextsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureTextOne := &MeasureText{}
	measureTextTwo := &MeasureText{}
	if err = randomize.Struct(seed, measureTextOne, measureTextDBTypes, false, measureTextColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}
	if err = randomize.Struct(seed, measureTextTwo, measureTextDBTypes, false, measureTextColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureTextOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = measureTextTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func measureTextBeforeInsertHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextAfterInsertHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextAfterSelectHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextBeforeUpdateHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextAfterUpdateHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextBeforeDeleteHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextAfterDeleteHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextBeforeUpsertHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func measureTextAfterUpsertHook(e boil.Executor, o *MeasureText) error {
	*o = MeasureText{}
	return nil
}

func testMeasureTextsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	empty := &MeasureText{}

	AddMeasureTextHook(boil.BeforeInsertHook, measureTextBeforeInsertHook)
	if err = measureText.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", measureText)
	}
	measureTextBeforeInsertHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.AfterInsertHook, measureTextAfterInsertHook)
	if err = measureText.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", measureText)
	}
	measureTextAfterInsertHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.AfterSelectHook, measureTextAfterSelectHook)
	if err = measureText.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", measureText)
	}
	measureTextAfterSelectHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.BeforeUpdateHook, measureTextBeforeUpdateHook)
	if err = measureText.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", measureText)
	}
	measureTextBeforeUpdateHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.AfterUpdateHook, measureTextAfterUpdateHook)
	if err = measureText.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", measureText)
	}
	measureTextAfterUpdateHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.BeforeDeleteHook, measureTextBeforeDeleteHook)
	if err = measureText.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", measureText)
	}
	measureTextBeforeDeleteHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.AfterDeleteHook, measureTextAfterDeleteHook)
	if err = measureText.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", measureText)
	}
	measureTextAfterDeleteHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.BeforeUpsertHook, measureTextBeforeUpsertHook)
	if err = measureText.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", measureText)
	}
	measureTextBeforeUpsertHooks = []MeasureTextHook{}

	AddMeasureTextHook(boil.AfterUpsertHook, measureTextAfterUpsertHook)
	if err = measureText.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(measureText, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", measureText)
	}
	measureTextAfterUpsertHooks = []MeasureTextHook{}
}
func testMeasureTextsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMeasureTextsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx, measureTextColumns...); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testMeasureTextToOneMetricUsingMetric(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Metric
	var local MeasureText

	foreignBlacklist := metricColumnsWithDefault
	foreignBlacklist = append(foreignBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &foreign, metricDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	foreign.Release = custom_types.NullReleaseRandom()
	foreign.Type = custom_types.DataTypeRandom()

	localBlacklist := measureTextColumnsWithDefault
	if err := randomize.Struct(seed, &local, measureTextDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Metric = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.MetricByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MeasureTextSlice{&local}
	if err = local.L.LoadMetric(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Metric == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Metric = nil
	if err = local.L.LoadMetric(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Metric == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMeasureTextToOneRecordUsingRecord(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Record
	var local MeasureText

	foreignBlacklist := recordColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, recordDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	localBlacklist := measureTextColumnsWithDefault
	if err := randomize.Struct(seed, &local, measureTextDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Record = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.RecordByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := MeasureTextSlice{&local}
	if err = local.L.LoadRecord(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Record == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Record = nil
	if err = local.L.LoadRecord(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Record == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testMeasureTextToOneSetOpMetricUsingMetric(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a MeasureText
	var b, c Metric

	foreignBlacklist := strmangle.SetComplement(metricPrimaryKeyColumns, metricColumnsWithoutDefault)
	foreignBlacklist = append(foreignBlacklist, metricColumnsWithCustom...)

	if err := randomize.Struct(seed, &b, metricDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, metricDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Metric struct: %s", err)
	}
	b.Release = custom_types.NullReleaseRandom()
	c.Release = custom_types.NullReleaseRandom()
	b.Type = custom_types.DataTypeRandom()
	c.Type = custom_types.DataTypeRandom()

	localBlacklist := strmangle.SetComplement(measureTextPrimaryKeyColumns, measureTextColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, measureTextDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Metric{&b, &c} {
		err = a.SetMetric(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Metric != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MeasureTexts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Metric != x.ID {
			t.Error("foreign key was wrong value", a.Metric)
		}

		if exists, err := MeasureTextExists(tx, a.Record, a.Metric); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testMeasureTextToOneSetOpRecordUsingRecord(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a MeasureText
	var b, c Record

	foreignBlacklist := strmangle.SetComplement(recordPrimaryKeyColumns, recordColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, recordDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Record struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(measureTextPrimaryKeyColumns, measureTextColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, measureTextDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Record{&b, &c} {
		err = a.SetRecord(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Record != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.MeasureTexts[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Record != x.ID {
			t.Error("foreign key was wrong value", a.Record)
		}

		if exists, err := MeasureTextExists(tx, a.Record, a.Metric); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testMeasureTextsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = measureText.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testMeasureTextsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := MeasureTextSlice{measureText}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testMeasureTextsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := MeasureTexts(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	measureTextDBTypes = map[string]string{`Datum`: `text`, `Metric`: `integer`, `Record`: `integer`}
	_                  = bytes.MinRead
)

func testMeasureTextsUpdate(t *testing.T) {
	t.Parallel()

	if len(measureTextColumns) == len(measureTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := measureTextColumnsWithDefault

	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err = measureText.Update(tx); err != nil {
		t.Error(err)
	}
}

func testMeasureTextsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(measureTextColumns) == len(measureTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := measureTextPrimaryKeyColumns

	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(measureTextColumns, measureTextPrimaryKeyColumns) {
		fields = measureTextColumns
	} else {
		fields = strmangle.SetComplement(
			measureTextColumns,
			measureTextPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(measureText))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := MeasureTextSlice{measureText}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testMeasureTextsUpsert(t *testing.T) {
	t.Parallel()

	if len(measureTextColumns) == len(measureTextPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	measureText := &MeasureText{}
	if err = randomize.Struct(seed, measureText, measureTextDBTypes, true); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = measureText.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert MeasureText: %s", err)
	}

	count, err := MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := measureTextPrimaryKeyColumns

	if err = randomize.Struct(seed, measureText, measureTextDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize MeasureText struct: %s", err)
	}

	if err = measureText.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert MeasureText: %s", err)
	}

	count, err = MeasureTexts(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
