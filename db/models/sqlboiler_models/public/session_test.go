// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testSessions(t *testing.T) {
	t.Parallel()

	query := Sessions(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSessionsLive(t *testing.T) {
	all, err := Sessions(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Sessions err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM session) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM session) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("SessionsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testSessionsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = session.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sessions(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SessionSlice{session}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSessionsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := SessionExists(tx, session.Token)
	if err != nil {
		t.Errorf("Unable to check if Session exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SessionExistsG to return true, but got false.")
	}
}

func testSessionsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	sessionFound, err := FindSession(tx, session.Token)
	if err != nil {
		t.Error(err)
	}

	if sessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSessionsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Sessions(tx).Bind(session); err != nil {
		t.Error(err)
	}
}

func testSessionsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Sessions(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSessionsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sessionOne := &Session{}
	sessionTwo := &Session{}
	if err = randomize.Struct(seed, sessionOne, sessionDBTypes, false, sessionColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Session struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionTwo, sessionDBTypes, false, sessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sessionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = sessionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sessions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	sessionOne := &Session{}
	sessionTwo := &Session{}
	if err = randomize.Struct(seed, sessionOne, sessionDBTypes, false, sessionColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize Session struct: %s", err)
	}
	if err = randomize.Struct(seed, sessionTwo, sessionDBTypes, false, sessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = sessionOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = sessionTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func sessionBeforeInsertHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionAfterInsertHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionAfterSelectHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionBeforeUpdateHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionAfterUpdateHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionBeforeDeleteHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionAfterDeleteHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionBeforeUpsertHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func sessionAfterUpsertHook(e boil.Executor, o *Session) error {
	*o = Session{}
	return nil
}

func testSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	empty := &Session{}

	AddSessionHook(boil.BeforeInsertHook, sessionBeforeInsertHook)
	if err = session.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", session)
	}
	sessionBeforeInsertHooks = []SessionHook{}

	AddSessionHook(boil.AfterInsertHook, sessionAfterInsertHook)
	if err = session.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", session)
	}
	sessionAfterInsertHooks = []SessionHook{}

	AddSessionHook(boil.AfterSelectHook, sessionAfterSelectHook)
	if err = session.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", session)
	}
	sessionAfterSelectHooks = []SessionHook{}

	AddSessionHook(boil.BeforeUpdateHook, sessionBeforeUpdateHook)
	if err = session.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", session)
	}
	sessionBeforeUpdateHooks = []SessionHook{}

	AddSessionHook(boil.AfterUpdateHook, sessionAfterUpdateHook)
	if err = session.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", session)
	}
	sessionAfterUpdateHooks = []SessionHook{}

	AddSessionHook(boil.BeforeDeleteHook, sessionBeforeDeleteHook)
	if err = session.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", session)
	}
	sessionBeforeDeleteHooks = []SessionHook{}

	AddSessionHook(boil.AfterDeleteHook, sessionAfterDeleteHook)
	if err = session.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", session)
	}
	sessionAfterDeleteHooks = []SessionHook{}

	AddSessionHook(boil.BeforeUpsertHook, sessionBeforeUpsertHook)
	if err = session.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", session)
	}
	sessionBeforeUpsertHooks = []SessionHook{}

	AddSessionHook(boil.AfterUpsertHook, sessionAfterUpsertHook)
	if err = session.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(session, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", session)
	}
	sessionAfterUpsertHooks = []SessionHook{}
}
func testSessionsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx, sessionColumns...); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSessionToOneAccountUsingAccount(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Account
	var local Session

	foreignBlacklist := accountColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, accountDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := sessionColumnsWithDefault
	if err := randomize.Struct(seed, &local, sessionDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Account = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.AccountByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := SessionSlice{&local}
	if err = local.L.LoadAccount(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testSessionToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Session
	var b, c Account

	foreignBlacklist := strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, accountDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(sessionPrimaryKeyColumns, sessionColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, sessionDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Sessions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Account != x.ID {
			t.Error("foreign key was wrong value", a.Account)
		}

		zero := reflect.Zero(reflect.TypeOf(a.Account))
		reflect.Indirect(reflect.ValueOf(&a.Account)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.Account != x.ID {
			t.Error("foreign key was wrong value", a.Account, x.ID)
		}
	}
}

func testSessionsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = session.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testSessionsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := SessionSlice{session}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testSessionsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Sessions(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	sessionDBTypes = map[string]string{`Account`: `integer`, `Expires`: `timestamp with time zone`, `Superuser`: `boolean`, `Token`: `character varying`, `Verf`: `character varying`}
	_              = bytes.MinRead
)

func testSessionsUpdate(t *testing.T) {
	t.Parallel()

	if len(sessionColumns) == len(sessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := sessionColumnsWithDefault

	if err = randomize.Struct(seed, session, sessionDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	if err = session.Update(tx); err != nil {
		t.Error(err)
	}
}

func testSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(sessionColumns) == len(sessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := sessionPrimaryKeyColumns

	if err = randomize.Struct(seed, session, sessionDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(sessionColumns, sessionPrimaryKeyColumns) {
		fields = sessionColumns
	} else {
		fields = strmangle.SetComplement(
			sessionColumns,
			sessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(session))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := SessionSlice{session}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(sessionColumns) == len(sessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	session := &Session{}
	if err = randomize.Struct(seed, session, sessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = session.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Session: %s", err)
	}

	count, err := Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := sessionPrimaryKeyColumns

	if err = randomize.Struct(seed, session, sessionDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Session struct: %s", err)
	}

	if err = session.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Session: %s", err)
	}

	count, err = Sessions(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
