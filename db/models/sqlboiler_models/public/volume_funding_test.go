// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testVolumeFundings(t *testing.T) {
	t.Parallel()

	query := VolumeFundings(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testVolumeFundingsLive(t *testing.T) {
	all, err := VolumeFundings(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all VolumeFundings err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM volume_funding) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM volume_funding) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("VolumeFundingsLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testVolumeFundingsDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeFunding.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeFundingsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeFundings(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeFundingsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeFundingSlice{volumeFunding}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testVolumeFundingsExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := VolumeFundingExists(tx, volumeFunding.Volume, volumeFunding.Funder)
	if err != nil {
		t.Errorf("Unable to check if VolumeFunding exists: %s", err)
	}
	if !e {
		t.Errorf("Expected VolumeFundingExistsG to return true, but got false.")
	}
}

func testVolumeFundingsFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	volumeFundingFound, err := FindVolumeFunding(tx, volumeFunding.Volume, volumeFunding.Funder)
	if err != nil {
		t.Error(err)
	}

	if volumeFundingFound == nil {
		t.Error("want a record, got nil")
	}
}

func testVolumeFundingsBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = VolumeFundings(tx).Bind(volumeFunding); err != nil {
		t.Error(err)
	}
}

func testVolumeFundingsOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := VolumeFundings(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testVolumeFundingsAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFundingOne := &VolumeFunding{}
	volumeFundingTwo := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFundingOne, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeFundingTwo, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFundingOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeFundingTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeFundings(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testVolumeFundingsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFundingOne := &VolumeFunding{}
	volumeFundingTwo := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFundingOne, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...); err != nil {

		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}
	if err = randomize.Struct(seed, volumeFundingTwo, volumeFundingDBTypes, false, volumeFundingColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFundingOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = volumeFundingTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func volumeFundingBeforeInsertHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingAfterInsertHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingAfterSelectHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingBeforeUpdateHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingAfterUpdateHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingBeforeDeleteHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingAfterDeleteHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingBeforeUpsertHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func volumeFundingAfterUpsertHook(e boil.Executor, o *VolumeFunding) error {
	*o = VolumeFunding{}
	return nil
}

func testVolumeFundingsHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	empty := &VolumeFunding{}

	AddVolumeFundingHook(boil.BeforeInsertHook, volumeFundingBeforeInsertHook)
	if err = volumeFunding.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingBeforeInsertHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.AfterInsertHook, volumeFundingAfterInsertHook)
	if err = volumeFunding.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingAfterInsertHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.AfterSelectHook, volumeFundingAfterSelectHook)
	if err = volumeFunding.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingAfterSelectHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.BeforeUpdateHook, volumeFundingBeforeUpdateHook)
	if err = volumeFunding.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingBeforeUpdateHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.AfterUpdateHook, volumeFundingAfterUpdateHook)
	if err = volumeFunding.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingAfterUpdateHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.BeforeDeleteHook, volumeFundingBeforeDeleteHook)
	if err = volumeFunding.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingBeforeDeleteHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.AfterDeleteHook, volumeFundingAfterDeleteHook)
	if err = volumeFunding.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingAfterDeleteHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.BeforeUpsertHook, volumeFundingBeforeUpsertHook)
	if err = volumeFunding.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingBeforeUpsertHooks = []VolumeFundingHook{}

	AddVolumeFundingHook(boil.AfterUpsertHook, volumeFundingAfterUpsertHook)
	if err = volumeFunding.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(volumeFunding, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", volumeFunding)
	}
	volumeFundingAfterUpsertHooks = []VolumeFundingHook{}
}
func testVolumeFundingsInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeFundingsInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx, volumeFundingColumns...); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testVolumeFundingToOneFunderUsingFunder(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Funder
	var local VolumeFunding

	foreignBlacklist := funderColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, funderDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}
	localBlacklist := volumeFundingColumnsWithDefault
	if err := randomize.Struct(seed, &local, volumeFundingDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Funder = foreign.FundrefID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.FunderByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.FundrefID != foreign.FundrefID {
		t.Errorf("want: %v, got %v", foreign.FundrefID, check.FundrefID)
	}

	slice := VolumeFundingSlice{&local}
	if err = local.L.LoadFunder(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Funder == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Funder = nil
	if err = local.L.LoadFunder(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Funder == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeFundingToOneVolumeUsingVolume(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Volume
	var local VolumeFunding

	foreignBlacklist := volumeColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, volumeDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := volumeFundingColumnsWithDefault
	if err := randomize.Struct(seed, &local, volumeFundingDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Volume = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.VolumeByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := VolumeFundingSlice{&local}
	if err = local.L.LoadVolume(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Volume = nil
	if err = local.L.LoadVolume(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Volume == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testVolumeFundingToOneSetOpFunderUsingFunder(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a VolumeFunding
	var b, c Funder

	foreignBlacklist := strmangle.SetComplement(funderPrimaryKeyColumns, funderColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, funderDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, funderDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Funder struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(volumeFundingPrimaryKeyColumns, volumeFundingColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, volumeFundingDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Funder{&b, &c} {
		err = a.SetFunder(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Funder != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeFundings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Funder != x.FundrefID {
			t.Error("foreign key was wrong value", a.Funder)
		}

		if exists, err := VolumeFundingExists(tx, a.Volume, a.Funder); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testVolumeFundingToOneSetOpVolumeUsingVolume(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a VolumeFunding
	var b, c Volume

	foreignBlacklist := strmangle.SetComplement(volumePrimaryKeyColumns, volumeColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, volumeDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Volume struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(volumeFundingPrimaryKeyColumns, volumeFundingColumnsWithoutDefault)
	if err := randomize.Struct(seed, &a, volumeFundingDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Volume{&b, &c} {
		err = a.SetVolume(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Volume != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.VolumeFundings[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Volume != x.ID {
			t.Error("foreign key was wrong value", a.Volume)
		}

		if exists, err := VolumeFundingExists(tx, a.Volume, a.Funder); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testVolumeFundingsReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = volumeFunding.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeFundingsReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := VolumeFundingSlice{volumeFunding}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeFundingsSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := VolumeFundings(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	volumeFundingDBTypes = map[string]string{`Awards`: `ARRAYtext`, `Funder`: `bigint`, `Volume`: `integer`}
	_                    = bytes.MinRead
)

func testVolumeFundingsUpdate(t *testing.T) {
	t.Parallel()

	if len(volumeFundingColumns) == len(volumeFundingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := volumeFundingColumnsWithDefault

	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err = volumeFunding.Update(tx); err != nil {
		t.Error(err)
	}
}

func testVolumeFundingsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(volumeFundingColumns) == len(volumeFundingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := volumeFundingPrimaryKeyColumns

	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(volumeFundingColumns, volumeFundingPrimaryKeyColumns) {
		fields = volumeFundingColumns
	} else {
		fields = strmangle.SetComplement(
			volumeFundingColumns,
			volumeFundingPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(volumeFunding))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := VolumeFundingSlice{volumeFunding}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testVolumeFundingsUpsert(t *testing.T) {
	t.Parallel()

	if len(volumeFundingColumns) == len(volumeFundingPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	volumeFunding := &VolumeFunding{}
	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, true); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = volumeFunding.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeFunding: %s", err)
	}

	count, err := VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := volumeFundingPrimaryKeyColumns

	if err = randomize.Struct(seed, volumeFunding, volumeFundingDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize VolumeFunding struct: %s", err)
	}

	if err = volumeFunding.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert VolumeFunding: %s", err)
	}

	count, err = VolumeFundings(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
