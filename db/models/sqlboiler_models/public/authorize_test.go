// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/randomize"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pmezard/go-difflib/difflib"
	"os"
	"os/exec"
	"reflect"
	"sort"
	"strings"
	"testing"
)

func testAuthorizes(t *testing.T) {
	t.Parallel()

	query := Authorizes(nil)

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAuthorizesLive(t *testing.T) {
	all, err := Authorizes(dbMain.liveDbConn).All()
	if err != nil {
		t.Fatalf("failed to get all Authorizes err: ", err)
	}
	tx, err := dbMain.liveTestDbConn.Begin()
	if err != nil {
		t.Fatalf("failed to begin transaction: ", err)
	}
	for _, v := range all {
		err := v.Insert(tx)
		if err != nil {
			t.Fatalf("failed to failed to insert %s because of %s", v, err)
		}

	}
	err = tx.Commit()
	if err != nil {
		t.Fatalf("failed to commit transaction: ", err)
	}
	bf := &bytes.Buffer{}
	dumpCmd := exec.Command("psql", `-c "COPY (SELECT * FROM authorize) TO STDOUT" -d `, dbMain.DbName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bf
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from live db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from live db because of %s", err)
	}
	bg := &bytes.Buffer{}
	dumpCmd = exec.Command("psql", `-c "COPY (SELECT * FROM authorize) TO STDOUT" -d `, dbMain.LiveTestDBName)
	dumpCmd.Env = append(os.Environ(), dbMain.pgEnv()...)
	dumpCmd.Stdout = bg
	err = dumpCmd.Start()
	if err != nil {
		t.Fatalf("failed to start dump from test db because of %s", err)
	}
	dumpCmd.Wait()
	if err != nil {
		t.Fatalf("failed to wait dump from test db because of %s", err)
	}
	bfslice := sort.StringSlice(difflib.SplitLines(bf.String()))
	gfslice := sort.StringSlice(difflib.SplitLines(bg.String()))
	bfslice.Sort()
	gfslice.Sort()
	diff := difflib.ContextDiff{
		A:        bfslice,
		B:        gfslice,
		FromFile: "databrary",
		ToFile:   "test",
		Context:  1,
	}
	result, _ := difflib.GetContextDiffString(diff)
	if len(result) > 0 {
		t.Fatalf("AuthorizesLive failed but it's probably trivial: %s", strings.Replace(result, "\t", " ", -1))
	}

}

func testAuthorizesDelete(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = authorize.Delete(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Authorizes(tx).DeleteAll(); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthorizeSlice{authorize}

	if err = slice.DeleteAll(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAuthorizesExists(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	e, err := AuthorizeExists(tx, authorize.Child, authorize.Parent)
	if err != nil {
		t.Errorf("Unable to check if Authorize exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AuthorizeExistsG to return true, but got false.")
	}
}

func testAuthorizesFind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	authorizeFound, err := FindAuthorize(tx, authorize.Child, authorize.Parent)
	if err != nil {
		t.Error(err)
	}

	if authorizeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAuthorizesBind(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = Authorizes(tx).Bind(authorize); err != nil {
		t.Error(err)
	}
}

func testAuthorizesOne(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	if x, err := Authorizes(tx).One(); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAuthorizesAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorizeOne := &Authorize{}
	authorizeTwo := &Authorize{}
	if err = randomize.Struct(seed, authorizeOne, authorizeDBTypes, false, authorizeColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	if err = randomize.Struct(seed, authorizeTwo, authorizeDBTypes, false, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorizeOne.Site = custom_types.PermissionRandom()
	authorizeTwo.Site = custom_types.PermissionRandom()
	authorizeOne.Member = custom_types.PermissionRandom()
	authorizeTwo.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorizeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authorizeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Authorizes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAuthorizesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorizeOne := &Authorize{}
	authorizeTwo := &Authorize{}
	if err = randomize.Struct(seed, authorizeOne, authorizeDBTypes, false, authorizeColumnsWithCustom...); err != nil {

		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	if err = randomize.Struct(seed, authorizeTwo, authorizeDBTypes, false, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorizeOne.Site = custom_types.PermissionRandom()
	authorizeTwo.Site = custom_types.PermissionRandom()
	authorizeOne.Member = custom_types.PermissionRandom()
	authorizeTwo.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorizeOne.Insert(tx); err != nil {
		t.Error(err)
	}
	if err = authorizeTwo.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func authorizeBeforeInsertHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeAfterInsertHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeAfterSelectHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeBeforeUpdateHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeAfterUpdateHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeBeforeDeleteHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeAfterDeleteHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeBeforeUpsertHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func authorizeAfterUpsertHook(e boil.Executor, o *Authorize) error {
	*o = Authorize{}
	return nil
}

func testAuthorizesHooks(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	empty := &Authorize{}

	AddAuthorizeHook(boil.BeforeInsertHook, authorizeBeforeInsertHook)
	if err = authorize.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", authorize)
	}
	authorizeBeforeInsertHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.AfterInsertHook, authorizeAfterInsertHook)
	if err = authorize.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", authorize)
	}
	authorizeAfterInsertHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.AfterSelectHook, authorizeAfterSelectHook)
	if err = authorize.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", authorize)
	}
	authorizeAfterSelectHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.BeforeUpdateHook, authorizeBeforeUpdateHook)
	if err = authorize.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", authorize)
	}
	authorizeBeforeUpdateHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.AfterUpdateHook, authorizeAfterUpdateHook)
	if err = authorize.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", authorize)
	}
	authorizeAfterUpdateHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.BeforeDeleteHook, authorizeBeforeDeleteHook)
	if err = authorize.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", authorize)
	}
	authorizeBeforeDeleteHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.AfterDeleteHook, authorizeAfterDeleteHook)
	if err = authorize.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", authorize)
	}
	authorizeAfterDeleteHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.BeforeUpsertHook, authorizeBeforeUpsertHook)
	if err = authorize.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", authorize)
	}
	authorizeBeforeUpsertHooks = []AuthorizeHook{}

	AddAuthorizeHook(boil.AfterUpsertHook, authorizeAfterUpsertHook)
	if err = authorize.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(authorize, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", authorize)
	}
	authorizeAfterUpsertHooks = []AuthorizeHook{}
}
func testAuthorizesInsert(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorizesInsertWhitelist(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx, authorizeColumns...); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAuthorizeToOnePartyUsingChild(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Party
	var local Authorize

	foreignBlacklist := partyColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := authorizeColumnsWithDefault
	localBlacklist = append(localBlacklist, authorizeColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, authorizeDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	local.Site = custom_types.PermissionRandom()
	local.Member = custom_types.PermissionRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Child = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ChildByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthorizeSlice{&local}
	if err = local.L.LoadChild(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Child = nil
	if err = local.L.LoadChild(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Child == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthorizeToOnePartyUsingParent(t *testing.T) {
	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var foreign Party
	var local Authorize

	foreignBlacklist := partyColumnsWithDefault
	if err := randomize.Struct(seed, &foreign, partyDBTypes, true, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := authorizeColumnsWithDefault
	localBlacklist = append(localBlacklist, authorizeColumnsWithCustom...)

	if err := randomize.Struct(seed, &local, authorizeDBTypes, true, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	local.Site = custom_types.PermissionRandom()
	local.Member = custom_types.PermissionRandom()

	if err := foreign.Insert(tx); err != nil {
		t.Fatal(err)
	}

	local.Parent = foreign.ID
	if err := local.Insert(tx); err != nil {
		t.Fatal(err)
	}

	check, err := local.ParentByFk(tx).One()
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AuthorizeSlice{&local}
	if err = local.L.LoadParent(tx, false, &slice); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Parent = nil
	if err = local.L.LoadParent(tx, true, &local); err != nil {
		t.Fatal(err)
	}
	if local.R.Parent == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAuthorizeToOneSetOpPartyUsingChild(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Authorize
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(authorizePrimaryKeyColumns, authorizeColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, authorizeColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, authorizeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	a.Site = custom_types.PermissionRandom()
	a.Member = custom_types.PermissionRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetChild(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Child != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ChildAuthorizes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Child != x.ID {
			t.Error("foreign key was wrong value", a.Child)
		}

		if exists, err := AuthorizeExists(tx, a.Child, a.Parent); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testAuthorizeToOneSetOpPartyUsingParent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer tx.Rollback()

	seed := randomize.NewSeed()

	var a Authorize
	var b, c Party

	foreignBlacklist := strmangle.SetComplement(partyPrimaryKeyColumns, partyColumnsWithoutDefault)
	if err := randomize.Struct(seed, &b, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	if err := randomize.Struct(seed, &c, partyDBTypes, false, foreignBlacklist...); err != nil {
		t.Errorf("Unable to randomize Party struct: %s", err)
	}
	localBlacklist := strmangle.SetComplement(authorizePrimaryKeyColumns, authorizeColumnsWithoutDefault)
	localBlacklist = append(localBlacklist, authorizeColumnsWithCustom...)

	if err := randomize.Struct(seed, &a, authorizeDBTypes, false, localBlacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}
	a.Site = custom_types.PermissionRandom()
	a.Member = custom_types.PermissionRandom()

	if err := a.Insert(tx); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Party{&b, &c} {
		err = a.SetParent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Parent != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ParentAuthorizes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.Parent != x.ID {
			t.Error("foreign key was wrong value", a.Parent)
		}

		if exists, err := AuthorizeExists(tx, a.Child, a.Parent); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testAuthorizesReload(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	if err = authorize.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAuthorizesReloadAll(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	slice := AuthorizeSlice{authorize}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAuthorizesSelect(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	slice, err := Authorizes(tx).All()
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	authorizeDBTypes = map[string]string{`Child`: `integer`, `Expires`: `timestamp with time zone`, `Member`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`, `Parent`: `integer`, `Site`: `enum.permission('NONE','PUBLIC','SHARED','READ','EDIT','ADMIN')`}
	_                = bytes.MinRead
)

func testAuthorizesUpdate(t *testing.T) {
	t.Parallel()

	if len(authorizeColumns) == len(authorizePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := authorizeColumnsWithDefault
	blacklist = append(blacklist, authorizeColumnsWithCustom...)

	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	if err = authorize.Update(tx); err != nil {
		t.Error(err)
	}
}

func testAuthorizesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(authorizeColumns) == len(authorizePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Insert(tx); err != nil {
		t.Error(err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	blacklist := authorizePrimaryKeyColumns
	blacklist = append(blacklist, authorizeColumnsWithCustom...)

	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, blacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(authorizeColumns, authorizePrimaryKeyColumns) {
		fields = authorizeColumns
	} else {
		fields = strmangle.SetComplement(
			authorizeColumns,
			authorizePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(authorize))
	updateMap := M{}
	for _, col := range fields {
		updateMap[col] = value.FieldByName(strmangle.TitleCase(col)).Interface()
	}

	slice := AuthorizeSlice{authorize}
	if err = slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	}
}

func testAuthorizesUpsert(t *testing.T) {
	t.Parallel()

	if len(authorizeColumns) == len(authorizePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	var err error
	seed := randomize.NewSeed()
	authorize := &Authorize{}
	if err = randomize.Struct(seed, authorize, authorizeDBTypes, true, authorizeColumnsWithCustom...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	tx := MustTx(boil.Begin())
	defer tx.Rollback()
	if err = authorize.Upsert(tx, false, nil, nil); err != nil {
		t.Errorf("Unable to upsert Authorize: %s", err)
	}

	count, err := Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	blacklist := authorizePrimaryKeyColumns

	blacklist = append(blacklist, authorizeColumnsWithCustom...)

	if err = randomize.Struct(seed, authorize, authorizeDBTypes, false, blacklist...); err != nil {
		t.Errorf("Unable to randomize Authorize struct: %s", err)
	}

	authorize.Site = custom_types.PermissionRandom()
	authorize.Member = custom_types.PermissionRandom()

	if err = authorize.Upsert(tx, true, nil, nil); err != nil {
		t.Errorf("Unable to upsert Authorize: %s", err)
	}

	count, err = Authorizes(tx).Count()
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
