// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package public

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// AuthorizeView is an object representing the database view.
type AuthorizeView struct {
	Child  null.Int                    `db:"child" json:"authorizeView_child,omitempty"`
	Parent null.Int                    `db:"parent" json:"authorizeView_parent,omitempty"`
	Site   custom_types.NullPermission `db:"site" json:"authorizeView_site,omitempty"`
	Member custom_types.NullPermission `db:"member" json:"authorizeView_member,omitempty"`

	R *authorizeViewR `db:"-" json:"-"`
	L authorizeViewL  `db:"-" json:"-"`
}

// authorizeViewR is where relationships are stored.
type authorizeViewR struct {
}

// authorizeViewL is where Load methods for each relationship are stored.
type authorizeViewL struct{}

var (
	authorizeViewColumns               = []string{"child", "parent", "site", "member"}
	authorizeViewColumnsWithoutDefault = []string{"child", "parent", "site", "member"}
	authorizeViewColumnsWithDefault    = []string{}
	authorizeViewColumnsWithCustom     = []string{"site", "member"}
)

type (
	// AuthorizeViewSlice is an alias for a slice of pointers to AuthorizeView.
	// This should generally be used opposed to []AuthorizeView.
	AuthorizeViewSlice []*AuthorizeView
	// AuthorizeViewHook is the signature for custom AuthorizeView hook methods
	AuthorizeViewHook func(boil.Executor, *AuthorizeView) error

	authorizeViewQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	authorizeViewType    = reflect.TypeOf(&AuthorizeView{})
	authorizeViewMapping = queries.MakeStructMapping(authorizeViewType)

	authorizeViewInsertCacheMut sync.RWMutex
	authorizeViewInsertCache    = make(map[string]insertCache)
	authorizeViewUpdateCacheMut sync.RWMutex
	authorizeViewUpdateCache    = make(map[string]updateCache)
	authorizeViewUpsertCacheMut sync.RWMutex
	authorizeViewUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var authorizeViewBeforeInsertHooks []AuthorizeViewHook
var authorizeViewBeforeUpdateHooks []AuthorizeViewHook
var authorizeViewBeforeDeleteHooks []AuthorizeViewHook
var authorizeViewBeforeUpsertHooks []AuthorizeViewHook

var authorizeViewAfterInsertHooks []AuthorizeViewHook
var authorizeViewAfterSelectHooks []AuthorizeViewHook
var authorizeViewAfterUpdateHooks []AuthorizeViewHook
var authorizeViewAfterDeleteHooks []AuthorizeViewHook
var authorizeViewAfterUpsertHooks []AuthorizeViewHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AuthorizeView) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AuthorizeView) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AuthorizeView) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AuthorizeView) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AuthorizeView) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AuthorizeView) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AuthorizeView) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AuthorizeView) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AuthorizeView) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range authorizeViewAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAuthorizeViewHook registers your hook function for all future operations.
func AddAuthorizeViewHook(hookPoint boil.HookPoint, authorizeViewHook AuthorizeViewHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		authorizeViewBeforeInsertHooks = append(authorizeViewBeforeInsertHooks, authorizeViewHook)
	case boil.BeforeUpdateHook:
		authorizeViewBeforeUpdateHooks = append(authorizeViewBeforeUpdateHooks, authorizeViewHook)
	case boil.BeforeDeleteHook:
		authorizeViewBeforeDeleteHooks = append(authorizeViewBeforeDeleteHooks, authorizeViewHook)
	case boil.BeforeUpsertHook:
		authorizeViewBeforeUpsertHooks = append(authorizeViewBeforeUpsertHooks, authorizeViewHook)
	case boil.AfterInsertHook:
		authorizeViewAfterInsertHooks = append(authorizeViewAfterInsertHooks, authorizeViewHook)
	case boil.AfterSelectHook:
		authorizeViewAfterSelectHooks = append(authorizeViewAfterSelectHooks, authorizeViewHook)
	case boil.AfterUpdateHook:
		authorizeViewAfterUpdateHooks = append(authorizeViewAfterUpdateHooks, authorizeViewHook)
	case boil.AfterDeleteHook:
		authorizeViewAfterDeleteHooks = append(authorizeViewAfterDeleteHooks, authorizeViewHook)
	case boil.AfterUpsertHook:
		authorizeViewAfterUpsertHooks = append(authorizeViewAfterUpsertHooks, authorizeViewHook)
	}
}

// OneP returns a single authorizeView record from the query, and panics on error.
func (q authorizeViewQuery) OneP() *AuthorizeView {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single authorizeView record from the query.
func (q authorizeViewQuery) One() (*AuthorizeView, error) {
	o := &AuthorizeView{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "public: failed to execute a one query for authorize_view")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all AuthorizeView records from the query, and panics on error.
func (q authorizeViewQuery) AllP() AuthorizeViewSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all AuthorizeView records from the query.
func (q authorizeViewQuery) All() (AuthorizeViewSlice, error) {
	var o AuthorizeViewSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "public: failed to assign all query results to AuthorizeView slice")
	}

	if len(authorizeViewAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all AuthorizeView records in the query, and panics on error.
func (q authorizeViewQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all AuthorizeView records in the query.
func (q authorizeViewQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "public: failed to count authorize_view rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q authorizeViewQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q authorizeViewQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "public: failed to check if authorize_view exists")
	}

	return count > 0, nil
}

// AuthorizeViewsG retrieves all records.
func AuthorizeViewsG(mods ...qm.QueryMod) authorizeViewQuery {
	return AuthorizeViews(boil.GetDB(), mods...)
}

// AuthorizeViews retrieves all the records using an executor.
func AuthorizeViews(exec boil.Executor, mods ...qm.QueryMod) authorizeViewQuery {
	mods = append(mods, qm.From("\"authorize_view\""))
	return authorizeViewQuery{NewQuery(exec, mods...)}
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *AuthorizeView) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *AuthorizeView) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *AuthorizeView) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *AuthorizeView) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("public: no authorize_view provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(authorizeViewColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	authorizeViewInsertCacheMut.RLock()
	cache, cached := authorizeViewInsertCache[key]
	authorizeViewInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			authorizeViewColumns,
			authorizeViewColumnsWithDefault,
			authorizeViewColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(authorizeViewType, authorizeViewMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(authorizeViewType, authorizeViewMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"authorize_view\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"authorize_view\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "public: unable to insert into authorize_view")
	}

	if !cached {
		authorizeViewInsertCacheMut.Lock()
		authorizeViewInsertCache[key] = cache
		authorizeViewInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}
