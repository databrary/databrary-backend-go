// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package audit

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"reflect"
	"strings"
	"sync"
	"time"
)

// SlotAsset is an object representing the database table.
type SlotAsset struct {
	AuditTime   time.Time            `db:"audit_time" json:"slotAsset_audit_time"`
	AuditUser   int                  `db:"audit_user" json:"slotAsset_audit_user"`
	AuditIP     custom_types.Inet    `db:"audit_ip" json:"slotAsset_audit_ip"`
	AuditAction custom_types.Action  `db:"audit_action" json:"slotAsset_audit_action"`
	Container   int                  `db:"container" json:"slotAsset_container"`
	Segment     custom_types.Segment `db:"segment" json:"slotAsset_segment"`
	Asset       int                  `db:"asset" json:"slotAsset_asset"`

	R *slotAssetR `db:"-" json:"-"`
	L slotAssetL  `db:"-" json:"-"`
}

// slotAssetR is where relationships are stored.
type slotAssetR struct {
}

// slotAssetL is where Load methods for each relationship are stored.
type slotAssetL struct{}

var (
	slotAssetColumns               = []string{"audit_time", "audit_user", "audit_ip", "audit_action", "container", "segment", "asset"}
	slotAssetColumnsWithoutDefault = []string{"audit_user", "audit_ip", "audit_action", "container", "segment", "asset"}
	slotAssetColumnsWithDefault    = []string{"audit_time"}
	slotAssetColumnsWithCustom     = []string{"audit_ip", "audit_action", "segment"}
)

type (
	// SlotAssetSlice is an alias for a slice of pointers to SlotAsset.
	// This should generally be used opposed to []SlotAsset.
	SlotAssetSlice []*SlotAsset
	// SlotAssetHook is the signature for custom SlotAsset hook methods
	SlotAssetHook func(boil.Executor, *SlotAsset) error

	slotAssetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	slotAssetType    = reflect.TypeOf(&SlotAsset{})
	slotAssetMapping = queries.MakeStructMapping(slotAssetType)

	slotAssetInsertCacheMut sync.RWMutex
	slotAssetInsertCache    = make(map[string]insertCache)
	slotAssetUpdateCacheMut sync.RWMutex
	slotAssetUpdateCache    = make(map[string]updateCache)
	slotAssetUpsertCacheMut sync.RWMutex
	slotAssetUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var slotAssetBeforeInsertHooks []SlotAssetHook
var slotAssetBeforeUpdateHooks []SlotAssetHook
var slotAssetBeforeDeleteHooks []SlotAssetHook
var slotAssetBeforeUpsertHooks []SlotAssetHook

var slotAssetAfterInsertHooks []SlotAssetHook
var slotAssetAfterSelectHooks []SlotAssetHook
var slotAssetAfterUpdateHooks []SlotAssetHook
var slotAssetAfterDeleteHooks []SlotAssetHook
var slotAssetAfterUpsertHooks []SlotAssetHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SlotAsset) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SlotAsset) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SlotAsset) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SlotAsset) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SlotAsset) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SlotAsset) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SlotAsset) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SlotAsset) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SlotAsset) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range slotAssetAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSlotAssetHook registers your hook function for all future operations.
func AddSlotAssetHook(hookPoint boil.HookPoint, slotAssetHook SlotAssetHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		slotAssetBeforeInsertHooks = append(slotAssetBeforeInsertHooks, slotAssetHook)
	case boil.BeforeUpdateHook:
		slotAssetBeforeUpdateHooks = append(slotAssetBeforeUpdateHooks, slotAssetHook)
	case boil.BeforeDeleteHook:
		slotAssetBeforeDeleteHooks = append(slotAssetBeforeDeleteHooks, slotAssetHook)
	case boil.BeforeUpsertHook:
		slotAssetBeforeUpsertHooks = append(slotAssetBeforeUpsertHooks, slotAssetHook)
	case boil.AfterInsertHook:
		slotAssetAfterInsertHooks = append(slotAssetAfterInsertHooks, slotAssetHook)
	case boil.AfterSelectHook:
		slotAssetAfterSelectHooks = append(slotAssetAfterSelectHooks, slotAssetHook)
	case boil.AfterUpdateHook:
		slotAssetAfterUpdateHooks = append(slotAssetAfterUpdateHooks, slotAssetHook)
	case boil.AfterDeleteHook:
		slotAssetAfterDeleteHooks = append(slotAssetAfterDeleteHooks, slotAssetHook)
	case boil.AfterUpsertHook:
		slotAssetAfterUpsertHooks = append(slotAssetAfterUpsertHooks, slotAssetHook)
	}
}

// OneP returns a single slotAsset record from the query, and panics on error.
func (q slotAssetQuery) OneP() *SlotAsset {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single slotAsset record from the query.
func (q slotAssetQuery) One() (*SlotAsset, error) {
	o := &SlotAsset{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for slot_asset")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SlotAsset records from the query, and panics on error.
func (q slotAssetQuery) AllP() SlotAssetSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SlotAsset records from the query.
func (q slotAssetQuery) All() (SlotAssetSlice, error) {
	var o SlotAssetSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SlotAsset slice")
	}

	if len(slotAssetAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SlotAsset records in the query, and panics on error.
func (q slotAssetQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SlotAsset records in the query.
func (q slotAssetQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count slot_asset rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q slotAssetQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q slotAssetQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if slot_asset exists")
	}

	return count > 0, nil
}

// SlotAssetsG retrieves all records.
func SlotAssetsG(mods ...qm.QueryMod) slotAssetQuery {
	return SlotAssets(boil.GetDB(), mods...)
}

// SlotAssets retrieves all the records using an executor.
func SlotAssets(exec boil.Executor, mods ...qm.QueryMod) slotAssetQuery {
	mods = append(mods, qm.From("\"audit\".\"slot_asset\""))
	return slotAssetQuery{NewQuery(exec, mods...)}
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *SlotAsset) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *SlotAsset) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SlotAsset) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *SlotAsset) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no slot_asset provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(slotAssetColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	slotAssetInsertCacheMut.RLock()
	cache, cached := slotAssetInsertCache[key]
	slotAssetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			slotAssetColumns,
			slotAssetColumnsWithDefault,
			slotAssetColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(slotAssetType, slotAssetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"audit\".\"slot_asset\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"audit\".\"slot_asset\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into slot_asset")
	}

	if !cached {
		slotAssetInsertCacheMut.Lock()
		slotAssetInsertCache[key] = cache
		slotAssetInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}
