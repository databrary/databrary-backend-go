// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package audit

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// Record is an object representing the database table.
type Record struct {
	AuditTime   time.Time           `db:"audit_time" json:"record_audit_time"`
	AuditUser   int                 `db:"audit_user" json:"record_audit_user"`
	AuditIP     custom_types.Inet   `db:"audit_ip" json:"record_audit_ip"`
	AuditAction custom_types.Action `db:"audit_action" json:"record_audit_action"`
	ID          int                 `db:"id" json:"record_id"`
	Volume      int                 `db:"volume" json:"record_volume"`
	Category    null.Int16          `db:"category" json:"record_category,omitempty"`

	R *recordR `db:"-" json:"-"`
	L recordL  `db:"-" json:"-"`
}

// recordR is where relationships are stored.
type recordR struct {
}

// recordL is where Load methods for each relationship are stored.
type recordL struct{}

var (
	recordColumns               = []string{"audit_time", "audit_user", "audit_ip", "audit_action", "id", "volume", "category"}
	recordColumnsWithoutDefault = []string{"audit_user", "audit_ip", "audit_action", "id", "volume", "category"}
	recordColumnsWithDefault    = []string{"audit_time"}
	recordColumnsWithCustom     = []string{"audit_ip", "audit_action"}
)

type (
	// RecordSlice is an alias for a slice of pointers to Record.
	// This should generally be used opposed to []Record.
	RecordSlice []*Record
	// RecordHook is the signature for custom Record hook methods
	RecordHook func(boil.Executor, *Record) error

	recordQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	recordType    = reflect.TypeOf(&Record{})
	recordMapping = queries.MakeStructMapping(recordType)

	recordInsertCacheMut sync.RWMutex
	recordInsertCache    = make(map[string]insertCache)
	recordUpdateCacheMut sync.RWMutex
	recordUpdateCache    = make(map[string]updateCache)
	recordUpsertCacheMut sync.RWMutex
	recordUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var recordBeforeInsertHooks []RecordHook
var recordBeforeUpdateHooks []RecordHook
var recordBeforeDeleteHooks []RecordHook
var recordBeforeUpsertHooks []RecordHook

var recordAfterInsertHooks []RecordHook
var recordAfterSelectHooks []RecordHook
var recordAfterUpdateHooks []RecordHook
var recordAfterDeleteHooks []RecordHook
var recordAfterUpsertHooks []RecordHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Record) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Record) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range recordBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Record) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range recordBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Record) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Record) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Record) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range recordAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Record) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range recordAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Record) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range recordAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Record) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range recordAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRecordHook registers your hook function for all future operations.
func AddRecordHook(hookPoint boil.HookPoint, recordHook RecordHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		recordBeforeInsertHooks = append(recordBeforeInsertHooks, recordHook)
	case boil.BeforeUpdateHook:
		recordBeforeUpdateHooks = append(recordBeforeUpdateHooks, recordHook)
	case boil.BeforeDeleteHook:
		recordBeforeDeleteHooks = append(recordBeforeDeleteHooks, recordHook)
	case boil.BeforeUpsertHook:
		recordBeforeUpsertHooks = append(recordBeforeUpsertHooks, recordHook)
	case boil.AfterInsertHook:
		recordAfterInsertHooks = append(recordAfterInsertHooks, recordHook)
	case boil.AfterSelectHook:
		recordAfterSelectHooks = append(recordAfterSelectHooks, recordHook)
	case boil.AfterUpdateHook:
		recordAfterUpdateHooks = append(recordAfterUpdateHooks, recordHook)
	case boil.AfterDeleteHook:
		recordAfterDeleteHooks = append(recordAfterDeleteHooks, recordHook)
	case boil.AfterUpsertHook:
		recordAfterUpsertHooks = append(recordAfterUpsertHooks, recordHook)
	}
}

// OneP returns a single record record from the query, and panics on error.
func (q recordQuery) OneP() *Record {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single record record from the query.
func (q recordQuery) One() (*Record, error) {
	o := &Record{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for record")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all Record records from the query, and panics on error.
func (q recordQuery) AllP() RecordSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all Record records from the query.
func (q recordQuery) All() (RecordSlice, error) {
	var o RecordSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Record slice")
	}

	if len(recordAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all Record records in the query, and panics on error.
func (q recordQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all Record records in the query.
func (q recordQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count record rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q recordQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q recordQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if record exists")
	}

	return count > 0, nil
}

// RecordsG retrieves all records.
func RecordsG(mods ...qm.QueryMod) recordQuery {
	return Records(boil.GetDB(), mods...)
}

// Records retrieves all the records using an executor.
func Records(exec boil.Executor, mods ...qm.QueryMod) recordQuery {
	mods = append(mods, qm.From("\"audit\".\"record\""))
	return recordQuery{NewQuery(exec, mods...)}
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Record) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *Record) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *Record) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *Record) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no record provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(recordColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	recordInsertCacheMut.RLock()
	cache, cached := recordInsertCache[key]
	recordInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			recordColumns,
			recordColumnsWithDefault,
			recordColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(recordType, recordMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(recordType, recordMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"audit\".\"record\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"audit\".\"record\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into record")
	}

	if !cached {
		recordInsertCacheMut.Lock()
		recordInsertCache[key] = cache
		recordInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}
