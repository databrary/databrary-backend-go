// This file is generated by SQLBoiler (https://github.com/databrary/sqlboiler)
// and is meant to be re-generated in place and/or deleted at any time.
// EDIT AT YOUR OWN RISK

package audit

import (
	"bytes"
	"database/sql"
	"fmt"
	"github.com/databrary/databrary-backend-go/db/models/custom_types"
	"github.com/databrary/sqlboiler/boil"
	"github.com/databrary/sqlboiler/queries"
	"github.com/databrary/sqlboiler/queries/qm"
	"github.com/databrary/sqlboiler/strmangle"
	"github.com/pkg/errors"
	"gopkg.in/nullbio/null.v6"
	"reflect"
	"strings"
	"sync"
	"time"
)

// MeasureDate is an object representing the database view.
type MeasureDate struct {
	AuditTime   null.Time               `db:"audit_time" json:"measureDate_audit_time,omitempty"`
	AuditUser   null.Int                `db:"audit_user" json:"measureDate_audit_user,omitempty"`
	AuditIP     custom_types.NullInet   `db:"audit_ip" json:"measureDate_audit_ip,omitempty"`
	AuditAction custom_types.NullAction `db:"audit_action" json:"measureDate_audit_action,omitempty"`
	Record      null.Int                `db:"record" json:"measureDate_record,omitempty"`
	Metric      null.Int                `db:"metric" json:"measureDate_metric,omitempty"`
	Datum       null.String             `db:"datum" json:"measureDate_datum,omitempty"`

	R *measureDateR `db:"-" json:"-"`
	L measureDateL  `db:"-" json:"-"`
}

// measureDateR is where relationships are stored.
type measureDateR struct {
}

// measureDateL is where Load methods for each relationship are stored.
type measureDateL struct{}

var (
	measureDateColumns               = []string{"audit_time", "audit_user", "audit_ip", "audit_action", "record", "metric", "datum"}
	measureDateColumnsWithoutDefault = []string{"audit_time", "audit_user", "audit_ip", "audit_action", "record", "metric", "datum"}
	measureDateColumnsWithDefault    = []string{}
	measureDateColumnsWithCustom     = []string{"audit_ip", "audit_action"}
)

type (
	// MeasureDateSlice is an alias for a slice of pointers to MeasureDate.
	// This should generally be used opposed to []MeasureDate.
	MeasureDateSlice []*MeasureDate
	// MeasureDateHook is the signature for custom MeasureDate hook methods
	MeasureDateHook func(boil.Executor, *MeasureDate) error

	measureDateQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	measureDateType    = reflect.TypeOf(&MeasureDate{})
	measureDateMapping = queries.MakeStructMapping(measureDateType)

	measureDateInsertCacheMut sync.RWMutex
	measureDateInsertCache    = make(map[string]insertCache)
	measureDateUpdateCacheMut sync.RWMutex
	measureDateUpdateCache    = make(map[string]updateCache)
	measureDateUpsertCacheMut sync.RWMutex
	measureDateUpsertCache    = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force bytes in case of primary key column that uses []byte (for relationship compares)
	_ = bytes.MinRead
)
var measureDateBeforeInsertHooks []MeasureDateHook
var measureDateBeforeUpdateHooks []MeasureDateHook
var measureDateBeforeDeleteHooks []MeasureDateHook
var measureDateBeforeUpsertHooks []MeasureDateHook

var measureDateAfterInsertHooks []MeasureDateHook
var measureDateAfterSelectHooks []MeasureDateHook
var measureDateAfterUpdateHooks []MeasureDateHook
var measureDateAfterDeleteHooks []MeasureDateHook
var measureDateAfterUpsertHooks []MeasureDateHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MeasureDate) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MeasureDate) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MeasureDate) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MeasureDate) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MeasureDate) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MeasureDate) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MeasureDate) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MeasureDate) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MeasureDate) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range measureDateAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMeasureDateHook registers your hook function for all future operations.
func AddMeasureDateHook(hookPoint boil.HookPoint, measureDateHook MeasureDateHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		measureDateBeforeInsertHooks = append(measureDateBeforeInsertHooks, measureDateHook)
	case boil.BeforeUpdateHook:
		measureDateBeforeUpdateHooks = append(measureDateBeforeUpdateHooks, measureDateHook)
	case boil.BeforeDeleteHook:
		measureDateBeforeDeleteHooks = append(measureDateBeforeDeleteHooks, measureDateHook)
	case boil.BeforeUpsertHook:
		measureDateBeforeUpsertHooks = append(measureDateBeforeUpsertHooks, measureDateHook)
	case boil.AfterInsertHook:
		measureDateAfterInsertHooks = append(measureDateAfterInsertHooks, measureDateHook)
	case boil.AfterSelectHook:
		measureDateAfterSelectHooks = append(measureDateAfterSelectHooks, measureDateHook)
	case boil.AfterUpdateHook:
		measureDateAfterUpdateHooks = append(measureDateAfterUpdateHooks, measureDateHook)
	case boil.AfterDeleteHook:
		measureDateAfterDeleteHooks = append(measureDateAfterDeleteHooks, measureDateHook)
	case boil.AfterUpsertHook:
		measureDateAfterUpsertHooks = append(measureDateAfterUpsertHooks, measureDateHook)
	}
}

// OneP returns a single measureDate record from the query, and panics on error.
func (q measureDateQuery) OneP() *MeasureDate {
	o, err := q.One()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single measureDate record from the query.
func (q measureDateQuery) One() (*MeasureDate, error) {
	o := &MeasureDate{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for measure_date")
	}

	if err := o.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all MeasureDate records from the query, and panics on error.
func (q measureDateQuery) AllP() MeasureDateSlice {
	o, err := q.All()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all MeasureDate records from the query.
func (q measureDateQuery) All() (MeasureDateSlice, error) {
	var o MeasureDateSlice

	err := q.Bind(&o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MeasureDate slice")
	}

	if len(measureDateAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(queries.GetExecutor(q.Query)); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all MeasureDate records in the query, and panics on error.
func (q measureDateQuery) CountP() int64 {
	c, err := q.Count()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all MeasureDate records in the query.
func (q measureDateQuery) Count() (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count measure_date rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table, and panics on error.
func (q measureDateQuery) ExistsP() bool {
	e, err := q.Exists()
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q measureDateQuery) Exists() (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow().Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if measure_date exists")
	}

	return count > 0, nil
}

// MeasureDatesG retrieves all records.
func MeasureDatesG(mods ...qm.QueryMod) measureDateQuery {
	return MeasureDates(boil.GetDB(), mods...)
}

// MeasureDates retrieves all the records using an executor.
func MeasureDates(exec boil.Executor, mods ...qm.QueryMod) measureDateQuery {
	mods = append(mods, qm.From("\"audit\".\"measure_date\""))
	return measureDateQuery{NewQuery(exec, mods...)}
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *MeasureDate) InsertG(whitelist ...string) error {
	return o.Insert(boil.GetDB(), whitelist...)
}

// InsertGP a single record, and panics on error. See Insert for whitelist
// behavior description.
func (o *MeasureDate) InsertGP(whitelist ...string) {
	if err := o.Insert(boil.GetDB(), whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *MeasureDate) InsertP(exec boil.Executor, whitelist ...string) {
	if err := o.Insert(exec, whitelist...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// Whitelist behavior: If a whitelist is provided, only those columns supplied are inserted
// No whitelist behavior: Without a whitelist, columns are inferred by the following rules:
// - All columns without a default value are included (i.e. name, age)
// - All columns with a default, but non-zero are included (i.e. health = 75)
func (o *MeasureDate) Insert(exec boil.Executor, whitelist ...string) error {
	if o == nil {
		return errors.New("models: no measure_date provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(measureDateColumnsWithDefault, o)

	key := makeCacheKey(whitelist, nzDefaults)
	measureDateInsertCacheMut.RLock()
	cache, cached := measureDateInsertCache[key]
	measureDateInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := strmangle.InsertColumnSet(
			measureDateColumns,
			measureDateColumnsWithDefault,
			measureDateColumnsWithoutDefault,
			nzDefaults,
			whitelist,
		)

		cache.valueMapping, err = queries.BindMapping(measureDateType, measureDateMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(measureDateType, measureDateMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"audit\".\"measure_date\" (\"%s\") VALUES (%s)", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.IndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"audit\".\"measure_date\" DEFAULT VALUES"
		}

		if len(cache.retMapping) != 0 {
			cache.query += fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into measure_date")
	}

	if !cached {
		measureDateInsertCacheMut.Lock()
		measureDateInsertCache[key] = cache
		measureDateInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}
