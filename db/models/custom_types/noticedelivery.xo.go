package custom_types

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// NoticeDelivery is the 'notice_delivery' enum type from schema 'public'.
type NoticeDelivery uint16

const (
	// NoticeDeliveryNone is the 'none' NoticeDelivery.
	NoticeDeliveryNone = NoticeDelivery(1)

	// NoticeDeliverySite is the 'site' NoticeDelivery.
	NoticeDeliverySite = NoticeDelivery(2)

	// NoticeDeliveryWeekly is the 'weekly' NoticeDelivery.
	NoticeDeliveryWeekly = NoticeDelivery(3)

	// NoticeDeliveryDaily is the 'daily' NoticeDelivery.
	NoticeDeliveryDaily = NoticeDelivery(4)

	// NoticeDeliveryAsync is the 'async' NoticeDelivery.
	NoticeDeliveryAsync = NoticeDelivery(5)
)

// String returns the string value of the NoticeDelivery.
func (nd NoticeDelivery) String() string {
	var enumVal string

	switch nd {
	case NoticeDeliveryNone:
		enumVal = "none"

	case NoticeDeliverySite:
		enumVal = "site"

	case NoticeDeliveryWeekly:
		enumVal = "weekly"

	case NoticeDeliveryDaily:
		enumVal = "daily"

	case NoticeDeliveryAsync:
		enumVal = "async"
	}

	return enumVal
}

// MarshalText marshals NoticeDelivery into text.
func (nd NoticeDelivery) MarshalText() ([]byte, error) {
	return []byte(nd.String()), nil
}

// UnmarshalText unmarshals NoticeDelivery from text.
func (nd *NoticeDelivery) UnmarshalText(text []byte) error {
	switch string(text) {
	case "none":
		*nd = NoticeDeliveryNone

	case "site":
		*nd = NoticeDeliverySite

	case "weekly":
		*nd = NoticeDeliveryWeekly

	case "daily":
		*nd = NoticeDeliveryDaily

	case "async":
		*nd = NoticeDeliveryAsync

	default:
		return errors.New("invalid NoticeDelivery")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for NoticeDelivery.
func (nd NoticeDelivery) Value() (driver.Value, error) {
	return nd.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for NoticeDelivery.
func (nd *NoticeDelivery) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid NoticeDelivery")
	}

	return nd.UnmarshalText(buf)
}

// Nullable NoticeDelivery. Just a wrapper around NoticeDelivery.
type NullNoticeDelivery struct {
	NoticeDelivery NoticeDelivery
	Valid          bool
}

// Implements Scanner interface.
// This is what is used to convert a column of type action from a postgres query
// into this Go type. The argument has the []byte representation of the column.
// Null columns scan to nv.Valid == false.
func (nv *NullNoticeDelivery) Scan(value interface{}) error {
	if value == nil {
		nv.NoticeDelivery, nv.Valid = NoticeDelivery(0), false
		return nil
	}
	err := nv.NoticeDelivery.Scan(value)
	if err != nil {
		nv.Valid = false
		return err
	} else {
		nv.Valid = true
		return nil
	}
}

// Implements Valuer interface
// This is what is used to convert a  Go type action to a postgres type.
// Valid == false turns into a Null value.
func (nv NullNoticeDelivery) Value() (driver.Value, error) {
	if !nv.Valid {
		return nil, nil
	}
	return nv.NoticeDelivery.Value()
}

// This function is used for testing SQLBoiler models, i.e. randomization
// for models that have a NoticeDelivery column.
// Obviously it's not random but it doesn't really need to be anyway.
func NoticeDeliveryRandom() NoticeDelivery {
	return NoticeDeliveryAsync

}

// This function is used for testing SQLBoiler models, i.e. randomization
// for models that have a NullNoticeDelivery column.
// Obviously it's not random but it doesn't really need to be anyway.
func NullNoticeDeliveryRandom() NullNoticeDelivery {
	return NullNoticeDelivery{NoticeDeliveryAsync, true}

}
