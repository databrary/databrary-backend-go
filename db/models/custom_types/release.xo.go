package custom_types

// GENERATED BY XO. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// Release is the 'release' enum type from schema 'public'.
type Release uint16

const (
	// ReleasePrivate is the 'PRIVATE' Release.
	ReleasePrivate = Release(1)

	// ReleaseShared is the 'SHARED' Release.
	ReleaseShared = Release(2)

	// ReleaseExcerpts is the 'EXCERPTS' Release.
	ReleaseExcerpts = Release(3)

	// ReleasePublic is the 'PUBLIC' Release.
	ReleasePublic = Release(4)
)

// String returns the string value of the Release.
func (r Release) String() string {
	var enumVal string

	switch r {
	case ReleasePrivate:
		enumVal = "PRIVATE"

	case ReleaseShared:
		enumVal = "SHARED"

	case ReleaseExcerpts:
		enumVal = "EXCERPTS"

	case ReleasePublic:
		enumVal = "PUBLIC"
	}

	return enumVal
}

// MarshalText marshals Release into text.
func (r Release) MarshalText() ([]byte, error) {
	return []byte(r.String()), nil
}

// UnmarshalText unmarshals Release from text.
func (r *Release) UnmarshalText(text []byte) error {
	switch string(text) {
	case "PRIVATE":
		*r = ReleasePrivate

	case "SHARED":
		*r = ReleaseShared

	case "EXCERPTS":
		*r = ReleaseExcerpts

	case "PUBLIC":
		*r = ReleasePublic

	default:
		return errors.New("invalid Release")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for Release.
func (r Release) Value() (driver.Value, error) {
	return r.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for Release.
func (r *Release) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid Release")
	}

	return r.UnmarshalText(buf)
}

// Nullable Release. Just a wrapper around Release.
type NullRelease struct {
	Release Release
	Valid   bool
}

// Implements Scanner interface.
// This is what is used to convert a column of type action from a postgres query
// into this Go type. The argument has the []byte representation of the column.
// Null columns scan to nv.Valid == false.
func (nv *NullRelease) Scan(value interface{}) error {
	if value == nil {
		nv.Release, nv.Valid = Release(0), false
		return nil
	}
	err := nv.Release.Scan(value)
	if err != nil {
		nv.Valid = false
		return err
	} else {
		nv.Valid = true
		return nil
	}
}

// Implements Valuer interface
// This is what is used to convert a  Go type action to a postgres type.
// Valid == false turns into a Null value.
func (nv NullRelease) Value() (driver.Value, error) {
	if !nv.Valid {
		return nil, nil
	}
	return nv.Release.Value()
}

// This function is used for testing SQLBoiler models, i.e. randomization
// for models that have a NullRelease column.
// Obviously it's not random but it doesn't really need to be anyway.
func NullReleaseRandom() NullRelease {
	return NullRelease{ReleasePrivate, true}
}

// This function is used for testing SQLBoiler models, i.e. randomization
// for models that have a Release column.
// Obviously it's not random but it doesn't really need to be anyway.
func ReleaseRandom() Release {
	return ReleasePrivate
}
